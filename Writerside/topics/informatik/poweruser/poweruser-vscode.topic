<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic help-id="app-vscode"
       id="poweruser-vscode"
       title="VSCode" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">
    <show-structure depth="2" for="chapter,procedure"/>

    <chapter id="basics" title="Grundlegendes">
        <chapter id="basics-cli" title="CLI">
            <table style="header-row">
                <tr>
                    <td>Befehl</td>
                    <td>Beschreibung</td>
                </tr>
                <tr>
                    <td><code>code .</code></td>
                    <td>Öffnet VSCode im aktuellen Verzeichnis der CL.</td>
                </tr>
                <tr>
                    <td><code>code [path]</code></td>
                    <td>Öffnet VSCode in einem bestimmten Verzeichnis.</td>
                </tr>
                <tr>
                    <td><code>code [file]</code></td>
                    <td>Öffnet VSCode mit einer bestimmten Datei.</td>
                </tr>
                <tr>
                    <td><code>code -v</code></td>
                    <td>Gibt die Versionsnummer von VSCode aus</td>
                </tr>
                <tr>
                    <td><code>code --status</code></td>
                    <td>Gibt diagnostische Informationen über VSCode aus.</td>
                </tr>
            </table>
        </chapter>

        <chapter id="basics-personalisierung" title="Personalisierung">
            <img alt="VSCode Personalisierung" src="poweruser-vscode-peronalisierung.png"/>

            <p>
                VSCode bietet unzählige Personalisierungsmöglichkeiten.
            </p>

            <chapter id="basics-color-theme" title="Color Theme">
                <p>
                    Die in der Benutzeroberfläche von VSCode sichtbaren Farben fallen in zwei Kategorien:
                </p>

                <list>
                    <li>
                        <b>Workbench Farben</b>, die in Ansichten und Editoren verwendet werden, von der
                        Aktivitätsleiste bis zur Statusleiste.
                    </li>
                    <li>
                        <b>Syntaxfarben und Stile</b>, die für den Quellcode im Editor verwendet werden. Die
                        Thematisierung dieser Farben ist unterschiedlich, da die Syntaxeinfärbung auf
                        TextMate-Grammatiken und TextMate-Themen sowie auf semantischen Token basiert.
                    </li>
                    <li></li>
                </list>

                <p>
                    Auf dieser Website werden mehrere Themes gegenübergestellt: <a href="https://vscodethemes.com/"/>
                </p>
            </chapter>

            <chapter id="basics-file-icon-theme" title="File Icon Theme">
                <p>
                    Visual Studio Code zeigt in der gesamten Benutzeroberfläche Symbole neben den Dateinamen an, und
                    Erweiterungen können neue Sets von Dateisymbolen beisteuern, aus denen der VSCode-Benutzer wählen
                    kann. Das IconSet <code>vscode-icons</code> bietet beispielsweise ein breiteres Set an Icons wie der
                    Standard, welches den Explorer übersichtlicher gestaltet:
                    <a href="https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons">
                        https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons
                    </a>
                </p>
            </chapter>

            <chapter id="basics-product-icon-theme" title="Product Icon Theme">
                <p>
                    Visual Studio Code enthält eine Reihe von integrierten Symbolen, die in Ansichten und im Editor
                    verwendet werden, aber auch in Hover-Fenstern, in der Statusleiste und sogar in Erweiterungen
                    referenziert werden können. Beispiele dafür sind die Symbole in Filteraktionsschaltflächen und
                    Ansichtssymbolen, in der Statusleiste, Haltepunkten und den Faltungssymbolen in Bäumen und im
                    Editor.
                </p>
                <p>
                    Ein Product Icon Theme ermöglicht es einer Erweiterung, diese Symbole neu zu definieren, um VSCode
                    ein benutzerdefiniertes Aussehen zu geben. Nicht abgedeckt durch Produktsymbolthemen sind die
                    Dateisymbole (abgedeckt durch Dateisymbolthemen) und Symbole, die von Erweiterungen beigetragen
                    werden.
                </p>
            </chapter>

            <chapter id="basics-fonts-ligatures" title="Fonts &amp; Ligatures">
                <p>
                    Programmierer verwenden eine Vielzahl von Symbolen, die oft mit mehreren Zeichen kodiert sind. Für
                    das menschliche Gehirn sind Sequenzen wie <code>-&gt;</code>, <code>&lt;=</code> oder
                    <code>:=</code> einzelne logische Token, auch wenn sie zwei oder drei Zeichen auf dem Bildschirm
                    einnehmen. Ihr Auge wendet eine Menge Energie auf, um mehrere Zeichen zu scannen, zu analysieren und
                    zu einem einzigen logischen Zeichen zu verbinden. Idealerweise sollten alle Programmiersprachen mit
                    vollwertigen Unicode-Symbolen für Operatoren ausgestattet sein, aber das ist noch nicht der Fall.
                </p>
                <p>
                    Fira Code ist ein kostenloser Monospaced-Font mit Ligaturen für gängige Mehrzeichenkombinationen in
                    der Programmierung. Dies ist nur eine Funktion zur Darstellung der Schriftart: Der zugrunde liegende
                    Code bleibt ASCII-kompatibel. Dies hilft, den Code schneller zu lesen und zu verstehen. Für einige
                    häufige Sequenzen wie <code>..</code> oder <code>//</code> ermöglichen Ligaturen die Korrektur der
                    Abstände.
                </p>

                <img alt="FiraCode" src="poweruser-vscode-firacode.png" width="500"/>

                <p>
                    Hier zur Installationsanleitung:
                    <a href="https://github.com/tonsky/FiraCode/wiki/VS-Code-Instructions">
                        https://github.com/tonsky/FiraCode/wiki/VS-Code-Instructions
                    </a>
                </p>
            </chapter>

            <chapter id="basics-bracket-colorizer" title="Bracket Colorizer">
                <img alt="Bracket Pair Colorizer" src="poweruser-vscode-bracket-pair-colorizer.png"/>

                <p>
                    Beim Umgang mit tief verschachtelten Klammern in Visual Studio Code kann es schwierig sein,
                    herauszufinden, welche Klammern zusammenpassen und welche nicht.
                </p>
                <p>
                    Um dies zu vereinfachen, entwickelte ein Benutzer namens CoenraadS im Jahr 2016 die großartige
                    Bracket Pair Colorizer-Erweiterung zur Einfärbung übereinstimmender Klammern und veröffentlichte sie
                    auf dem VS Code Marketplace. Diese Erweiterung wurde sehr beliebt und ist jetzt eine der 10 am
                    häufigsten heruntergeladenen Erweiterungen auf dem Marketplace, mit über 6 Millionen Installationen.
                    Um Leistungs- und Genauigkeitsprobleme zu beheben, legte CoenraadS 2018 mit Bracket Pair Colorizer
                    2 nach, der mittlerweile ebenfalls über 3 Millionen Installationen hat.
                </p>
                <p>Im August 2021 wurde diese Eigenschaft in VSCode nativ implementiert.</p>

                <list type="decimal">
                    <li>
                        <code>File Menu</code>
                        <img alt="right arrow" src="right_arrow_3d.png" width="24"/>
                        <code>Preferences</code>
                        <img alt="right arrow" src="right_arrow_3d.png" width="24"/>
                        <code>Settings</code>
                    </li>
                    <li>
                        Nach dem Begriff <code>bracketPair</code> suchen
                    </li>
                    <li>
                        <p>
                            Die Checkbox anklicken, um Bracket Pair Colorization zu aktivieren:
                        </p>
                        <img alt="Bracket Pair Suche" src="poweruser-vscode-bracket-pair-colorizer-search.png"/>
                    </li>
                </list>
            </chapter>
        </chapter>
    </chapter>

    <chapter id="fileexplorer" title="File Explorer">
        <table>
            <tr>
                <td>Shortcut</td>
                <td>Beschreibung</td>
            </tr>
            <tr>
                <td><code>CTRL</code>+<code>S</code></td>
                <td>Speichert die Änderungen an einer Datei.</td>
            </tr>
            <tr>
                <td><code>CTRL</code>+<code>W</code></td>
                <td>Schließt eine Datei</td>
            </tr>
            <tr>
                <td><code>CTRL</code>+<code>B</code></td>
                <td>Öffnet und schließt den File Explorer</td>
            </tr>
        </table>

        <chapter id="fileexplorer-views" title="Views">
            <p>
                Im Explorer gibt es mehrere Views welche aktiviert und (bis auf die Folders-View) deaktiviert werden
                können.
            </p>

            <img alt="FileExplorer Views" src="poweruser-vscode-fileexplorer-views.png"/>

            <p>
                VSCode erkennt Scripts von Build Tools wie <code>npm</code>, <code>typescript</code>,
                <code>gulp</code>, <code>docker</code> ... und erstellt dafür automatisch eigene Tasks. Hierbei
                erscheint ein eigenes Panel im Explorer für in diesem Beispiel <code>NPM Scripts</code>.
            </p>

            <chapter id="fileexplorer-views-openeditors" title="Open Editors">
                <img alt="FileExplorer Open Editors" src="poweruser-vscode-fileexplorer-views-openeditors.png"/>

                <list>
                    <li>
                        <code>New Untitled Text File</code> – Das Shortcut hierfür wäre <code>CTRL</code>+<code>N</code>
                    </li>
                    <li>
                        <code>Toggle Vertical/Horizontal Editor Layout</code> – Das Shortcut hierfür wäre
                        <code>SHIFT</code>+<code>ALT</code>+<code>0</code>
                    </li>
                    <li>
                        <code>Save All</code>
                    </li>
                    <li>
                        <code>Close All Editors</code>
                    </li>
                </list>
            </chapter>

            <chapter id="fileexplorer-views-folders" title="Folders">
                <img alt="FileExplorer Folders" src="poweruser-vscode-fileexplorer-views-folders.png"/>

                <list>
                    <li>
                        <code>New File...</code>
                    </li>
                    <li>
                        <code>New Folder...</code>
                    </li>
                    <li>
                        <code>Refresh Explorer</code>
                    </li>
                    <li>
                        <code>Collapse Folders in Explorer</code>: ein unterbewertetes Feature - kann häufig sehr
                        nützlich sein
                    </li>
                </list>
            </chapter>
        </chapter>

        <chapter id="unsichtbare-dateien-ordner" title="Unsichtbare Dateien und Ordner">
            <p>
                In VSCode können Dateien und Order im Explorer ausgeblendet werden. Beispielsweise wird standardmäßig
                das <code>.git</code>-Verzeichnis sowie einige andere ausgeblendet. Um diese Konfiguration zu ändern
                werden die Einstellungen geöffnet <code>CTRL</code>+<code>,</code> und nach <code>Files: Exclude</code>
                gesucht:
            </p>

            <img alt="FileExplorer Exclude" src="poweruser-vscode-fileexplorer-exclude.png"/>
        </chapter>

        <chapter id="auto-directory" title="Auto-Directory">
            <img alt="FileExplorer Auto-Directory" src="poweruser-vscode-autodirectory.png"/>

            <p>
                In diesem Beispiel wird der Ordner <code>tabTest</code> und die folglich darin enthaltene Datei
                <code>RICOTabTest.tsx</code> erstellt.
            </p>
        </chapter>

        <chapter id="referenzen" title="Nach Referenzen suchen">
            <chapter id="referenzen-workspace" title="Suche im Workspace">
                <p>
                    <code>CTRL</code>+<code>SHIFT</code>+<code>F</code> – sucht in allen Dateien des Workspace; führt in
                    vielen Fällen zu viele Suchergebnisse die eigentlich nicht benötigt werden.
                </p>

                <img alt="Referenzen - Suche im Workspace" src="poweruser-vscode-fileexplorer-search.png"/>
            </chapter>

            <chapter id="referenzen-jump" title="Suche &amp; Springe zu ...">
                <p>
                    Mittels Rechtsklick auf eine Methode oder Eigenschaft öffnet sich ein Kontextmenü:
                </p>

                <img alt="Referenzen - Springe zu" src="poweruser-vscode-fileexplorer-goto.png"/>

                <p>
                    Diese bietet mehrere Optionen:
                </p>

                <list>
                    <li>(<code>F12</code>) Go to Definition</li>
                    <li>Go to Type Definition</li>
                    <li>(<code>CTRL</code>+<code>F12</code>) Go to Implementations</li>
                    <li>(<code>SHIFT</code>+<code>F12</code>) Go to References</li>
                    <li>Go to Source Definition</li>
                    <li>Peek</li>
                    <li>(<code>SHIFT</code>+<code>ALT</code>+<code>F12</code>) Find All References</li>
                    <li>Find All Implementations</li>
                    <li>(<code>SHIFT</code>+<code>ALT</code>+<code>H</code>) Show Call Hierarchy</li>
                </list>
            </chapter>

            <chapter id="referenzen-peek" title="Peek">
                <p>
                    Im Kontextmenü welches sich durch einen Rechtsklick auf eine Methode oder Eigenschaft öffnet, kann
                    das Peak Menü ausgewählt werden. Peek erlaubt es im selben Editor-Fenster ein kleines Editor-Fenster
                    einzuschließen, um schnelle Anpassungen vorzunehmen oder eine Vorschau zu erhalten was passiert.
                </p>

                <img alt="Referenzen - Peek Optionen" src="poweruser-vscode-fileexplorer-peek-options.png"/>

                <img alt="Referenzen - Peek Ansicht" src="poweruser-vscode-fileexplorer-peek-view.png"/>
            </chapter>
        </chapter>
    </chapter>

    <chapter id="intellisense" title="IntelliSense">
        <p>
            IntelliSense ist ein allgemeiner Begriff für ein Hilfsmittel zur automatischen Vervollständigung der
            Bearbeitung von Quellcode durch einen Programmierer. Es bietet Codevorschläge und -erklärungen an, während
            der Programmierer schreibt. So erleichtert es das Schreiben von Code, fördert das Verständnis von Syntax und
            schult die Funktionsweise bestimmter Befehle. IntelliSense kann Codevorschläge basierend auf der Eingabe des
            Benutzers anzeigen, z. B. wenn der Benutzer eine Variable oder eine Funktion eingibt. Es kann auch den
            Benutzer darüber informieren, welche Optionen für bestimmte Funktionen oder Methoden verfügbar sind, indem
            es die verfügbaren Argumente anzeigt.
        </p>

        <table style="none">
            <tr>
                <td><code>CTRL</code><code>SPACE</code></td>
                <td>
                    Triggert IntelliSense
                </td>
            </tr>
            <tr>
                <td><code>CTRL</code>+<code>SHIFT</code>+<code>SPACE</code></td>
                <td>
                    Zeigt die Parameter einer Funktion/Methode an und hilft einem somit bei der Auswahl der Argumente.
                </td>
            </tr>
        </table>

        <chapter id="intellisense-typen" title="Typen">
            <p>
                VS Code IntelliSense bietet verschiedene Typen von Vervollständigungen, darunter Vorschläge des
                Sprachservers, Snippets und einfache wortbasierte Textvervollständigungen.
            </p>

            <table>
                <tr>
                    <td>ICON</td>
                    <td>Beschreibung</td>
                </tr>
                <tr>
                    <td>
                        <img alt="VSCode Icon - Method"
                             src="https://code.visualstudio.com/assets/docs/editor/intellisense/Method_16x.svg"
                             style="block" width="200"/>
                    </td>
                    <td>Methoden und Funktionen</td>
                </tr>
                <tr>
                    <td>
                        <img alt="VSCode Icon - Variable"
                             src="https://code.visualstudio.com/assets/docs/editor/intellisense/Variable_16x.svg"
                             style="block" width="200"/>
                    </td>
                    <td>Variablen</td>
                </tr>
                <tr>
                    <td>
                        <img alt="VSCode Icon - Field"
                             src="https://code.visualstudio.com/assets/docs/editor/intellisense/Field_16x.svg"
                             style="block" width="200"/>
                    </td>
                    <td>Felder</td>
                </tr>
                <tr>
                    <td>
                        <img alt="VSCode Icon - Symbol Parameter"
                             src="https://code.visualstudio.com/assets/docs/editor/intellisense/symbol-parameter.svg"
                             style="block" width="200"/>
                    </td>
                    <td>Type Parameter</td>
                </tr>
                <tr>
                    <td>
                        <img alt="VSCode Icon - Symbol Constant"
                             src="https://code.visualstudio.com/assets/docs/editor/intellisense/symbol-constant.svg"
                             style="block" width="200"/>
                    </td>
                    <td>Konstanten</td>
                </tr>
                <tr>
                    <td>
                        <img alt="VSCode Icon - Class"
                             src="https://code.visualstudio.com/assets/docs/editor/intellisense/Class_16x.svg"
                             style="block" width="200"/>
                    </td>
                    <td>Klassen</td>
                </tr>
                <tr>
                    <td>
                        <img alt="VSCode Icon - Interface"
                             src="https://code.visualstudio.com/assets/docs/editor/intellisense/Interface_16x.svg"
                             style="block" width="200"/>
                    </td>
                    <td>Schnittstellen (Interfaces)</td>
                </tr>
                <tr>
                    <td>
                        <img alt="VSCode Icon - Symbol Structure"
                             src="https://code.visualstudio.com/assets/docs/editor/intellisense/symbol-structure.svg"
                             style="block" width="200"/>
                    </td>
                    <td>Strukturen</td>
                </tr>
                <tr>
                    <td>
                        <img alt="VSCode Icon - Event"
                             src="https://code.visualstudio.com/assets/docs/editor/intellisense/symbol-event.svg"
                             style="block" width="200"/>
                    </td>
                    <td>Events</td>
                </tr>
                <tr>
                    <td>
                        <img alt="VSCode Icon - Symbol Operator"
                             src="https://code.visualstudio.com/assets/docs/editor/intellisense/symbol-operator.svg"
                             style="block" width="200"/>
                    </td>
                    <td>Operatoren</td>
                </tr>
                <tr>
                    <td>
                        <img alt="VSCode Icon - Namespace"
                             src="https://code.visualstudio.com/assets/docs/editor/intellisense/Namespace_16x.svg"
                             style="block" width="200"/>
                    </td>
                    <td>Module / Namespaces</td>
                </tr>
                <tr>
                    <td>
                        <img alt="VSCode Icon - Property"
                             src="https://code.visualstudio.com/assets/docs/editor/intellisense/Property_16x.svg"
                             style="block" width="200"/>
                    </td>
                    <td>Properties und Attribute</td>
                </tr>
                <tr>
                    <td>
                        <img alt="VSCode Icon - EnumItem"
                             src="https://code.visualstudio.com/assets/docs/editor/intellisense/EnumItem_16x.svg"
                             style="block" width="200"/>
                    </td>
                    <td>Werte und Enumerationen</td>
                </tr>
                <tr>
                    <td>
                        <img alt="VSCode Icon - Reference"
                             src="https://code.visualstudio.com/assets/docs/editor/intellisense/Reference_16x.svg"
                             style="block" width="200"/>
                    </td>
                    <td>Referenzen</td>
                </tr>
                <tr>
                    <td>
                        <img alt="VSCode Icon - Keyword"
                             src="https://code.visualstudio.com/assets/docs/editor/intellisense/Keyword_16x.svg"
                             style="block" width="200"/>
                    </td>
                    <td>Keywords</td>
                </tr>
                <tr>
                    <td>
                        <img alt="VSCode Icon - Symbol File"
                             src="https://code.visualstudio.com/assets/docs/editor/intellisense/symbol-file.svg"
                             style="block" width="200"/>
                    </td>
                    <td>Dateien</td>
                </tr>
                <tr>
                    <td>
                        <img alt="VSCode Icon - Folder"
                             src="https://code.visualstudio.com/assets/docs/editor/intellisense/folder.svg"
                             style="block" width="200"/>
                    </td>
                    <td>Ordner</td>
                </tr>
                <tr>
                    <td>
                        <img alt="VSCode Icon - ColorPalette"
                             src="https://code.visualstudio.com/assets/docs/editor/intellisense/ColorPalette_16x.svg"
                             style="block" width="200"/>
                    </td>
                    <td>Farben</td>
                </tr>
                <tr>
                    <td>
                        <img alt="VSCode Icon - Ruler"
                             src="https://code.visualstudio.com/assets/docs/editor/intellisense/Ruler_16x.svg"
                             style="block" width="200"/>
                    </td>
                    <td>Units</td>
                </tr>
                <tr>
                    <td>
                        <img alt="VSCode Icon - Snippet"
                             src="https://code.visualstudio.com/assets/docs/editor/intellisense/Snippet_16x.svg"
                             style="block" width="200"/>
                    </td>
                    <td>Snippet prefixes</td>
                </tr>
                <tr>
                    <td>
                        <img alt="VSCode Icon - String"
                             src="https://code.visualstudio.com/assets/docs/editor/intellisense/String_16x.svg"
                             style="block" width="200"/>
                    </td>
                    <td>Wörter</td>
                </tr>
            </table>

            <img alt="VSCode - IntelliSense"
                 src="https://code.visualstudio.com/assets/docs/editor/intellisense/intellisense_icons.png"/>
        </chapter>

        <chapter id="intellisense-autocomplete" title="Autocomplete">
            <p>
                Die Möglichkeiten der IntelliSense-Funktionen in VSCode hängen von der jeweiligen Sprache bzw. dessen
                Sprachdienst (= language service) ab. Für Sprachen bzw. Frameworks wie flutter gibt es eigene Extensions
                mit Sprachdiensten, welche den Funktionsumfang von IntelliSense erweitern. Ein Sprachdienst bietet
                intelligente Codevervollständigungen auf der Grundlage der Sprachsemantik und einer Analyse des
                Quellcodes. Wenn ein Sprachdienst mögliche Vervollständigungen kennt, werden die IntelliSense-Vorschläge
                während der Eingabe angezeigt. Wird mit der Eingabe von Zeichen fortgefahren, wird die Liste der
                Elemente (Variablen, Methoden usw.) so gefiltert, dass sie nur Elemente enthält, die die eingegebenen
                Zeichen enthalten. Wird die Tabulatortaste <code>TAB</code> oder die Eingabetaste <code>ENTER</code>
                drücken, wird das ausgewählte Element eingefügt.
            </p>
            <p>
                Mit der Tastenkombination <code>CTRL</code>+<code>SPACE</code> kann IntelliSense in jedem Editor
                getriggert werden. Wird es vom Sprachdienst unterstützt, dann kann dadurch auch die sogenannte quick
                info angezeigt werden:
            </p>

            <img alt="VSCode - IntelliSense Autocomplete Usage"
                 src="https://code.visualstudio.com/assets/docs/editor/intellisense/intellisense_docs.gif"/>

            <img alt="VSCode - IntelliSense Autocomplete Function Info"
                 src="https://code.visualstudio.com/assets/docs/editor/intellisense/paramater_info.png"/>

            <p>
                Mit <code>CTRL</code>+<code>SHIFT</code>+<code>SPACE</code> werden die Parameter einer Funktion bzw.
                Methode angezeigt:
            </p>

            <img alt="VSCode - IntelliSense Autocomplete Parameter Info"
                 src="poweruser-vscode-intellisense-parameterinfo.png"/>
        </chapter>
    </chapter>

    <chapter id="keyboard" title="Mit Tastatur arbeiten – Keyboard Shortcuts">
        <img alt="VSCode Keyboard Shortcuts" src="poweruser-vscode-keyboard-shortcuts.png"/>

        <p>
            Quelle:
            <a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf" ignore-vars="true">
                https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf
            </a>
            . In VSCode können alle Keyboard Shortcuts neu um konfiguriert werden oder neue hinzugefügt werden. Eines
            der größten Tricks um schneller zu programmieren, ist es, Zeit zu investieren, um die Bearbeitung des Codes
            ohne Maus zu üben.
        </p>

        <chapter id="keyboard-navigation" title="Keyboard Navigation">
            <list>
                <li>
                    <p>
                        Mit der Tastenkombination <code>CTRL</code>+<code>P</code> lässt sich die Datei
                        <b>Navigation</b> öffnen.
                    </p>

                    <list>
                        <li>
                            <p>
                                Wird hier ein <code>@</code> eingegeben so kann nach <b>Symbolen</b> gesucht
                                werden. Das direkte Shortcut dafür wäre
                                <code>CTRL</code>+<code>SHIFT</code>+<code>O</code>.
                            </p>

                            <img alt="VSCode Keyboard Navigation - Symbols"
                                 src="poweruser-vscode-navigation-symbols.png"/>
                        </li>
                        <li>
                            <p>
                                Wird hier ein &gt; eingegeben so kann nach <b>Befehlen</b> gesucht werden. Das direkte
                                Shortcut dafür wäre <code>CTRL</code>+<code>SHIFT</code>+<code>P</code>. Hiermit lassen
                                sich nahezu alle in VSCode verfügbaren Panels und Menüs öffnen.
                            </p>

                            <img alt="VSCode Keyboard Navigation - Commands" src="poweruser-navigation-commands.png"/>
                        </li>
                        <li>
                            Mit der Tastenkombination <code>CTRL</code>+<code>SHIFT</code>+<code>M</code> kann das
                            <b>"Problems Panel"</b> angezeigt werden.
                        </li>
                    </list>
                </li>
            </list>
        </chapter>
    </chapter>

    <chapter id="edit" title="Bearbeitungstricks">
        <chapter id="edit-collapse" title="Codeteile einklappen">
            <p>
                In VSCode lassen sich Codeblöcke wie beispielsweise eine Funktion einklappen. Dafür stehen die Pfeile
                neben der Zeilennummerierung.
            </p>

            <img alt="VSCode - Code nicht eingeklappt" src="poweruser-vscode-edit-collapsed-false.png"/>

            <img alt="VSCode - Code eingeklappt" src="poweruser-vscode-edit-collapsed-true.png"/>

            <p>
                Eine empfehlenswerte Taktik wäre: zuerst alles zusammenklappen und folglich jene Codeblöcke aufklappen
                an denen man arbeiten muss.
            </p>

            <img alt="VSCode - Code einklappen" src="poweruser-vscode-edit-collapse-all.png"/>
        </chapter>

        <chapter id="edit-multi" title="Multi Cursor + Multiline Editing">
            <table style="none">
                <tr>
                    <td><code>ALT</code>+<code>(CLICK)</code></td>
                    <td>Mit <code>ALT</code>+<code>(CLICK)</code> lassen sich mehrere Cursors zugleich setzen. Dies ist
                        viel schneller als Copy/Paste, wenn der Wert immer derselbe ist.
                    </td>
                </tr>
                <tr>
                    <td><code>CTRL</code>+<code>D</code></td>
                    <td>
                        Wird der Cursor auf ein Symbol gelegt und die Tastenkombination <code>CTRL</code>+<code>D</code>
                        verwendet, so wird das komplette Symbol ausgewählt. Wird die Tastenkombination erneut betätigt,
                        so wird das nächste gleichnamige Symbol auch ausgewählt.
                    </td>
                </tr>
            </table>
        </chapter>

        <chapter id="edit-linked" title="Linked Editing">
            <p>
                Wenn ein Tag geändert wird, aktualisiert die Linked-Editing-Funktion automatisch den passenden
                schließenden Tag. Die Funktion ist optional und kann durch Einstellung aktiviert werden:
            </p>

            <code-block lang="json">
                "editor.linkedEditing": true
            </code-block>
        </chapter>

        <chapter id="edit-safe-rename" title="Safe Rename">
            <p>
                Eine der härtesten Aufgaben eines Entwicklers ist es, den richtigen Bezeichner für eine Variable,
                Funktion, Klasse, ... zu finden. Das bedeutet, dass man öfters mal diese umbenennt. Damit man nicht zu
                jeder Stelle gehen muss, an der dieser Bezeichner verwendet wurde, geht man zuerst zur Implementation
                der
                Variable (bzw. Funktion, ...) mittels <code>CTRL</code>+<code>F12</code> oder (Rechtsklick) + (Go to
                Implementations) dort wählt man den Bezeichner und benennt ihn mittels <code>F2</code> bzw.
                (Rechtsklick) + (Rename Symbol) um. Dies gibt einem die Option einen neuen Bezeichner einzugeben. Wird
                er geändert so ändert sich der Bezeichner an allen stellen an denen er verwendet wird.
            </p>

            <table>
                <tr>
                    <td><code>CTRL</code>+<code>F12</code></td>
                    <td>
                        Springt zur Implementation – auch mit Rechtsklick + Go to Implementation möglich
                    </td>
                </tr>
                <tr>
                    <td><code>F2</code></td>
                    <td>
                        Benennt den Bezeichner überall wo er verwendet wird um – auch mit Rechtsklick + Rename Symbol
                        möglich.
                    </td>
                </tr>
            </table>
        </chapter>

        <chapter id="edit-code-actions" title="Code Actions">
            <p>
                Die sogenannten Code Actions <img alt="Light Bulb" src="light_bulb_3d.png" style="inline" width="20"/>,
                welche mit der Tastenkombination <code>CTRL</code>+<code>.</code> getriggert werden können, schlagen
                verschiedene Verbesserungen vor:
            </p>

            <img alt="VSCode - Code Action" src="poweruser-vscode-edit-code-action.png"/>

            <p>
                In diesem Beispiel kann die Arrow-Funktion in eine Named-Funktion konvertiert werden. Die Nutzbarkeit
                dieses Tools hängt stark von der Programmiersprache ab.
            </p>
        </chapter>
    </chapter>

    <chapter id="emmet" title="Emmet">
        <img alt="VSCode - Emmet GIF" src="https://code.visualstudio.com/assets/docs/editor/emmet/emmet.gif"/>

        <p>
            Emmet ist ein quelloffenes Plugin für verschiedene Texteditoren, zur schnellen Erstellung von XML-, HTML-,
            CSS-Code und weitere. Emmet ist in VSCode bereits fix integriert.
        </p>

        <chapter id="emmet-beispiele" title="Beispiele für Emmet Anweisungen">
            <table>
                <tr>
                    <td>Emmet-Anweisung</td>
                    <td>Ergebnis</td>
                </tr>
                <tr>
                    <td><code>html&gt;head+body</code></td>
                    <td>
                        <code-block lang="html">
                            &lt;html&gt;
                            &lt;head&gt;&lt;/head&gt;
                            &lt;body&gt;

                            &lt;/body&gt;
                            &lt;/html&gt;
                        </code-block>
                    </td>
                </tr>
                <tr>
                    <td><code>ul.gallery>(li>a[href="img/$$$.jpg"]{Bild $$$})*3</code></td>
                    <td>
                        <code-block lang="html">
                            &lt;ul class="gallery"&gt;
                                &lt;li&gt;&lt;a href="img/001.jpg"&gt;Bild 001&lt;/a&gt;&lt;/li&gt;
                                &lt;li&gt;&lt;a href="img/002.jpg"&gt;Bild 002&lt;/a&gt;&lt;/li&gt;
                                &lt;li&gt;&lt;a href="img/003.jpg"&gt;Bild 003&lt;/a&gt;&lt;/li&gt;
                            &lt;/ul&gt;
                        </code-block>
                    </td>
                </tr>
                <tr>
                    <td><code>pos.a</code></td>
                    <td>
                        <code-block lang="css">
                            position:absolute;
                        </code-block>
                    </td>
                </tr>
                <tr>
                    <td><code>ff:a</code></td>
                    <td>
                        <code-block lang="css">
                            font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;
                        </code-block>
                    </td>
                </tr>
            </table>
        </chapter>

        <chapter id="emmet-cheat-sheet" title="Emmet Cheat Sheet">
            <p>
                Mehr Beispiele hier: <a href="https://docs.emmet.io/cheat-sheet"/>
            </p>
        </chapter>

        <chapter id="emmet-wrap-abbreviation" title="Emmet Wrap Abbreviation">
            <p>
                Mit dem Command <code>Emmet: Balance (outward)</code> lässt sich ein Elementmarkieren. Wird dieser
                Befehl nochmals ausgeführt, dann markiert er auch die umliegenden Elemente, folglich das Elternelement
                usw.:
            </p>

            <img alt="VSCode - Emmet: Balance (outward)" src="poweruser-vscode-emmet-balance.png"/>

            <p>
                Mit dem Command <code>Emmet: Wrap with Abbreviation</code> lässt sich das markierte Element in einem
                neuen Element einschließen:
            </p>

            <img alt="VSCode - Emmet: Wrap with Abbreviation" src="poweruser-vscode-emmet-wrap-with-abbreviation.png"/>
        </chapter>
    </chapter>

    <chapter id="snippets" title="Snippets">
        <chapter id="snippets-builtin" title="Built-in snippets">
            <p>
                VSCode hat bereits eine Sammlung von Snippets für mehrere Sprachen wie JavaScript, TypeScript, Markdown
                und PHP eingebaut:
            </p>

            <img alt="VSCode - Built-in Snippets Example"
                 src="https://code.visualstudio.com/assets/docs/editor/userdefinedsnippets/builtin-javascript-snippets.png"/>

            <p>
                Eine Liste der Snippets kann über den Command (<code>CTRL</code>+<code>SHIFT</code>+<code>P</code>)
                <code>Snippets: Insert Snippet</code> angezeigt werden:
            </p>

            <img alt="VSCode - Built-in Snippets Action" src="poweruser-vscode-snippets-action.png"/>

            <img alt="VSCode - Built-in Snippets List" src="poweruser-vscode-snippets-list.png"/>
        </chapter>

        <chapter id="snippets-extensions" title="Extensions">
            <p>
                In VSCode gibt es auch viele Erweiterungen mit Snippets welche vom Marketplace heruntergeladen werden
                können. Der Marketplace wird mit der Tastenkombination
                <code>CTRL</code>+<code>SHIFT</code>+<code>X</code> geöffnet. Dort kann bei der Suche
                <code>@category:"snippets"</code> eingegeben werden, um nach Extensions mit Snippets zu suchen.
            </p>
        </chapter>

        <chapter id="snippets-custom" title="Custom Snippets">
            <p>
                In VSCode können auch eigene Snippets erstellt werden. Dafür empfiehlt es sich die dafür angelegte
                Dokumentation zu lesen:
                <a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets">
                    https://code.visualstudio.com/docs/editor/userdefinedsnippets
                </a>
            </p>
        </chapter>
    </chapter>

    <chapter id="github-copilot" title="GitHub Copilot">

    </chapter>

    <chapter id="ide" title="IDE – Integrated Development Environment">
        <chapter id="ide-terminal" title="Terminal &amp; Tasks">
            <p>
                Softwareentwickler verwenden mehrere Tools, welche Aufgaben innerhalb und außerhalb des
                Softwareentwicklungskreislaufs (Bearbeiten, Kompilieren, Testen und Debuggen) automatisieren. Diese
                Tools werden meist von der Befehlszeile aus ausgeführt. In VSCode können Tasks konfiguriert werden,
                welche Skripte ausführen und Prozesse starten, sodass viele dieser vorhandenen Tools direkt von VSCode
                aus verwendet werden können, ohne eine eigene Befehlszeile zu verwenden. Die Tasks werden im
                Arbeitsbereich in der <code>tasks.json</code>-Datei im <code>.vscode</code>-Ordner gespeichert.
            </p>

            <warning>
                Tasks können nur in einem Arbeitsbereich konfiguriert werden.
            </warning>

            <chapter id="ide-terminal-tasks-erstellen" title="Task erstellen">
                <list type="decimal">
                    <li>
                        <code>CTRL</code>+<code>SHIFT</code>+<code>P</code> oder <code>F1</code> als Shortcut um die
                        Command Palette auszuführen
                    </li>
                    <li>
                        <code>"Task: Configure Task"</code> eingeben, um die <code>tasks.json</code>-Datei zu
                        erstellen/öffnen.
                    </li>
                    <li>
                        <code-block collapsed-title="tasks.json" collapsible="true" lang="json">
                            {
                                // See https://go.microsoft.com/fwlink/?LinkId=733558
                                // for the documentation about the tasks.json format
                                "version": "2.0.0",
                                "tasks": [
                                    {
                                        "label": "compileXSD",
                                        "type": "shell",
                                        "command": "powershell.exe S:\\projects\\gitlab\\m3\\scripts\\compile\\compile.ps1m3xsdrepo"
                                    }
                                ]
                            }
                        </code-block>
                    </li>
                </list>
            </chapter>

            <chapter id="ide-terminal-tasks-ausführen" title="Task ausführen">
                <list type="decimal">
                    <li>
                        <code>CTRL</code>+<code>SHIFT</code>+<code>P</code> oder <code>F1</code> als Shortcut um die
                        Command Palette auszuführen
                    </li>
                    <li>
                        <code>"Task: Run Task"</code> eingeben, um einen Task auszuführen.
                    </li>
                    <li>
                        Den Task auswählen, im Beispiel: <code>"compileXSD"</code>
                    </li>
                    <li>
                        Und schlussendlich mit <code>"Continue without scanning the task output"</code> bestätigen.
                    </li>
                </list>
            </chapter>

            <chapter id="ide-terminal-buildtools" title="Build Tools">
                <img alt="VSCode - Build Tools" src="poweruser-vscode-tasks-buildtools.png"/>

                <p>
                    VSCode erkennt Scripts von Build Tools wie <code>npm</code>, <code>typescript</code>,
                    <code>gulp</code>, <code>docker</code> ... und erstellt dafür automatisch eigene Tasks. Hierbei
                    erscheint ein eigenes Panel im Explorer für zum Beispiel NPM Scripts. Diese können auch von hier aus
                    gestartet werden.
                </p>
            </chapter>

            <chapter id="ide-terminal-terminal" title="Terminal">
                <img alt="VSCode - Terminal" src="poweruser-vscode-tasks-terminal.png"/>

                <p>
                    Arbeitet man mit mehreren Terminals, so hat man in VSCode einige Personalisierungsoptionen:
                </p>

                <list>
                    <li>
                        Es kann die <b>Farbe</b> eines Terminals geändert werden, um es schneller erkennen zu können
                        bzw. besser von den anderen unterscheiden zu können.
                    </li>
                    <li>
                        Es kann das <b>Icon</b> eines Terminals geändert werden, um es schneller erkennen zu können bzw.
                        besser von den anderen unterscheiden zu können.
                    </li>
                    <li>
                        <p>
                            <b>Split Terminal</b> – zwei Terminals können nebeneinander gestellt werden
                        </p>

                        <img alt="VSCode - Terminal: Split" src="poweruser-vscode-tasks-terminal-split.png"/>
                    </li>
                    <li>
                        Dem Terminal kann ein <b>Name</b> gegeben werden.
                    </li>
                </list>
            </chapter>
        </chapter>
    </chapter>

    <chapter id="git" title="Git &amp; GitLens">
        <p>
            Git ist ein Versionierungsverwaltungstool von Dateien. Git ist in VSCode direkt integriert.
        </p>

        <p>
            GitLens bietet für VSCode und Git noch erweiterte Funktionalitäten die sehr nützlich sind für die
            Zusammenarbeit in einem größeren Team. Mehr Informationen hier:
            <a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens">
                https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens
            </a>
        </p>

        <chapter id="github" title="GitHub">
        </chapter>
    </chapter>

    <chapter id="debugger" title="Debugger">
    </chapter>

    <chapter id="httpclient" title="HTTP Client">
    </chapter>

    <chapter id="quellen" title="Quellen">
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://fireship.io/courses/vscode-tricks/" ignore-vars="true">
                https://fireship.io/courses/vscode-tricks/
            </a>, 2023-05-21 08:00
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf" ignore-vars="true">
                https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf
            </a>, 2023-05-21 10:00
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://code.visualstudio.com/api/extension-guides/color-theme" ignore-vars="true">
                https://code.visualstudio.com/api/extension-guides/color-theme
            </a>, 2023-05-22 07:00
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://code.visualstudio.com/api/extension-guides/file-icon-theme" ignore-vars="true">
                https://code.visualstudio.com/api/extension-guides/file-icon-theme
            </a>, 2023-05-22 07:00
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://code.visualstudio.com/api/extension-guides/product-icon-theme" ignore-vars="true">
                https://code.visualstudio.com/api/extension-guides/product-icon-theme
            </a>, 2023-05-22 07:00
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://github.com/tonsky/FiraCode" ignore-vars="true">
                https://github.com/tonsky/FiraCode
            </a>, 2023-05-22 07:30
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://code.visualstudio.com/blogs/2021/09/29/bracket-pair-colorization" ignore-vars="true">
                https://code.visualstudio.com/blogs/2021/09/29/bracket-pair-colorization
            </a>, 2023-05-22 08:00
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://de.wikipedia.org/wiki/IntelliSense" ignore-vars="true">
                https://de.wikipedia.org/wiki/IntelliSense
            </a>, 2023-05-23 08:00
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://code.visualstudio.com/docs/editor/intellisense" ignore-vars="true">
                https://code.visualstudio.com/docs/editor/intellisense
            </a>, 2023-05-23 08:00
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://code.visualstudio.com/Docs/languages/html" ignore-vars="true">
                https://code.visualstudio.com/Docs/languages/html
            </a>, 2023-05-24 08:15
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://code.visualstudio.com/docs/editor/emmet" ignore-vars="true">
                https://code.visualstudio.com/docs/editor/emmet
            </a>, 2023-05-25 08:00
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://de.wikipedia.org/wiki/Emmet_(Software)" ignore-vars="true">
                https://de.wikipedia.org/wiki/Emmet_(Software)
            </a>, 2023-05-25 08:00
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets" ignore-vars="true">
                https://code.visualstudio.com/docs/editor/userdefinedsnippets
            </a>, 2023-05-25 08:30
        </tip>
    </chapter>
</topic>