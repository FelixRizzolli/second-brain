<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="swe-prozesse-wasserfallmodell"
       title="Wasserfallmodell"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">
    <show-structure depth="2" for="chapter,procedure"/>

    <chapter id="einleitung" title="Einleitung">
        <p>
            Das Wasserfallmodell war das erste veröffentlichte sequentielle Vorgehensmodell für Softwareentwicklung.
            Anfangs wurde direkt nach der Kenntnis eines Problems mit der Programmierung begonnen. Nun bemühte man sich
            dem Entwicklungsprozess eine Struktur zu geben. Klar definierte Entwicklungsphasen wurden nacheinander
            abgearbeitet und jeweils vollständig abgeschlossen, bevor ihre Dokumente bzw. Ergebnisse an die nächste
            Phase übergeben werden.
        </p>
        <p>
            Die Phasen des Wasserfallmodells sind:
        </p>

        <list>
            <li><b>Analyse</b>: Erhebung der Anforderungen</li>
            <li><b>Entwurf</b>: Festlegung der Architektur des Anwendungssystems</li>
            <li><b>Implementierung</b>: Technische Umsetzung in einer Programmiersprache</li>
            <li><b>Test</b>: Überprüfung der Lauffähigkeit des Anwendungssystems</li>
            <li><b>Betrieb und Wartung</b>: Inbetriebnahme der Software und laufende Wartung</li>
        </list>

        <note>
            Beim ursprünglichen Wasserfallmodell ist die Rückkehr zu einer früheren Phase nicht vorgesehen.
        </note>

        <p>
            Anforderungen lassen sich oft nicht abschließend formulieren, bevor Kunden die fertige Software gesehen
            haben - in vielen Fällen ist das nicht einmal ansatzweise möglich; Fehler, die beim Test hätten, bemerkt
            werden sollen, zeigen sich erst im Betrieb und so weiter.
        </p>

        <note>
            <p><b>Projektmanagement-Weisheit</b></p>
            <p>Was du in einer frühen Phase versäumst, holt dich später zehnfach wieder ein.</p>
        </note>

        <p>
            Das Strikte Nacheinander im Wasserfallmodell ist reine Theorie, das Modell wird in der beschriebenen Form
            nur selten in der Praxis angewendet. Der Nachfolger ist das
            <emphasis>Wasserfallmodell mit Rückkopplung</emphasis>
            .
        </p>

        <img alt="Wasserfallmodell" src="swe-prozesse-wasserfallmodell.jpg"/>
    </chapter>

    <chapter id="modell" title="Das Modell">
        <chapter id="modell-analyse" title="1. Analyse">
            <p>
                In der Analysephase werden die Anforderungen an das künftige Softwaresystem ermittelt und dabei folgende
                Fragen beantwortet:
            </p>

            <list>
                <li>Was sind die entscheidenden Anforderungen an die zu erstellende Software?</li>
                <li>Welches Problem soll mithilfe des Anwendungssystems gelöst bzw. unterstützt werden?</li>
                <li>Welche Wünsche haben die Kunden und Nutzer an das System?</li>
            </list>

            <p>
                Die Sorgfalt und Qualität dieses Arbeitsschrittes gilt als entscheidend. Fehler und Nachlässigkeit, die
                hier gemacht werden, können später nur schwer oder gar nicht mehr korrigiert werden. Die Kosten der
                Fehlerbehebung steigen exponentiell mit dem Fortschritt der Entwicklung an. Fehler, die erst im
                laufenden Betrieb festgestellt werden können fatale Kosten verursachen oder zum Scheitern des gesamten
                Projektes führen.
            </p>

            <warning>
                <p><b>Anforderungsanalyse</b></p>

                <p>
                    Die Anforderungsanalyse wird in der Regel in umfassender Zusammenarbeit mit dem Kunden bzw. den
                    späteren Nutzern der Software durchgeführt werden.
                </p>
            </warning>

            <p>Mehr dazu: <a href="swe-spp-analyse.topic">HIER</a></p>
        </chapter>

        <chapter id="modell-entwurf" title="2. Entwurf">
            <p>
                In der Entwurfsphase wird die grundlegende Architektur des Programmsystems bestimmt. Besteht eine
                Software aus mehreren Komponenten, werden deren Beziehungen untereinander festgelegt. Eine typische
                Aufgabe im Entwurf ist das grundsätzliche Klassendesign der Anwendung zu erarbeiten, sofern die
                objektorientierte Programmentwicklung verwendet wird. Dabei kann eine Beschreibungssprache wie
                <a href="swe-uml.topic"/> weiterhelfen.
            </p>

            <p>Mehr dazu: <a href="swe-spp-entwurf.topic">HIER</a></p>
        </chapter>

        <chapter id="modell-implementierung" title="3. Implementierung">
            <p>
                Das Ziel der Implementierung ist es, den Entwurf des Softwaresystems in ein lauffähiges Programm zu
                verwandeln. Eng verbunden mit dem Schreiben des Programmcodes sind bestimmte Arten von Softwaretests.
                Dazu gehören z.B. Modul-Tests oder Unit-Tests, welche die Funktionalität der erstellten Komponenten
                überprüft. Diese sind aber zu unterscheiden von Tests des Gesamtsystems oder umfassender Teilsysteme.
                Die Aufgaben der Implementierung sind:
            </p>

            <list>
                <li>
                    <b>Erstellung des User-Interfaces</b>, also den Teil der Software, welchen der Nutzer täglich sieht
                    und mit dem er tagtäglich in Berührung kommt. Die konkrete Umsetzung ist abhängig vom Typ der
                    Anwendung und von der gewählten Technologie. Bestehen bereits Prototypen aus der Entwurfsphase, so
                    können diese eine große Hilfe sein.
                </li>
                <li>
                    <b>Erarbeitung der Businesslogik</b>. Unter Businesslogik versteht man den inneren Ablauf der
                    Anwendung, welcher mithilfe von Algorithmen beschrieben wird.
                </li>
                <li>
                    <b>Umsetzung der Datenhaltung</b>. Diese beschäftigt sich mit folgenden Fragen: Wo werden die Daten
                    gespeichert? Wird ein eigener Datenbankserver eingesetzt? Können die Daten in der Cloud gespeichert
                    werden? Auf welche Weise erfolgt die Kommunikation mit dem Anwendungssystem?
                </li>
            </list>

            <note>
                In den Anfängen der Softwareentwicklung hat man lediglich von der Programmierung einer Anwendung
                gesprochen. Dabei wurde die gesamte Analyse- und Entwurfsphase vernachlässigt bzw. die Entwickler haben
                sie gewissermaßen nebenbei erledigt. Heute hingegen ist die Phase der Implementierung (Programmierung)
                lediglich ein Teilabschnitt der Softwareerstellung, der primär die technische Umsetzung des Programms
                umfasst.
            </note>

            <p>Mehr dazu: <a href="swe-spp-implementierung.topic">HIER</a></p>
        </chapter>

        <chapter id="modell-test" title="4. Test">
            <p>
                Nach Umsetzung der Systemanforderungen mithilfe der gewählten Programmiersprache liegt ein lauffähiges
                Programm vor. Ziel der Testphase ist eine Überprüfung des Systems als Ganzes. Die einzelnen Einheiten
                werden in das Gesamtsystem integriert und getestet.
            </p>

            <warning>
                Es darf nie ein unfertiges Programm mit bekannten Fehlern an den Kunden ausgeliefert werden und dabei
                darauf zu hoffen, dass die Fehler keiner entdeckt. Dies kann sich später rächen!
            </warning>

            <p>Mehr dazu: <a href="swe-spp-testen.topic">HIER</a></p>
        </chapter>

        <chapter id="modell-distribution" title="5. Betrieb und Wartung">
            <p>
                Je nach Komplexität, Umfang und Art des Anwendungssystems gestaltet sich der Prozess der
                <b>Inbetriebnahme</b> unterschiedlich aufwendig. So können klassische Client-Server-Applikationen
                durchaus Installations- und Konfigurationsarbeiten in beachtlichem Umfang erfordern. Andererseits kann
                dieser Schritt sich bei Web-Anwendungen auch lediglich auf die Installation auf einem Server
                beschränken, während es auf Clientseite genügt, dass ein Browser vorhanden ist.
            </p>
            <p>
                Welche Tätigkeiten zur <b>Wartungsphase</b> gehören, darüber kann man streiten. Nahezu unstrittig ist
                es, dass das Korrigieren von bisher unentdeckt gebliebenen Fehlern in dieser Phase erledigt werden muss.
                Dagegen ist es eine Frage der Definition und der vertraglichen Bestimmungen, inwieweit
                Programmanpassungen zur Wartungsphase gehören oder Änderungswünsche den gesamten Entwicklungszyklus
                erneut auslösen.
            </p>

            <p>Mehr dazu: <a href="swe-spp-distribution.topic">HIER</a></p>
        </chapter>
    </chapter>

    <chapter id="quellen" title="Quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836244763, "Handbuch für Softwareentwickler", Veikko Krypczyk &amp; Elena Bochkor, 2018
        </tip>
    </chapter>
</topic>