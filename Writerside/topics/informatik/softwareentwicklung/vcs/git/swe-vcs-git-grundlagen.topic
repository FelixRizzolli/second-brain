<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Grundlagen" id="swe-vcs-git-grundlagen">
    <show-structure for="chapter,procedure" depth="2"/>

    <chapter title="GIT konfigurieren" id="konfigurieren">
        <p>
            Git kann zwar auch lokal verwendet werden, doch es ist sinnvoll bereits ein Repository auf einem externen
            Git-Server zu erstellen, da die meisten Funktionen erst offensichtlich werden, wenn es zwei Repositorys gibt
            - ein lokales und ein externes.
        </p>

        <chapter title="Name und E-Mail-Adresse einstellen (git config)" id="konfigurieren-config">
            <code-block lang="bash">
                git config --global user.name "Felix Rizzolli"
            </code-block>
            <code-block lang="bash">
                git config --global user.email "felix.rizzolli@outlook.de"
            </code-block>

            <p>
                Mit dem Befehl <code>git config --global</code> werden Defaulteinstellungen für alle Git-Repositorys auf
                dem Rechner in die <path>.gitconfig</path>-Datei gespeichert. Diese befindet sich im Home-Verzeichnis.
                Die E-Mail-Adresse sollte mit der eigenen Adresse auf der jeweiligen Git-Plattform übereinstimmen. Diese
                Daten werden nämlich später zusammen mit jedem Commit gespeichert.
            </p>
        </chapter>

        <chapter title="Sprache" id="konfigurieren-sprache">
            <p>
                Es ist sinnvoll sich die Sprache von Git auf Englisch einzustellen, da es viel mehr englische Artikel,
                zu beispielsweise Fehlermeldungen, im Internet gibt als Deutsche und man so viel schneller fündig wird.
            </p>

            <code-block lang="bash">
                LANGUAGE=en git status
            </code-block>

            <code-block lang="bash">
                export LANGUAGE=en
            </code-block>
        </chapter>

        <chapter title="Dateien ausschließen (.gitignore)" id="konfigurieren-gitignore">
            <p>
                Die Dateien, die durch den Compiler erzeugt werden, die Backup-Dateien des jeweiligen Editors und auch
                Dateien mit vertraulichen Informationen (wie Passwörtern) sollten nicht in der Repository landen und auf
                einem Git-Server hochgeladen werden. In der Datei <path>.gitignore</path> können Dateien und Pfade
                definiert werden, die von Git ignoriert werden sollen.
            </p>

            <code-block lang="bash">
                # Java Dateien
                *.class
                *~
            </code-block>
        </chapter>
    </chapter>

    <chapter title="Repository herunterladen (git clone)" id="clone">

        <chapter title="Repository (Begriff) mit GitHub als Beispiel" id="clone-github">

            <chapter title="Mitarbeit ohne Zugriffsrechte" id="clone-github-ohnerechte">
            </chapter>

            <chapter title="Repository herunterladen" id="clone-github-herunterladen">
            </chapter>
        </chapter>
    </chapter>

    <chapter title="Lokales Repository erstellen (git init)" id="init">
    </chapter>

    <chapter title="Dateien hinzufügen (git add)" id="add">
    </chapter>

    <chapter title="Zwischenstand speichern (git commit)" id="commit">

        <chapter title="Sprache" id="commit-sprache">
        </chapter>

        <chapter title="Der Commit-Befehl" id="commit-befehl">

            <chapter title="Ohne Zwischenspeichern" id="commit-befehl-ohnezwischenspeicher">
            </chapter>
        </chapter>
    </chapter>

    <chapter title="Überblick (git status)" id="status">
    </chapter>

    <chapter title="Repository zum Remote Server übertragen (git push)" id="push">
    </chapter>

    <chapter title="Lokales Repository aktualisieren (git pull)" id="pull">
    </chapter>

    <chapter title="Dateien umbenennen, verschieben und löschen (git mv, git rm)" id="dateien">

        <chapter title="Das Kommando git mv" id="dateien-mv">
        </chapter>

        <chapter title="Das Kommando git rm" id="dateien-rm">
        </chapter>
    </chapter>

    <chapter title="Quellen" id="quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836271868, "Git - Projektverwaltung für Entwickler und DevOps-Teams", Bernd Öggl &amp; Michael Kofler, 2020
        </tip>
    </chapter>
</topic>