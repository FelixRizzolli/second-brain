<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="swe-vcs-git-grundlagen"
       title="Grundlagen"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">
    <show-structure depth="2" for="chapter,procedure"/>

    <chapter id="konfigurieren" title="GIT konfigurieren">
        <p>
            Git kann zwar auch lokal verwendet werden, doch es ist sinnvoll bereits ein Repository auf einem externen
            Git-Server zu erstellen, da die meisten Funktionen erst offensichtlich werden, wenn es zwei Repositorys gibt
            - ein lokales und ein externes.
        </p>

        <chapter id="konfigurieren-config" title="Name und E-Mail-Adresse einstellen (git config)">
            <code-block lang="bash">
                git config --global user.name "Felix Rizzolli"
            </code-block>
            <code-block lang="bash">
                git config --global user.email "felix.rizzolli@outlook.de"
            </code-block>

            <p>
                Mit dem Befehl <code>git config --global</code> werden Defaulteinstellungen für alle Git-Repositorys auf
                dem Rechner in die <path>.gitconfig</path>-Datei gespeichert. Diese befindet sich im Home-Verzeichnis.
                Die E-Mail-Adresse sollte mit der eigenen Adresse auf der jeweiligen Git-Plattform übereinstimmen. Diese
                Daten werden nämlich später zusammen mit jedem Commit gespeichert.
            </p>
        </chapter>

        <chapter id="konfigurieren-sprache" title="Sprache">
            <p>
                Es ist sinnvoll sich die Sprache von Git auf Englisch einzustellen, da es viel mehr englische Artikel,
                zu beispielsweise Fehlermeldungen, im Internet gibt als Deutsche und man so viel schneller fündig wird.
            </p>

            <code-block lang="bash">
                LANGUAGE=en git status
            </code-block>

            <code-block lang="bash">
                export LANGUAGE=en
            </code-block>
        </chapter>

        <chapter id="konfigurieren-gitignore" title="Dateien ausschließen (.gitignore)">
            <p>
                Die Dateien, die durch den Compiler erzeugt werden, die Backup-Dateien des jeweiligen Editors und auch
                Dateien mit vertraulichen Informationen (wie Passwörtern) sollten nicht in der Repository landen und auf
                einem Git-Server hochgeladen werden. In der Datei <path>.gitignore</path> können Dateien und Pfade
                definiert werden, die von Git ignoriert werden sollen.
            </p>

            <code-block lang="bash">
                # Java Dateien
                *.class
                *~
            </code-block>
        </chapter>
    </chapter>

    <chapter id="clone" title="Repository herunterladen (git clone)">
        <chapter id="clone-github" title="Repository (Begriff) mit GitHub als Beispiel">
            <p>
                Ein Repository (wörtlich: Depot, Lager) ist die Sammlung aller Dateien eines Projekts inklusive
                alter/geänderter Versionen. In GitHub können zusammen mit einem Repository auch weitere Daten verwaltet
                werden (Issues, Dokumentation im Wiki-Format...).
            </p>

            <list>
                <li>
                    Mit Public ist das Repository für jeden sichtbar. Jeder kann die Dateien lesen und mit dem Befehl
                    <code>git clone</code> herunterladen (aber nicht verändern).
                </li>
                <li>
                    Private kennzeichnet Repositorys auf die nur der Besitzer selbst und von jenem ausgewählte
                    Entwickler Zugriff haben.
                </li>
            </list>

            <warning>
                Auf einen öffentlichen Repository hat jeder Zugriff, so ist es kritisch, wenn dort vertrauliche Daten
                wie beispielsweise Passwörter landen.
            </warning>

            <p>
                Die Adresse des Repositorys ergibt sich aus https://github.com, dem Accountnamen und dem Projektnamen:
                https://github.com/&lt;accountname&gt;/&lt;reponame&gt;
            </p>

            <chapter id="clone-github-ohnerechte" title="Mitarbeit ohne Zugriffsrechte">
                <p>
                    Hat man keine Zugriffsrechte auf einem Projekt und möchte trotzdem einen Beitrag leisten, da man
                    eine innovative Idee hat oder die Lösung für ein Problem, so kann eine Kopie des fremden Projekts
                    auf dem eigenen Account erstellt werden. Diese Kopie wird Fork genannt. Auf dieser Kopie können nun
                    Änderungen durchgeführt werden. Diese Änderungen können dann dem externen Projekt in Form eines
                    sogenannten Pull-Requests angeboten werden (Auf GitLab wird das Merge-Request genannt).
                </p>
            </chapter>

            <chapter id="clone-github-herunterladen" title="Repository herunterladen">
                <p>
                    Um eine Kopie eines Repositorys von GitHub auf dem lokalen Rechner zu erstellen wird der Befehl
                    <code>git clone</code> verwendet. Dabei muss in der Konsole zuerst in das Projekt-Verzeichnis
                    gewechselt werden.
                </p>

                <code-block lang="bash">
                    cd mein-arbeitsverzeichnis
                </code-block>

                <code-block lang="bash">
                    git clone https://github.com/FelixRizzolli/felixrizzolli.github.io.git
                </code-block>

                <warning>
                    Es soll vermieden werden, ein Git-Repository in einem Verzeichnis zu speichern, welches mit einem
                    Cloudspeicher oder zwischen mehreren Rechnern synchronisiert wird. Synchronisations-Tools können Git
                    aus dem Gleichgewicht bringen.
                </warning>

                <note>
                    Bei der erstmaligen Ausführung von git clone auf ein privates Repository verlangt Git eine
                    Authentifizierung.
                </note>

                <note>
                    <p><b>Nicht <code>cd</code> vergessen!</b></p>

                    <p>
                        <code>git clone</code> erzeugt ein neues Verzeichnis. Alle weiteren <code>git</code>-Kommandos
                        sind in diesem Verzeichnis auszuführen. Wird der Wechsel mittels <code>cd</code> in das
                        jeweilige Verzeichnis vergessen, so beklagt sich git darüber, dass es im aktuellen Verzeichnis
                        kein Git-Repository erkannt wurde.
                    </p>
                </note>
            </chapter>
        </chapter>
    </chapter>

    <chapter id="init" title="Lokales Repository erstellen (git init)">
    </chapter>

    <chapter id="add" title="Dateien hinzufügen (git add)">
        <p>
            Im jeweiligen Projektverzeichnis kann mit jedem beliebigen Editor eine Datei hinzugefügt und bearbeitet
            werden. Diese Editoren benötigen keine Git-Funktionen. Für Git muss aber eine Datei explizit zum Repository
            hinzugefügt bzw. in der Folge explizit im aktuellen Zustand zur Aufnahme in den nächsten Commit markiert
            werden. Hierfür wird der Befehl <code>git add</code> verwendet.
        </p>

        <code-block lang="bash">
            git add README.md
        </code-block>
    </chapter>

    <chapter id="commit" title="Zwischenstand speichern (git commit)">
        <p>
            Ein Commit ist eine Art Snapshot der bei Bedarf später widerhergestellt werden kann.
        </p>

        <note>
            Mehrere kleine Commits sind besser als wenige große! Das gilt umso mehr, wenn an einem Projekt mehrere
            Entwickler mitarbeiten. Ein paar Commits pro Tag können bei Projekten, an denen aktiv gearbeitet wird
            sinnvoll sein; für Commits im Fünf-Minuten-Takt gilt dies aber nicht.
        </note>

        <chapter id="commit-sprache" title="Sprache">
            <warning>
                Der Befehl git commit führt den Commit nur im lokalen Repository durch. Für die Synchronisation mit
                externen Repositorys sind die Kommandos <code>git push</code> und <code>git pull</code> zuständig.
            </warning>
        </chapter>

        <chapter id="commit-befehl" title="Der Commit-Befehl">
            <p>
                Bei jedem Commit muss mit <code>-m 'message'</code> eine Nachricht angegeben werden, die ganz kurz alle
                Änderungen zusammenfasst. Die Commit-Message sollte kurz, aber aussagekräftig sein. Sie ist vor allem
                für andere Entwickler eine wertvolle Information und oft die Basis für eine gezielte Suche.
            </p>

            <note>
                Vor jedem Commit müssen alle neuen UND geänderten Dateien mit <code>git add</code> oder
                <code>git stage</code> hinzugefügt und gestaged werden.
            </note>

            <code-block lang="bash">
                git commit -m 'initial commit, hello world'
            </code-block>

            <chapter id="commit-befehl-ohnezwischenspeicher" title="Ohne Zwischenspeichern">
                <p>
                    Wird dem Commit-Befehl der zusätzliche Parameter <code>-a</code> mitgegeben, so kann auf
                    <code>git add</code> und <code>git stage</code> verzichtet werden. Dabei werden alle unter
                    Git-Kontrolle befindlichen Dateien die sich seit dem letzten Commit geändert haben automatisch
                    berücksichtigt. Für neu hinzugefügte Dateien wird aber immer noch git add benötigt.
                </p>

                <code-block lang="bash">
                    git commit -a -m 'implemented getPerimeter for Rectangle class'
                </code-block>
            </chapter>
        </chapter>
    </chapter>

    <chapter id="status" title="Überblick (git status)">
        <p>
            Um einen Überblick vom Zustand des Repositorys zu gewinne wird <code>git status</code> ausgeführt. Es zeigt
            welche Dateien unter der Kontrolle von Git stehen, welche seit dem letzten Commit geändert wurden etc.
        </p>

        <code-block lang="bash">
            git status
        </code-block>
    </chapter>

    <chapter id="push" title="Repository zum Remote Server übertragen (git push)">
        <p>
            Der Befehl <code>git push</code> überträgt Commits im lokalen Repository zu einem externen Repository. Damit
            <code>git push</code> funktioniert muss das Kommando "erraten" welcher Zweig de Repositorys verarbeitet
            werden soll und zu welchem externen Server die Daten übergeben werden sollen. Soweit diese Informationen
            nicht aus <path>.git/config</path> hervorgehen, müssen entsprechende Parameter an <code>git push</code>
            übergeben werden.
        </p>

        <code-block lang="bash">
            git push origin master
        </code-block>

        <warning>
            <p><b><code>git pull</code> vor <code>git push</code></b></p>

            <p>
                Es kann oftmals vorkommen, dass in der Zwischenzeit ein anderer Programmierer Änderungen am Code
                vorgenommen hat. Wenn <code>git push</code> diesen Fall erkennt, scheitert das Kommando. Best Practice
                ist jedes mal vor <code>git push</code> den Befehl <code>git pull</code> auszuführen.
            </p>
        </warning>
    </chapter>

    <chapter id="pull" title="Lokales Repository aktualisieren (git pull)">
        Mit dem Befehl <code>git pull</code> werden bekannte Änderungen im externen Repository auf den lokalen Rechner
        heruntergeladen. Bearbeiten zwei Entwickler eine Datei gleichzeitig, so kommt es beim Zusammenführen der
        Änderungen zu einem Konflikt und die Ausführung von <code>git pull</code> bricht ab. Dieser Konflikt muss
        manuell behoben werden.
    </chapter>

    <chapter id="dateien" title="Dateien umbenennen, verschieben und löschen (git mv, git rm)">
        <chapter id="dateien-mv" title="Das Kommando git mv">
            <p>
                Der Befehl <code>git mv</code> benennt eine bereits im Repository befindliche Datei um. Mit dem Kommando
                kann aber auch eine Datei in ein anderes Verzeichnis verschoben werden. Beim nächsten Commit wird dabei
                die Datei am neuen Ort gespeichert.
            </p>

            <code-block lang="bash">
                git mv &lt;oldfilename&gt; &lt;newfilename&gt;
            </code-block>

            <code-block lang="bash">
                git mv &lt;file&gt; &lt;into-another-directory&gt;/
            </code-block>
        </chapter>

        <chapter id="dateien-rm" title="Das Kommando git rm">
            <p>
                Mit dem Befehl <code>git rm</code> wird eine Datei sowohl aus dem Arbeitsverzeichnis als auch aus dem
                Repository gelöscht. Wenn die Datei seit dem letzten Commit verändert wurde, muss die Option
                <code>--force</code> hinzugefügt werden.
            </p>

            <code-block lang="bash">
                git rm
            </code-block>
        </chapter>
    </chapter>

    <chapter id="quellen" title="Quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836271868, "Git - Projektverwaltung für Entwickler und DevOps-Teams", Bernd Öggl &amp; Michael Kofler,
            2020
        </tip>
    </chapter>
</topic>