<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Submodule und Subtrees" id="swe-vcs-git-sub">
    <show-structure for="chapter,procedure" depth="2"/>

    <chapter title="Einleitung" id="einleitung">
        <p>
            Sowohl Submodules als auch Subtrees helfen bei der Integration fremder Git-Projekte ins eigene Projekt.
            Generell gibt es mehrere Möglichkeiten, fremden Code in das eigene Projekt einzubauen:
        </p>

        <list>
            <li>
                <b>Kopieren</b>: Der unkomplizierteste Weg ist es, den Quellcode, beziehungsweise die Teile des
                Quellcodes, die Sie benötigen, in ein Unterverzeichnis zu kopieren und ab dem Zeitpunkt im eigenen
                Repository zu verwalten. Der große Nachteil: Bugfixes, die in dem fremden Projekt durchgeführt werden,
                werden nicht automatisch auch im eigenen Projekt übernommen.
            </li>
            <li>
                <b>Externer Paketmanager</b>: Viele moderne Programmiersprachen verwenden heute ihren eigenen
                Paketmanager, um Bibliotheken in der korrekten Version für das Projekt zu verwalten. Bekannte Vertreter
                sind etwa npm für Node.js, cargo für Rust, gem für Ruby, pip für Python oder NuGet für C#.
            </li>
            <li>
                <b>Submodules oder Subtrees</b>: Mit diesen beiden Techniken kann der Quellcode des fremden Repositorys
                mit dem eigenen Repository in unterschiedlicher Weise verbunden werden.
            </li>
        </list>
    </chapter>

    <chapter title="Submodule" id="submodule">
        <p>
            Ein Submodule ist ein Git-Repository in einem Git-Repository. Mit dem Befehl <code>git submodule add</code>
            kann Repository als Submodul ins eigene Repository hinzugefügt werden. Dabei klont Git das vollständige
            Repository in den ausgewählten Unterordner. Die Änderung muss noch mittels <code>git add</code> in den Stash
            geladen und mittels Commit ins Repository aufgenommen werden, damit der Prozess abgeschlossen ist.
        </p>

        <code-block lang="bash">
            git submodule add https://github.com/&lt;user&gt;/&lt;submodule&gt; &lt;folder&gt;
        </code-block>
        <code-block lang="bash">
            git add .
        </code-block>
        <code-block lang="bash">
            git commit -m 'add submodule &lt;submodule&gt;'
        </code-block>

        <p>
            Wurde ein Submodul hinzugefügt, so wird eine neue Datei namens <path>.gitmodules</path> erstellt. Diese
            Datei unterliegt der Versionskontrolle. Sie wird zusammen mit dem Rest des Projekts gepusht und gepullt. So
            wissen auch andere Entwickler, die dieses Projekt klonen, wo die Submodule beziehen können. Hier ein
            Musterbeispiel:
        </p>

        <code-block>
            <![CDATA[
            [submodule "<submodule>"]
                path = <folder>
                url = https://github.com/<user>/<submodule>
            ]]>
        </code-block>

        <p>
            Obwohl das ein das Submodul im Arbeitsverzeichnis des eigenen Repositorys liegt, versteht es Git als ein
            Submodul und überwacht seinen Inhalt nicht, solange man sich nicht in diesem Verzeichnis befindet. Git sieht
            es viel mehr als einen besonderen Commit dieses Repositorys an. Wird im Original-Repository des Submodules
            ein Fehler behoben, also ein Commit gepusht, so referenziert das Submodul immer noch auf den alten Commit.
        </p>

        <chapter title="Submodule aktualisieren" id="submodule-aktualisieren">
            <p>
                Der Befehl <code>git pull</code> holt standardmäßig rekursiv die Änderungen der Submodule. Er
                aktualisiert jedoch nicht die Submodule. Um ein Submodul zu aktualisieren, muss in das jeweilige
                Verzeichnis gewechselt und dort der Befehl <code>git submodule update --init --recursive</code>
                ausgeführt werden.
            </p>

            <code-block lang="bash">
                git submodule update --init --recursive
            </code-block>
        </chapter>
        
        <chapter title="Repository mit Submodules klonen" id="submodule-klonen">
            <p>
                Möchte man eine Repository klonen die Submodules enthält, so muss der Parameter
                <code>--recurse-submodules</code> hinzugefügt werden, da sonst nur der leere Ordner für das Modul
                erstellt wird! Um die Module im Nachhinein zu laden, muss
                <code>git submodule update --init --recursive</code> im Verzeichnis des Submodules verwendet werden.
            </p>

            <code-block lang="bash">
                git submodule update --init --recursive
            </code-block>
        </chapter>
    </chapter>

    <chapter title="Subtrees" id="subtree">
        <p>
            Der administrative Aufwand hat vermutlich dazu geführt, dass sie Git-Entwickler eine weitere Variante
            entwickelt haben, Module in einem Git-Repository zu verwalten: Subtrees. Subtrees bieten eine etwas
            einfachere Möglichkeit im eigenen Git-Repositorys den Quellcode eines anderen Repositorys zu verwenden.
            Während bei Submodulen nur die Referenz auf den Commit im Modul vom Hauptprojekt verwaltet wird, wird bei
            Subtrees der ganze Quellcode des Moduls eingebunden. In der Standardvariante wird dabei auch die ganze
            Git-History mit importiert, was in den meisten Fällen nicht notwendig ist. Das Subtree-Kommando sieht dafür
            die Option <code>--squash</code> vor, die die Git-History in einen einzigen Commit verpackt.
        </p>

        <code-block lang="bash">
            git subtree add --prefix=&lt;folder&gt; https://github.com/&lt;user&gt;/&lt;subtree&gt;
        </code-block>
        <code-block lang="bash">
            git subtree add --prefix=&lt;folder&gt; --squash https://github.com/&lt;user&gt;/&lt;subtree&gt;
        </code-block>
    </chapter>

    <chapter title="Mehr zu Submodules und Subtrees" id="mehr">
        <a href="https://training.github.com/downloads/submodule-vs-subtree-cheat-sheet/">
            https://training.github.com/downloads/submodule-vs-subtree-cheat-sheet/
        </a>
    </chapter>

    <chapter title="Monorepos" id="monorepos">
        <p>
            Mono bezieht sich darauf, dass ein einziges Repository verwendet wird, um darin viele verschiedene Projekte
            zu verwalten.
        </p>

        <chapter title="Vorteile" id="monorepos-vorteile">
            <list>
                <li>
                    Wenn jeder Entwickler über seine Arbeitskopie Zugriff auf den Quellcode aller Projekte hat, ist es
                    einfacher, Doppelentwicklungen zu verhindern.
                </li>
                <li>
                    Außerdem lassen sich die Abhängigkeiten von Projekten untereinander bzw. zu Software von
                    Drittherstellern besser verwalten, wenn sich sämtliche Projekte in einem Repository befinden.
                </li>
                <li>
                    Außerdem lassen sich Arbeitsabläufe wie ein Refactoring über mehrere Projekte mit einem einzigen
                    Commit bewerkstelligen, was für eine aufgeräumte History sorgt.
                </li>
            </list>
        </chapter>

        <chapter title="Nachteile" id="monorepos-nachteile">
            <p>
                Derartige Datenmengen sind mit Git ohne weitere Anpassungen nicht mehr zu verwalten. Google und Facebook
                verwenden deswegen selbst entwickelte Erweiterungen zur Verwaltung dieser Repositorys. Beispielsweise
                arbeitet Microsoft an dem Projekt Virtual File System (VFS) for Git, das riesige Monorepos verwalten
                können soll; die Software läuft aber nur auf Windows und benötigt eine angepasste Git-Version. Einen
                echten Vorteil können Monorepos aber erst bieten, wenn es Werkzeuge gibt, die alle Abhängigkeiten
                zwischen den Projekten analysieren können und dann die notwendigen Tests, Builds und Releases starten.
            </p>
        </chapter>

        <chapter title="Googles Monorepository" id="monorepos-google">
            <p>
                Bei Monorepositorys handelt es sich um Repositorys die auch jene des Linux-Kernels (aktuell 4,1 GB) bei
                weitem überschreiten. Hier Google als Beispiel genannt:
            </p>
            <p>
                In einem Vortrag aus dem Jahr 2015 hat eine Managerin von Google ein paar Zahlen sowie auch Vor- und
                Nachteile ihres monolithischen Repositorys präsentiert. Im Januar 2015 hatte Google 1 Milliarde Dateien
                (davon 9 Millionen Dateien mit Quellcode - ausgeschlossen Dokumentationen, generierte Dateien,
                Konfigurationsdateien, gelöschte Dateien usw.) mit insgesamt 2 Milliarden Codezeilen in einer History
                von 35 Millionen Commits (durchschnittlich 45 Tausend pro Tag). Diese Repository benötigt 86 TB an
                Speicher. Mehr dazu: <a href="https://www.youtube.com/watch?v=W71BTkUbdqE">»hier«</a>.
            </p>
        </chapter>
    </chapter>

    <chapter title="Quellen" id="quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836271868, "Git - Projektverwaltung für Entwickler und DevOps-Teams", Bernd Öggl &amp; Michael Kofler, 2020
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://github.blog/2016-02-01-working-with-submodules/" ignore-vars="true">
                https://github.blog/2016-02-01-working-with-submodules/
            </a>, 2020-11-14 04:45
        </tip>
        <tip>
            <b>(VIDEO)</b>
            <a href="https://www.youtube.com/watch?v=8Z4Cmhji_FQ" ignore-vars="true">
                https://www.youtube.com/watch?v=8Z4Cmhji_FQ
            </a>, "Git Tutorial: All About Submodules", 2020-11-14 05:10
        </tip>
        <tip>
            <b>(VIDEO)</b>
            <a href="https://www.youtube.com/watch?v=8Z4Cmhji_FQ" ignore-vars="true">
                https://www.youtube.com/watch?v=8Z4Cmhji_FQ
            </a>, "Why Google Stores Billions of Lines of Code in a Single Repository", 2020-11-14 06:00
        </tip>
        <tip>
            <b>(VIDEO)</b>
            <a href="https://www.youtube.com/watch?v=8Z4Cmhji_FQ" ignore-vars="true">
                https://www.youtube.com/watch?v=8Z4Cmhji_FQ
            </a>, "How to git submodule tutorial", 2020-11-14 10:00
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://git-scm.com/docs/git-submodule" ignore-vars="true">
                https://git-scm.com/docs/git-submodule
            </a>, 2020-11-14 10:50
        </tip>
    </chapter>
</topic>