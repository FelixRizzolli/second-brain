<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Workflows" id="swe-vcs-git-workflows" help-id="vcs-git-workflows">
    <show-structure for="chapter,procedure" depth="2"/>
    
    <chapter title="Grundlegendes" id="grundlagen">
        <chapter title="Anweisungen für das Team" id="grundlagen-team">
            <p>
                Um alleine oder vor allem in einem Team, erfolgreich und produktiv mit Git zu arbeiten gibt es gewisse
                Abläufe: sog. Workflows. Welche dieser Abläufe für das eigene Team der richtige ist, hängt neben dem
                Produkt auch ein wenig vom persönlichen Geschmack ab.
            </p>
            <p>
                Es ist sinnvoll zum Projektstart mit dem Team gewisse Regeln für die Zusammenarbeit am Quellcode
                festzulegen. Die festgelegten Anweisungen müssen folglich in physischer oder digitaler Form für jedes
                Teammitglied in greifbarer nähe sein.
            </p>
            <p>
                Je nach Teamgröße kann es auch sinnvoll sein, einen Git-Tutor zu bestimmen, der als Ansprechpartner bei
                Problemen fungiert.
            </p>
        </chapter>

        <chapter title="Welcher Workflow ist der Richtige?" id="grundlagen-vergleich">
            <p>
                Für die Entscheidung welcher Workflow der Richtige ist, sind folgende Faktoren wichtig:
            </p>

            <list>
                <li>
                    <b>Erfahrung der Teammitglieder</b>: Haben alle Mitglieder im Team bereits eingehende Erfahrung mit
                    Git, so kann jeder Beliebige Workflow gewählt werden. Für Git-Einsteiger helfen grafische
                    Oberflächen wie GitHub oder GitLab sie bieten enorm. Außerdem kann die zusätzliche Dokumentation für
                    den Merge/Pull-Request-Workflow sehr hilfreich sein.
                </li>
                <li>
                    <b>Größe des Teams</b>: Trunk-based Development funktioniert vor allem mit kleineren Teams gut. Die
                    anderen Workflows sollten auch bei großen Teams gut funktionieren.
                </li>
                <li>
                    <b>Art der Software</b>: Wenn es bei Ihrem Projekt notwendig ist, mehrere stabile Versionen der
                    Software in Produktion zu betreiben, ist ein Workflow mit parallelen Branches eine gute Wahl. Trotz
                    der erhöhten Komplexität von GitFlow kann schnell zu einer Version gesprungen und dort Bugfixes
                    eingespielt werden. Gibt es immer nur eine Version in Produktion, wie die z. B. bei einer
                    Onlineplattform der Fall ist, kann ein agiler Arbeitsablauf wie das Trunk-based Development mehr
                    Spaß machen und zu höherer Produktivität führen.
                </li>
                <li>
                    <b>Verfügbarkeit von Infrastruktur</b>: Während manche Arbeitsabläufe ganz ohne zusätzliche Software
                    außer Git auskommen, ist es bei anderen notwendig, weitere Programme zu verwenden. Trunk-based
                    Development kann ohne CI-Pipeline nicht richtig funktionieren. Die Pipelines müssen einerseits
                    konfiguriert werden und andererseits auf einer Computer-Infrastruktur ausgeführt werden. Beim
                    Pull/Merge-Request-Workflow benötigt es eine Git-Plattform, die Kosten verursacht.
                </li>
            </list>
        </chapter>
    </chapter>

    <chapter title="Das Ein-Mann-Team und die Solo-Entwicklung" id="solo">

        <chapter title="Fazit" id="solo-fazit">
        </chapter>
    </chapter>

    <chapter title="Feature-Branches für Teams" id="featurebranching">

        <chapter title="Neues Feature, neuer Branch" id="featurebranching-neu">

            <chapter title="Code-Review" id="featurebranching-neu-codereview">
            </chapter>

            <chapter title="Merge" id="featurebranching-neu-merge">
            </chapter>

            <chapter title="Rebase" id="featurebranching-neu-rebase">
            </chapter>
        </chapter>

        <chapter title="best practice" id="featurebranching-bestpractice">
        </chapter>

        <chapter title="Fazit" id="featurebranching-fazit">
        </chapter>
    </chapter>

    <chapter title="Merge/Pull-Requests" id="mergepull">

        <chapter title="Das Feature-Branch-Modell der Remotes" id="mergepull-featurebranch">
        </chapter>

        <chapter title="Forks" id="mergepull-forks">
        </chapter>

        <chapter title="Fazit" id="mergepull-fazit">
        </chapter>
    </chapter>

    <chapter title="Gitflow (Long-Running Branches)" id="gitflow">

        <chapter title="Der Gitflow-Workflow" id="gitflow-workflow">

            <chapter title="Master, Develop, Feature" id="gitflow-workflow-branches">
            </chapter>

            <chapter title="Hot Bugfix" id="gitflow-workflow-hotfix">
            </chapter>

            <chapter title="Bugfix im Develop-Branch" id="gitflow-workflow-bugfix">
            </chapter>

            <chapter title="Release-Branches" id="gitflow-workflow-release">
            </chapter>
        </chapter>

        <chapter title="Fazit" id="gitflow-fazit">
        </chapter>
    </chapter>

    <chapter title="Trunk-based Development" id="tbd">

        <chapter title="Master-based Development" id="tbd-master">

            <chapter title="Grundregeln" id="tbd-master-grundregeln">
            </chapter>

            <chapter title="Konzept" id="tbd-master-konzept">
            </chapter>
        </chapter>

        <chapter title="Continuous Integration" id="tbd-ci">

            <chapter title="Release-ready" id="tbd-ci-release">
            </chapter>
        </chapter>

        <chapter title="Continuous Development" id="tbd-cd">

            <chapter title="Feature-Flags / Featured-Toggles" id="tbd-cd-featureflags">
            </chapter>
        </chapter>

        <chapter title="Achtung!" id="tbd-achtung">
        </chapter>

        <chapter title="Fazit" id="tbd-fazit">
        </chapter>
    </chapter>

    <chapter title="Quellen" id="quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836271868, "Git - Projektverwaltung für Entwickler und DevOps-Teams", Bernd Öggl &amp; Michael Kofler, 2020
        </tip>
    </chapter>
</topic>