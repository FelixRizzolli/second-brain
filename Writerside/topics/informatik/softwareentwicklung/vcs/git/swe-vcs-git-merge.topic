<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Merge" id="swe-vcs-git-merge">
    <show-structure for="chapter,procedure" depth="2"/>

    <chapter title="Einführung" id="einfuehrung">
        <p>
            Der Merge-Befehl wird verwendet, um Zweige zusammenzuführen. Oftmals findet Git selbständig Lösungen für das
            Zusammenführen der Dateien. Zum Beispiel, wenn die Änderungen in unterschiedlichen Teilen einer Codedatei,
            oder gar unterschiedlichen Dateien erfolgen. Bei komplizierteren Fällen wird die Entscheidung jedoch dem
            Entwickler überlassen.
        </p>
        <p>
            Durch wiederholte Merge-Vorgänge entsteht oft eine unübersichtliche Struktur im lokalen Repository, bei der
            sich ständig Zweige öffnen und wieder schließen. Durch das sogenannte
            <a href="swe-vcs-git-rebase.topic">Rebasing</a> kann die Commit-Abfolge (die History) aufgeräumt und
            gewissermaßen begradigt werden.
        </p>
    </chapter>

    <chapter title="Zweige/Branches zusammenführen" id="merge">
        <p>
            Um die in enthaltenen Änderungen des newfeature Zweiges in master zu integrieren und den Zweig aufzulösen
            wird zuerst in den master-Zweig gewechselt und dort der Befehl <code>git merge</code> verwendet.
        </p>

        <code-block lang="bash">
            git checkout master
        </code-block>
        <code-block lang="bash">
            git merge newfeature
        </code-block>
        
        <p>
            Was danach passiert hängt stark von den Begleitumständen ab.
        </p>
        <p>
            Egal, von welcher Seite der Merge-Prozess gestartet wurde: Das Endergebnis in Ihrem Projektverzeichnis ist
            in beiden Fällen dasselbe! Dennoch ist es keineswegs egal, von welcher Seite der Merge-Prozess ausgeführt
            wird!
        </p>
        
        <list>
            <li>
                Wird vom Master-Branch aus der Feature-Branch mit dem Master-Branch zusammenführen, ändert sich der
                Master-Branch. Der Feature-Zweig bleibt, wie er ist.
            </li>
            <li>
                Wird hingegen vom Feature-Branch aus der Master-Zweig zum Feature-Zweig gemerged, ändert sich der
                Feature-Zweig. In diesem Fall bleibt der Master-Zweig unverändert.
            </li>
        </list>
        
        <p>
            In jedem Fall können beide Zweige weitergenutzt werden. Der Merge-Prozess »schließt« keinen Zweig. Wenn ein
            Zweig nicht mehr benötigt wird, muss er explizit mit <code>git branch -d</code> gelöscht werden.
        </p>
        
        <table>
            <tr>
                <td>Gewöhnlicher Merge</td>
                <td>
                    Sofern im newfeature-Branch andere Codeteile verändert wurden als die auf dem master-Branch, kann
                    Git die Änderungen selbstständig verarbeiten. Die durchgeführten Änderungen werden im Rahmen eines
                    Commits gespeichert, wobei automatisch ein Editor erscheint, in dem eine vorgegebene Commit-Message
                    bei Bedarf angepasst werden kann.
                </td>
            </tr>
            <tr>
                <td>Fast-forward Merge</td>
                <td>
                    Ein Sonderfall ist ein Merge-Prozess, bei dem der Basiszweig, seit der Aufspaltung in zwei Zweige,
                    unverändert geblieben ist. In diesem Fall ist kein »echter« Merge erforderlich. Vielmehr reicht es
                    aus, den Zeiger des Basiszweigs auf den letzten Commit zu stellen.
                </td>
            </tr>
            <tr>
                <td>Merge Konflikt</td>
                <td>
                    Bei einem Merge-Konflikt ist Git nicht in der Lage, die in den Zweigen durchgeführten Änderungen
                    zusammenzuführen. Der häufigste Grund besteht darin, dass bestimmte Zeilen des Codes in beiden
                    Zweigen unterschiedlich verändert wurden – z. B. ursprünglich <code>maxvalue=20</code>, aber
                    <code>maxvalue=10</code> in Commit C und <code>maxvalue=30</code> in Commit E. Gits Automatismen
                    versagen aber auch bei binären Dateien
                </td>
            </tr>
        </table>
    </chapter>

    <chapter title="Fast-forward-Merge" id="fastforward">
        <p>
            Angenommen nach dem Commit B des master-Zweiges wurde ein neuer Zweig new_feature erstellt. Dort wurden die
            Commits C und D durchgeführt. Am ursprünglichen Zweig (hier master) mussten in der Zwischenzeit keine
            Änderungen durchgeführt werden.
        </p>
        
        <img src="swe-vcs-git-merge-fastforward.jpg" alt="Fast-forward-Merge"/>

        <p>
            Wenn nun in den Master-Zweig gewechselt und <code>git merge new_feature</code> ausgeführt wird, ist gar kein
            richtiger Merge-Prozess erforderlich. Es reicht aus, den Zeiger des Master-Zweigs auf Commit D zu versetzen
            (fast forward). HEAD zeigt automatisch auf das Ende des aktuellen Zweigs, hier also ebenfalls auf Commit D.
            Unverändert verweist auch new_feature auf diesen Commit. Weil bei der Veränderung des Zeigers master
            keinerlei Änderung an den Git-Objekten erforderlich ist, kommt es beim Merge-Prozess zu keinem eigenen
            Commit. Dementsprechend entfällt auch die Eingabe einer Commit-Message. Der offensichtliche Vorteil eines
            Fast-forward-Merge-Prozesses ist dessen Einfachheit und Geschwindigkeit. Der Nachteil: Es ist später nicht
            mehr nachvollziehbar, dass die Commits C und D als Teil des Zweigs new_feature entstanden sind. Wenn Sie
            diese Intransparenz stört, können Sie git merge mit der Option <code>--no-ff</code> ausführen.
        </p>
        <p>
            Selbstverständlich bleiben auch nach einem Fast-forward-Merge beide Zweige erhalten. In beiden Zweigen kann
            die Entwicklung fortgesetzt werden, z. B. durch die neuen Commits E in master und F in new_feature.
        </p>
    </chapter>

    <chapter title="Octopus-Merge" id="octopus">
        <p>
            Der <code>git merge</code> Befehl kann sogar mehrere Zweige als Parameter aufnehmen. Dabei wird der aktuelle
            Zweig mit allen übergebenen Zweigen zusammengeführt. Dieses Verfahren wird <b>Octopus-Merge</b> genannt. Der
            einzige Vorteil eines Octopus-Merges im Vergleich zu mehreren Einzel-Merge-Prozessen besteht darin, dass es
            – wenn alles gut geht – nur einen Merge-Commit gibt.
        </p>
        <p>
            Schon ein gewöhnlicher Merge-Prozess, der zwei Zweige zusammenführt, kann genug Probleme verursachen. Je
            mehr Zweige im Spiel sind, desto diffiziler wird die Behebung der anfallenden Konflikte oder Unklarheiten.
        </p>
        <p>
            Wenn man die Git-Repository des Linux-Kernels durchsucht so kann man etliche Octopus-Merges finden, wobei
            einer beachtliche 65 Zweige zusammenführt.
        </p>
    </chapter>

    <chapter title="Merge Konflikte lösen" id="konflikte">
        <chapter title="Weniger Konflikte durch häufige Merge-Prozesse" id="konflikte-vermeiden">
            <p>
                Beim Zusammenführen von Zweigen vergleicht Git immer nur den neusten Commit aus beiden Zweigen sowie die
                gemeinsame Basis (also den ersten Parent-Commit beider Zweige). Sollten aber Konflikte auftreten, so
                sind si umso leichter zu lösen, je weniger Dateien bzw. Stellen im Code betroffen sind und je jünger der
                Code ist.
            </p>
        </chapter>

        <chapter title="Kollisionen im Code" id="konflikte-codekollisionen">
            <p>
                Die häufigste Ursache von Merge-Konflikten sind in unterschiedlichen Branches oder von unterschiedlichen
                Entwicklern durchgeführte Änderungen desselben Codes.
            </p>

            <code-block>
                #ursprünglicher Code (master)
                maxvalue = 20

                #veränderter Code (branch1)
                maxvalue = 30

                #veränderter Code (branch2)
                maxvalue = 10
            </code-block>
            <code-block lang="bash">
                git checkout branch2
            </code-block>
            <code-block lang="bash">
                git merge branch1
            </code-block>
            <code-block>
                Auto-merging code.py
                CONFLICT (content): Merge conflict in code.py
                Automatic merge failed; fix conflicts and then commit the result.
            </code-block>

            <p>
                Das Zusammenführen scheitert, da es für Git keine Möglichkeit gibt, festzustellen, welche der beiden
                Änderungen besser bzw. "richtiger" ist. Die restlichen Dateien, bei denen es keine Probleme gegeben hat,
                hat Git in der Zwischenzeit bereits zusammengeführt. Die problematischen Dateien wurden zwar auch
                zusammengeführt enthalten aber spezielle Markierungen mit beiden Versionen des Codes.
            </p>

            <code-block>
                <![CDATA[
                <<<<<<< HEAD
                        maxvalue = 10
                =======
                maxvalue = 30
                >>>>>>> branch1
                ]]>
            </code-block>

            <p>
                Dabei ist die erste Variante (zwischen <code>&lt;&lt;&lt;</code> und <code>===</code>) der Codes des
                aktuellen Zweigs bzw. bei einem Merge-Konflikt bei Pull der Code des aktuellen Branches. Zwischen
                <code>===</code> und <code>&gt;&gt;&gt;</code> folgt der Code des fremden Branchs bzw. bei Pull der Code
                aus dem Remote Repository.
            </p>
            <p>
                Um den Merge-Konflikt zu lösen, muss sich für eine Variante entschieden, und die Konfliktmarkierungen
                gelöscht werden. Anschließend muss die Datei in den nächsten Commit aufgenommen und dieser durchgeführt
                werden. Damit ist der Merge-Prozess abgeschlossen.
            </p>

            <code-block lang="bash">
                git add code.py
            </code-block>
            <code-block lang="bash">
                git commit -m 'merge branch1 into branch2'
            </code-block>

            <p>
                In der Praxis sind bei größeren Merge-Prozessen oft mehrere Dateien und Codepassagen betroffen.
                Dementsprechend mühsam kann es sein, sämtliche Konflikte zu beheben.
            </p>
        </chapter>

        <chapter title="Merge-Tools" id="konflikte-tools">
            <p>
                Für Merge-Konflikte gibt es spezielle Tools, die die jeweiligen Textpassagen farblich Markieren und so
                beim Lösen des Konflikts helfen. Mit dem befehl <code>git mergetool</code> wird ein externes Programm
                gestartet, das zwei oder drei Codeversionen der Konfliktdatei nebeneinanderstellt. Manche Merge-Tools
                jedoch verzichten auf die Anzeige der Parent-Version. Das Ziel besteht darin, die lokale Version der
                Datei so zu ändern, dass dort die richtigen Änderungen stehen.
            </p>

            <code-block lang="bash">
                git mergetool --tool meld
            </code-block>
            <code-block>
                Merging: lib/printhelper.php
                Normal merge conflict for 'lib/printhelper.php':
                  {local}: modified file
                  {remote}: modified file
            </code-block>
            <code-block lang="bash">
                git commit
            </code-block>

            <p>
                Mit dem Befehl <code>git mergetool --tool-help</code> werde die Tools angezeigt, die infrage kommen und
                welche davon installiert sind.
            </p>
        </chapter>

        <chapter title="Konflikte bei binären Dateien" id="konfilikte-binaere-dateien">
            <p>
                Bei binären Dateien (Bilder, Word-Dokumente, PDF- und ZIP-Dateien etc.) kann Git nicht die Änderungen
                zwischen den zwei Versione der Datei erkennen. Wenn eine Binärdatei in zwei Zeigen einen
                unterschiedlichen Inhalt hat, hat Git keinerlei Anhatspunkt, welches die "bessere" Datei ist. In so
                einem Fall wird der Befehl <code>git checkout</code> verwendet, um explizit entweder die Version des
                aktuellen/eigenen Zweigs <code>--ours</code> oder die des anderen/fremden Zweigs <code>--theirs</code>
                zu verwenden.
            </p>

            <code-block lang="bash">
                git checkout --ours --image.png
            </code-block>
            <code-block lang="bash">
                git commit -a
            </code-block>

            <p> </p>

            <code-block lang="bash">
                git checkout --theirs --image.png
            </code-block>
            <code-block lang="bash">
                git commit -a
            </code-block>

            <p>
                Mit <code>git commit -a</code> wird der Commit abgeschlossen. Die Option <code>-a</code> ist
                erforderlich, damit die mit <code>git checkout</code> veränderte Datei berücksichtigt wird. (Alternativ
                kann vorher <code>git add &lt;file&gt;</code> ausgeführt werden.)
            </p>
            <p>
                Beim Rebasing haben die Parameter <code>--ours</code> und <code>--theirs</code> eine inversive
                Bedeutung! Das liegt daran, dass beim Rebasing die fremden Commits als Basis verwendet werden und die
                eigenen entsprechend angepasst werden. Der Merge-Prozess erfolgt daher in umgekehrter Richtung.
            </p>
        </chapter>

        <chapter title="Merge-Abbruch und Undo" id="konflikte-abbruch">
            <p>
                Mit dem Befehl <code>git merge --abort</code> lasst sich ein Merge-Prozess abbrechen. Das Projekt
                befindet sich dann im gleichen Zustand wie vor dem Merge. Es soll unbedingt vermieden werden einen
                Merge-Prozess mit Gewalt durchzuziehen. Es ist besser den Merge-Prozess abzubrechen und sich bei einem
                erfahrenen Git-Nutzer hilfe zu holen.
            </p>

            <code-block lang="bash">
                git merge --abort
            </code-block>

            <p>
                Ist es bereits zu spät, so kann man mittels <code>git reset --hard &lt;lasthash&gt;</code> zum letzten
                Commit vor dem Merge-Prozess zurückkehren.
            </p>

            <code-block lang="bash">
                git reset --hard HEAD~
            </code-block>
        </chapter>

        <chapter title="Whitespace-Probleme" id="konflikte-whitespace">
            <p>
                Standardmäßig berücksichtigt Git beim Vergleich von Codedateien auch den sogenannten Whitespace, also 
                Leer- und Tabulatorzeichen. Wenn sich zwei Entwickler nicht darüber einig sind, wie der Code am 
                schönsten eingerückt wird, kann es zu erheblichen Merge-Problemen führen. Hierfür gibt es zwei 
                Möglichkeiten:
            </p>
            
            <list>
                <li>
                    Klare Regeln festlegen: "Keiner ändert die Einrückung fremder Dateien!"
                </li>
                <li>
                    Das Kommando <code>git merge -X ignore-all-space</code> womit Leer- und Tabulatorzeichen ignoriert
                    werden.
                </li>
            </list>
        </chapter>

        <chapter title="Inhaltliche Merge-Konflikte" id="konflikte-inhalt">
            <p>
                Stellen Sie sich vor, Ben hat in der Datei B die Funktion <code>myfunc</code> programmiert und auch an
                ein paar Stellen aufgerufen. Er stellt fest, dass das Design der Funktion nicht optimal ist, verändert
                die Reihenfolge der ersten beiden Parameter und fügt einen optionalen dritten Parameter hinzu. Die
                Stellen im Code, wo er selbst <code>myfunc</code> aufruft, passt er entsprechend an. Mit einem raschen
                <code>grep</code> vergewissert es sich, dass bisher niemand sonst seine Funktion nutzt – es kann also
                nichts passieren. Commit, Pull/Push und Feierabend.
            </p>
            <p>
                Am selben Tag arbeitet auch Anna am Code. Nach einem Pull am Vormittag entdeckt sie <code>myfunc</code>
                und kann damit ihren Code in der Datei A stark vereinfachen. Ein Geschenkt des Himmels, denkt sie.
                (<code>myfunc</code> ist da noch im ursprünglichen Zustand.) Auch sie beendet den Tag zufrieden mit
                Commit, Pull und Push. Git sieht kein Problem. Ben hat nur Datei B verändert, Anna nur A, der Code lässt
                sich mühelos zusammenführen.
            </p>
            <p>
                Der nächste Tag beginnt für beide Teammitglieder frustrierend: Schon beim ersten Versuch, das Programm
                mit den nun für beide Seiten aktuellen Versionen der Dateien A und B auszuführen, treten Fehler auf.
            </p>
            <p>
                Im beschriebenen Szenario ist die Korrektur natürlich trivial. Viel schlimmer ist es, wenn der Fehler
                nicht so offensichtlich ist, nur bei einer seltenen Konstellation von Umständen auftritt und erst einen
                Monat später entdeckt wird. Oder wenn das Zusammenspiel von zwei augenscheinlich unabhängigen Änderungen
                im Code ein Sicherheitsproblem auslöst.
            </p>
            <p>
                Das Problem löst sich nur durch den konsequenten Einsatz von automatisierter (Unit-)Tests lösen. Git
                verwendet beim Merge-Prozess formale Regeln an, aber es "versteht" den Code nicht.
            </p>
        </chapter>

        <chapter title="MERGE-Dateien" id="konflikte-dateien">
            <p>
                Bei einem aufgrund eines Konflikts gescheiterten Merge-Prozess enthält das Verzeichnis <path>.git</path>
                eine ganze Reihe von Dateien mit Statusinformationen:
            </p>

            <list>
                <li>
                    <path>MERGE_HEAD</path> enthält den Hashcode des Zweigs, der zusammengeführt werden soll. Bei einem
                    Octopus-Merge enthält die Datei entsprechend die Hashcodes aller Zweige.
                </li>
                <li>
                    <path>MERGE_MODE</path> ist normalerweise leer. Nur wenn Sie <code>git merge --no-ff</code>
                    ausführen, enthält die Datei eine entsprechende Information.
                </li>
                <li>
                    <path>MERGE_MSG</path> enthält die vorgesehene Commit-Message. (Es gibt auch die Datei
                    <path>COMMIT_EDITMSG</path>. Sie enthält den Text der letzten Commit-Message und ist für den
                    Merge-Prozess nicht relevant.)
                </li>
                <li>
                    <path>ORIG_HEAD</path> enthält den Hashcodes des aktiven Zweigs.
                </li>
            </list>

            <p>
                Sobald Sie den Commit abschließen bzw. abbrechen, verschwinden die <path>MERGE</path>-Dateien wieder.
                (<path>ORIG_HEAD</path> bleibt erhalten.)
            </p>
        </chapter>
    </chapter>

    <chapter title="Merge für eine einzelne Datei" id="einzeldatei">
        <p>
            Ein gewöhnlicher Merge-Prozess betrifft immer alle Dateien der betreffenden Commits. Hin und wieder entsteht
            aber der Wunsch, nur eine einzige Datei zusammenzuführen. Dieser Prozess ist aber recht umständlich, wenn er
            korrekterweise mit <code>git merge-file</code> ausgeführt wird.
        </p>

        <chapter title="Der Befehl git merge-file" id="einzeldatei-befehl">
            <p>
                Zuerst muss die betroffene Datei aus dem anderen Zweig in das Projektverzeichnis kopieren. Zudem wird
                auch die Version des letzten Merge-Prozesses zwischen den beiden Zweigen benötigt.
            </p>

            <code-block lang="bash">
                git checkout master
            </code-block>
            <code-block lang="bash">
                mkdir tmp
            </code-block>
            <code-block lang="bash">
                git merge-base HEAD feature
            </code-block>
            <code-block lang="bash">
                git show 8ed6b95:file1 > tmp/file1-base
            </code-block>
            <code-block lang="bash">
                git show feature:file1 > tmp/file1-feature
            </code-block>
            <code-block lang="bash">
                git merge-file file1 tmp/file1-base tmp/file1-feature
            </code-block>
            <code-block lang="bash">
                rm -rf tmp
            </code-block>

            <p>
                In diesem Beispiel wird davon ausgegangen, dass der Zweig master aktiv ist. Es sollen die Änderungen der
                Datei <path>file1</path> aus dem Zweig feature zusammengeführt werden. git merge-base ermittelt den
                letzten gemeinsamen Commit zwischen dem aktuellen Zweig und feature. Die beiden Kommandos
                <code>git show</code> erzeugen Kopien der Basisversion und der Feature-Version von <path>file1</path>.
                Schließlich führt <code>git merge-file</code> die Änderungen zusammen. Dabei wird <path>file1</path>
                geändert.
            </p>
            <p>
                Werfen Sie einen Blick in diese Datei, bevor Sie die Änderungen mit <code>git commit -a</code> speichern!
            </p>
            <p>
                Wie bei <code>git merge</code> kann es auch bei <code>git file-merge</code> zu Konflikten kommen. Zur
                Not kann mit <code>git restore file1</code> der ursprüngliche Zustand von file1 wiederhergestellt
                werden.
            </p>
        </chapter>

        <chapter title="Die einfachere Alternative" id="einzeldatei-alternative">
        </chapter>
    </chapter>

    <chapter title="Commit der letzten gemeinsamen Basis" id="merge-base">
    </chapter>

    <chapter title="Quellen" id="quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836271868, "Git - Projektverwaltung für Entwickler und DevOps-Teams", Bernd Öggl &amp; Michael Kofler, 2020
        </tip>
    </chapter>
</topic>