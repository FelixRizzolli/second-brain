<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Repository" id="swe-vcs-git-repository">
    <show-structure for="chapter,procedure" depth="2"/>

    <chapter title="Repository in der Theorie" id="theorie">
        <p>
            Ein Repository ist die Sammlung (das Depot, das Archiv aller Dateien eines Projektes inklusive ihrer
            Geschichte. Das Repository ist vergleichbar mit einem Datenbanksystem, das sämtliche Zustände des Projekts
            von der ersten Datei bis zum aktuellen Zustand enthält, samt Informationen, wer wann welche Änderungen
            durchgeführt hat. Im Repository ist somit nachvollziehbar, in welchen Schritten jede Datei den gerade
            aktuellen Zustand erreicht hat. Diese Information wird <b>History</b> genannt.
        </p>
        <p>
            Innerhalb des Repositorys kann es beliebig viele Zweige (Branches) geben. Zweige helfen z.B. dabei, neue
            Features zu entwickeln, ohne an der Stabilität der Hauptversion zu rütteln. Zweige geben mehreren
            Entwicklern die Möglichkeit, unabhängig voneinander verschiedene Aufgaben zu erledigen. Jeder Zweig hat sein
            eigenes Set von Dateien bzw. von Dateiversionen.
        </p>
        <p>
            Eine besondere Rolle spielt der <b>Master</b>-Zwig. Beim Einrichten eines neuen Repositorys wird automatisch
            der (zu diesem Zeitpunkt einzige) Master-Zweig eingerichtet. Es gilt als Defaultzweig - und die meisten
            Git-Anwender belassen es dabei. Intern ist der Master-Zweig ein Zweig wie jeder andere.
        </p>
        <p>
            Ein Git-Repository besteht aus den Dateien im <b>Working Directory</b>, die den aktuellen Zustand des gerade
            aktiven Zweigs widerspiegeln, und der "Repository-Datenbank im Unterverzeichnis <path>.git</path>. Anstelle
            vom Working Directory" Sind auch der Begriff <b>Workspace</b> sowie die deutschen Bezeichnungen
            <b>Arbeitsverzeichnis</b> oder <b>Projektverzeichnis</b> üblich.
        </p>

        <chapter title="Origin" id="theorie-origin">
            <p>
                Das Repository <b>Origin</b> (wörtlich Ursprung) ist das Repository von dem das Projekt ursprünglich
                geklont wurde, bzw. das explizit als externes Default-Repository konfiguriert wurde. Push- und
                Pull-Operationen, bei denen nicht explizit ein anderes Remote Repository angegeben wurde, betreffen
                automatsch den Origin.
            </p>
        </chapter>

        <chapter title="Hooks" id="theorie-hooks">
            <p>
                Git kann beim Eintreten bestimmter Ereignisse automatisch ein Script ausführen. Die Konfiguration dieses
                Features erfolgt über Hooks. Mehr zu Hooks <a href="swe-vcs-git-hooks.topic">»hier«</a>
            </p>
        </chapter>

        <chapter title="Submodule" id="theorie-submodule">
            <p>
                Manche Projekte greifen auf Subprojekte (Bibliotheken, Datenbanktreiber etc.) zurück. Damit parallel zum
                Projekt auch am Code der Subprojekte Änderungen durchgeführt werden können, gleichzeitig aber das
                Projekt in seiner Gesamtheit in einem Verzeichnis belassen werden kann, gibt es in Git Submodule. Dieses
                Feature ermöglicht es, in Verzeichnissen eines Git-Repositorys unterzubringen. Trotzdem bleiben die
                Commits unabhängig voneinander.
            </p>

            <chapter title="Subtrees" id="theorie-submodule-subtrees">
                <p>
                    Subtrees sind eine Variante von Submodulen. Auch hier wird ein externes Repository in das eigene
                    integriert. Allerdings werden in diesem Fall ale Dateien in einer Git-Datenbank verwaltet. was den
                    Umgang etwas vereinfacht.
                </p>
            </chapter>
        </chapter>
    </chapter>

    <chapter title="Remote Repositorys" id="remote">
        <p>
            Git wurde, im Gegensatz zu vielen anderen Verwaltungsprogrammen, mit der Vision einer dezentralen
            Organisation konzipiert. Beispiel: Drei Entwickler konfigurieren jeweils, auf ihren eigenen Rechner, ihren
            eigenen Git-Server. Danach kann jeder, mit entsprechenden Zugriffsrechten, mit jedem Commits austauschen
            Zweige zusammenführen usw. Die meisten waren jedoch schon mit dem (wenn auch geringen) Aufwand überfordert,
            ihren jeweils eigenen Git-Server zu konfigurieren. Für das Arbeiten im Tea ist es praktischer, wenn es einen
            zentralen Server gibt, auf den alle Teammitglieder zugreifen können.
        </p>
        <p>
            Als eine der ersten Firmen hat <b>GitHub</b> das hier schlummernde Marktpotential erkannt, eine
            Weboberfläche zusammengestellt und entsprechende Dienste sowohl kostenlos als auch kommerziell angeboten.
        </p>

        <chapter title="Initialisierungsarbeiten" id="remote-init">
            <p>
                Ein klokales Repository mit einem entfernten verbinden:
            </p>
            
            <list>
                <li>
                    Wenn das Remote Repository bereits existiert, so kann es geklont werden. Dafür wird der Befehl
                    <code>git clone</code> verwendet.
                </li>
                <li>
                    <p>
                        Wurde das Projekt zuerst lokal gestartet und soll erst später in ein anfänglich leeres Remote
                        Repository übertragen werden sow werden folgende Schritte abgearbeitet:
                    </p>
                    
                    <list>
                        <li>
                            Ordner des Repositorys erstellen und in das jeweilige Verzeichnis wechseln:
                            <code>mkdir &lt;reponame&gt;</code> und <code>cd &lt;reponame&gt;</code>.
                        </li>
                        <li>
                            Repository mit git init initialisieren und dies speichern mit
                            <code>git commit -a -m 'initial commit'</code>.
                        </li>
                        <li>
                            Dem lokalen Repository das entfernte Repository mit dem Befehl
                            <code>git remote add origin git@github.com:&lt;account&gt;/&lt;reponame&gt;.git</code>
                            hinzufügen.
                        </li>
                        <li>
                            Mit dem Befehl <code>git push -u</code> das Repository zum Default-Repository ernennen.
                        </li>
                    </list>
                </li>
            </list>
        </chapter>

        <chapter title="Push und Pull" id="remote-pushpull">
            <p>
                Nachdem das Remote Repository geklont wurde, können die Entwickler mit dem Codieren beginnen. die
                Änderungen werden durch den Befehl <code>git add</code>. in den Stash geladen und mittels
                <code>git commit</code>, von dort aus, ins lokale Repository aufgenommen. Mit dem Befehl
                <code>git push</code> werden die durchgeführten Commits vom lokalen Repository aufs Remote Repository
                übertragen. Haben mehrere Entwickler in derselben Datei an derselben Codestelle Änderungen durchgeführt,
                so kann es zu Merge-Konflikten kommen. Es ist empfehlenswert, immer vor dem Befehl <code>git push</code>
                ein <code>git pull</code> auszuführen. Dabei werden die Änderungen vom Remote-Repository ins lokale
                Repository geladen und zusammengeführt.
            </p>

            <note>
                <p><b>Rebasing</b></p>

                <p>
                    Wenn mehrere Personen an gemeinsamen Zweigen arbeiten, kommt es bei <code>git pull</code> ständig zu
                    Merge-Prozessen. Das ist nicht nur lästig, sondern führt auch zu einer sehr unübersichtlichen
                    Commit-Abfolge. Abhilfe schafft <code>git pull --rebase</code>. Befor diese Option gewählt wird
                    sollte man sich mit dem Thema <a href="swe-vcs-git-rebase.topic">Rebasing</a> und dessen
                    Nebenwirkungen genauer auseinandersetzen.
                </p>
            </note>
        </chapter>

        <chapter title="Einen eigenen Git-Server konfigurieren" id="remote-konfigurieren">
            <p>
                Mit der folgenden Anleitung lasst sich ganz einfach ein eigener Git-Server konfigurieren:
                <a href="https://git-scm.com/book/en/v2/Git-on-the-Server-The-Protocols">
                    https://git-scm.com/book/en/v2/Git-on-the-Server-The-Protocols
                </a>. Das Ergebmis ist dann in gewissermaßen "GitHub selbstgebaut in zehn Minuten". Dabei fehlen aber
                sämtliche Zusatzfunktionen von der Weboberfläche über die Bug-Datenbank (Issues) bis hin zur
                Zwei-Faktor-Authentifizierung. Es gibt schon einen Grund, warum Microsoft 7,5 Milliarden US$ in die Hand
                genommen hat, um GitHub zu erwerben.
            </p>
        </chapter>
    </chapter>

    <chapter title="Fork" id="fork">
        <p>
            Um ein Open-Source-Projekt eines öffentlichen GitHub-Repositorys herunterzuladen, kann man den Befehl
            <code>git clone</code> ausführen. Ist man selbst kein Mitglied des Entwicklerteams, so können Änderungen mit
            <code>git push</code> nicht hochgeladen werden.
        </p>

        <chapter title="Forks erstellen" id="fork-erstellen">
            <p>
                Um die Zusammenarbeit in Open-Source-Projekten zu erleichtern und nicht jeden x-Beliebigen Entwicklern
                die Rechte zum Repository zu geben hat GitHub vor vielen Jahren das Erstellen von sog. Forks etabliert.
                Um an einem fremden Projekt mitzuarbeiten, gibt es auf der jeweiligen GitHub-Seite den Button
                <ui-path>Fork</ui-path>. Damit wird eine Kopie des fremden Repositorys auf dem eigenen GitHub-Account
                erstellt. Mit <code>git clone</code> kann nun der Fork ein lokales Repository auf dem Rechner erstellt
                werden. Wird der Befehl <code>git push</code> ausgeführt so wirken sich die Änderungen nur auf dem Fork
                aus.
            </p>
        </chapter>

        <chapter title="Der Pull-Request" id="fork-pull">
            <p>
                In der GitHub-Weboberfläche kann nun ein Pull-Request erstellt werden <ui-path>(Reiter) Pull requests →
                (Button) New pull request</ui-path>. Damit wird man auf die Seite des ursprünglichen Projekts
                umgeleitet. GitHub zeigt dabei eine Zusammenfassung der durchgeführten Änderungen an. In einem weiteren
                Schritt kann eine Nachricht an die Entwickler des externen Repositorys übermittelt werden. Üblicherweise
                handelt es sich dabei um Informationen was geändert wurde und eventuell auch warum.
            </p>
            <p>
                Nun entscheiden die oder der Besitzer des fremden Repositorys, ob er die Änderungen akzeptiert (Merge
                pull request), sie ablehnt oder auch Verbesserungsvorschläge bzw. weitere Änderungen einfordert
                (Comment).
            </p>
            <p>
                Pull-Requests bieten die einzige Möglichkeit, an GitHub-Projekten teilzunehmen, ohne Mitglied des
                jeweiligen Teams zu sein. Pull-Requests werden aber häufig auch projektintern verwendet, um allzu viele
                unkoordinierte Änderungen am Repository zu verhindern. Da Forks und Pull-Requests keine Git-Techniken
                sind, gibt es dafür auch keine <code>git</code>-Subkommandos. Zudem kann auch die Nomenklatur je nach
                Plattform variieren. In GitLab werden sie beispielsweise Merge-Requests genannt.
            </p>
        </chapter>
    </chapter>

    <chapter title="Quellen" id="quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836271868, "Git - Projektverwaltung für Entwickler und DevOps-Teams", Bernd Öggl &amp; Michael Kofler, 2020
        </tip>
    </chapter>
</topic>