<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Rebase" id="swe-vcs-git-rebase">
    <show-structure for="chapter,procedure" depth="2"/>

    <chapter title="Einführung" id="einfuehrung">
        <p>
            Der Befehl <code>git rebase</code> kann anstelle von <code>git merge</code> verwendet werden oder in der
            Form <code>git pull --rebase</code>. In diesem Fall wird anstelle des im Rahmen des Pull-Prozesses
            erforderlichen <code>git merge</code> eben ein <code>git rebase</code> ausgeführt.
        </p>

        <code-block lang="bash">
            git rebase &lt;other&gt;
        </code-block>
        <code-block lang="bash">
            git pull --rebase
        </code-block>

        <p>
            Mit <code>git rebase</code> darf nie der Verlauf von Commits in einem öffentlichen Zweig, wenn die Commits
            bereits hochgeladen wurden, verändert werden. Komplett tabu ist diesbezüglich der Master-Zweig.
        </p>
    </chapter>

    <chapter title="Beispiel" id="beispiel">
    </chapter>

    <chapter title="Konzept" id="konzept">
    </chapter>

    <chapter title="Merge-Konflikte beim Rebasing" id="konflikte">
    </chapter>

    <chapter title="Nebenwirkungen" id="nebenwirkungen">
    </chapter>

    <chapter title="Rebasing-Sonderfälle und Rebasing-Undo" id="sonderfaelle">
    </chapter>

    <chapter title="Squashing" id="squashing">

        <chapter title="Beispiel" id="squashing-beispiel">
        </chapter>
    </chapter>

    <chapter title="Quellen" id="quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836271868, "Git - Projektverwaltung für Entwickler und DevOps-Teams", Bernd Öggl &amp; Michael Kofler, 2020
        </tip>
    </chapter>
</topic>