<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="swe-vcs-git-rebase"
       title="Rebase"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">
    <show-structure depth="2" for="chapter,procedure"/>

    <chapter id="einfuehrung" title="Einführung">
        <p>
            Der Befehl <code>git rebase</code> kann anstelle von <code>git merge</code> verwendet werden oder in der
            Form <code>git pull --rebase</code>. In diesem Fall wird anstelle des im Rahmen des Pull-Prozesses
            erforderlichen <code>git merge</code> eben ein <code>git rebase</code> ausgeführt.
        </p>

        <code-block lang="bash">
            git rebase &lt;other&gt;
        </code-block>
        <code-block lang="bash">
            git pull --rebase
        </code-block>

        <warning>
            Mit <code>git rebase</code> darf nie der Verlauf von Commits in einem öffentlichen Zweig, wenn die Commits
            bereits hochgeladen wurden, verändert werden. Komplett tabu ist diesbezüglich der Master-Zweig.
        </warning>
    </chapter>

    <chapter id="beispiel" title="Beispiel">
        <p>
            Es gibt zwei Zeige. Einen develop-Zweig und einen feature-Zweig. Auf dem Feature-Zweig werden zwei Commits,
            F1 und F2, gepostet. Auf dem develop-Zweig in der Zwischenzeit D1 und D2. Das neue Feature soll in ferner
            Zukunft in den Zweig develop übernommen werden. Noch ist es noch nicht fertig, aber um möglichst nahe am
            develop-Zweig zu bleiben und somit zukünftigen Merge-Problemen aus dem Weg zu gehen, soll die zuletzt in
            develop durchgeführten Änderungen in den feature-Zweig übernommen werden. Dazu gibt es zwei Möglichkeiten:
        </p>

        <table>
            <tr>
                <td>Merge</td>
                <td>Rebase</td>
            </tr>
            <tr>
                <td>
                    <code-block lang="bash">
                        git checkout feature
                    </code-block>
                    <code-block lang="bash">
                        git merge develop
                    </code-block>
                </td>
                <td>
                    <code-block lang="bash">
                        git checkout feature
                    </code-block>
                    <code-block lang="bash">
                        git rebase develop
                    </code-block>
                </td>
            </tr>
            <tr>
                <td>
                    Die Commits D1 und D2 werden mit dem feature-Zweig zusammengeführt. Der develop-Branch bleibt
                    unverändert und der feature-Zweig wird um einen Commit-Merge erweitert.
                </td>
                <td>
                    Hierbei wird so getan als hätte es die Commits D1 und D2 schon vorher im feature-Zweig gegeben. Git
                    ändert (rebases) dazu die Commits F1 und F2 und passt sie so an, als wären die Änderungen nach D2
                    durchgeführt worden.
                </td>
            </tr>
            <tr>
                <td>(BILD Mitte)</td>
                <td>(BILD Rechts)</td>
            </tr>
        </table>

        <img alt="git rebase" src="swe-vcs-git-rebase.jpg"/>
    </chapter>

    <chapter id="konzept" title="Konzept">
        <p>
            Beim Rebasing werden auf der Basis vorhanener Commits neue Commits (mit neuen Hashcodes) erzeugt und die
            Referenzen zu den alten gelöscht. Diese werden dann mit der Zeit vom
            <emphasis>Garbage Collector</emphasis>
            entfernt.
        </p>

        <chapter id="beipsiel" title="Zurück zum Beispiel">
            <p>
                git übernimmt die Commits D1 und D2 und tut so, als wären diese Teile des Feature-Zweigs. Das ist
                technisch kein Problem, an den Commits ändert sich ja nichts. Im Feature-Zweig werden F1 und F2 nun
                zuerst gleichsam rückabgewickelt. Anschließend werden zwei neue Commits F1' und F2' erstellt, die die
                ursprünglichen Änderungen von F1 und F2 neu verpacken – aber so, als wären die Änderungen auf der Basis
                von Commit D2 zustande gekommen. F1' und F2' sind also <b>vollkommen neue Commits</b>. Zwar werden die
                Metadaten – also die Commit-Message, der Zeitpunkt und der Autor – von den ursprünglichen Commits
                übernommen, aber der Zustand der Dateien ist ein anderer – und der Hashcode natürlich auch! Der Vorteil
                der Rebasing-Vorgehensweise besteht darin, dass kein Merge-Commit erforderlich ist. Ein
                Fast-forward-Merge ohne eigenen Commit reicht aus.
            </p>
        </chapter>
    </chapter>

    <chapter id="konflikte" title="Merge-Konflikte beim Rebasing">
        <p>
            Falls Git bei den Umbauarbeiten Konflikte bemerkt, müssen diese manuell behoben, in einem Commit gespeichert
            und den Rebasing-Vorgang dann mit <code>git rebase --continue</code> fortgesetzt werden.
        </p>

        <warning>
            Die Checkout-Optionen <code>--ours</code> und <code>--theirs</code> haben eine umgekehrte Wirkung wie bei
            einem gewöhnlichen Merge-Prozess! Im Beispiel würde <code>--ours</code> den Zweig develop und
            <code>--theirs</code> den eigenen Zweig feature bezeichnen.
        </warning>
    </chapter>

    <chapter id="nebenwirkungen" title="Nebenwirkungen">
        <p>
            Das Ergebnis von <code>git log --graph</code> sieht nach einem Rebasing natürlich wesentlich aufgeräumter
            aus. Es gibt aber auch zwei Nebenwirkungen:
        </p>

        <list>
            <li>
                Die Commits F1' und F2' hat es in dieser Form nie gegeben. Der Befehl git rebase hat künstliche Commits
                erzeugt, die Daten aus diversen Commits kombiniert. Es könnte sein, dass es im Commit F1' zu einem Bug
                kommt, den es in F1 noch nicht gegeben hat.
            </li>
            <li>
                Zusammen mit jedem Commit werden zwei Zeitangaben gespeichert, das
                <emphasis>Author Date</emphasis>
                und
                das
                <emphasis>Commit Date</emphasis>
                . Normalerweise stimmen beide Zeitangaben überein. Beim Rebasing
                wird das Commit Date des neu erzeugten Commits mit dem gerade aktuellen Datum aktualisiert. Das Author
                Date bleibt dagegen unverändert.
            </li>
        </list>
    </chapter>

    <chapter id="sonderfaelle" title="Rebasing-Sonderfälle und Rebasing-Undo">
        <p>
            Wird dem Befehl git rebase die Option -i angehängt, so gelangt man in einen Editor, der die durchzuführenden
            Aktionen zusammenfasst. Hier können nun die Kommandos geändert und so beispielsweise neue Commits festgelegt
            (edit) oder zwei alte Commits zu einem neuen zusammengefasst (squash) werden.
        </p>

        <code-block lang="bash">
            git rebase -i &lt;other&gt;
        </code-block>

        <p>
            Mehr dazu:
        </p>

        <list>
            <li>
                <a href="https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History">
                    https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History
                </a>
            </li>
            <li>
                <a href="https://thoughtbot.com/blog/git-interactive-rebase-squash-amend-rewriting-history">
                    https://thoughtbot.com/blog/git-interactive-rebase-squash-amend-rewriting-history
                </a>
            </li>
        </list>

        <p>
            Mit <code>git rebase &lt;hash&gt;</code> kann das Rebasing an einem bestimmten Punkt gestartet werden. Der
            Hashcode muss dabei auf den Commit vor dem ersten Commit verweisen, wo der Rebasing-Prozess beginnen soll.
            Dies soll aber nicht auf Commits angewendet werden, die bereits hochgeladen wurden.
        </p>
        <p>
            Der Befehl <code>git rebase --onto &lt;newbase&gt; &lt;other&gt;</code> transferiert den Zweig other an
            einen neuen Ort abseits vom Hauptzweig.
        </p>
        <p>
            Soll ein Rebasing-Vorgang rückgängig gemacht werden, so kann der Befehl
            <code>git reset --hard &lt;hash&gt;</code> ausgeführt werden. Hierbei soll der Hashcode des letzten
            Original-Commits verwendet werden. (Im vorigen Beispiel wäre das der Hashcode von F2.) Der Hashcode kann mit
            <code>git reflog</code> ermittelt werden.
        </p>
    </chapter>

    <chapter id="squashing" title="Squashing">
        <p>
            Mit dem Befehl <code>git merge --squash &lt;other&gt;</code> und folglich git commit kann der Zweig other zu
            einem großen Commit zusammengefasst werden. Dieser Commit gilt als »gewöhnlicher« Commit. Als einziger
            Parent gilt der vorige Commit des aktiven Zweigs. Anders als bei einem Merge-Commit fehlt aber ein
            Parent-Verweis auf den anderen Zweig. Es kommt aber zu keinem Rebasing, das heißt, die ursprünglichen
            Commits von <code>&lt;other&gt;</code> bleiben, wie sie sind. Mit dieser Methode ist, bekommt man eine
            sauberere History.
        </p>

        <chapter id="squashing-beispiel" title="Beispiel">
            <img alt="Beispiel: Squashing" src="swe-vcs-git-rebase-squashing.jpg"/>

            <p>
                Der Nachteil des Squashings besteht darin, dass in der History des Hauptzweigs die Commit-Details des
                Bugfix verloren gehen. In der Commit-Abfolge ist nicht erkenntlich, dass überhaupt ein Merge-Prozess
                stattgefunden hat.
            </p>
        </chapter>
    </chapter>

    <chapter id="quellen" title="Quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836271868, "Git - Projektverwaltung für Entwickler und DevOps-Teams", Bernd Öggl &amp; Michael Kofler,
            2020
        </tip>
    </chapter>
</topic>