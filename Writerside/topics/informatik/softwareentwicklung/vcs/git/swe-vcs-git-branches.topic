<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Branches" id="swe-vcs-git-branches">
    <show-structure for="chapter,procedure" depth="2"/>

    <chapter title="Grundlegendes" id="grundlagen">
        <p>
            Repository-Zweige kommen ins spiel, wenn an mehreren Versionen gleichzeitig gearbeitet werden soll.
        </p>

        <chapter title="Der Vorteil von mehreren Zweigen (Beispiel)" id="grundlagen-vorteile">
            <p>
                Stellen Sie sich vor, das bis hierher entwickelte Programm läuft nun stabil und geht in den
                Produktionseinsatz. Jetzt wollen Sie das Programm weiterentwickeln, ohne die Stabilität der
                Produktivversion zu gefährden. Dazu trennen sie den Code in zwei Zweige auf:
            </p>

            <list>
                <li>
                    Im produktiven Zweig führen Sie nur winzige Bugfixes durch, sollte sich dazu die Notwendigkeit
                    ergeben.
                </li>
                <li>
                    Der Entwickler- oder Feature-Zweig ist dagegen für die Weiterentwicklung. Erst wenn sich die neue
                    Version nach vielen Tests stabilisiert, wollen Sie sie mit der Hauptversion wieder zusammenführen
                    und an ihre Kunden ausliefern (z.B. in Form eines Webservices).
                </li>
            </list>
        </chapter>

        <chapter title="Arbeiten mit Zweigen (Workflows)" id="grundlagen-workflows">
            <list>
                <li>
                    <a href="swe-vcs-git-workflows.topic#solo">
                        Solo-Entwicklung
                    </a>
                </li>
                <li>
                    <a href="swe-vcs-git-workflows.topic#featurebranching">
                        Feature-Branches für Teams
                    </a>
                </li>
                <li>
                    <a href="swe-vcs-git-workflows.topic#mergepull">
                        Merge/Pull-Requests
                    </a>
                </li>
                <li>
                    <a href="swe-vcs-git-workflows.topic#gitflow">
                        Gitflow (Long-Running Branches)
                    </a>
                </li>
                <li>
                    <a href="swe-vcs-git-workflows.topic#tbd">
                        Trunk-based Development
                    </a>
                </li>
                <li>
                    <a href="swe-vcs-git-workflows.topic#grundlagen-vergleich">
                        Welcher Workflow ist der Richtige?
                    </a>
                </li>
            </list>
        </chapter>
    </chapter>

    <chapter title="Zweig/Branch wechseln und erstellen (git checkout)" id="ckeckout">
        <chapter title="Einen neuen Branch erstellen" id="ckeckout-neu">
            <p>
                Ein neuer Branch wird mit dem Befehl <code>git branch</code> erstellt.
            </p>

            <code-block lang="bash">
                git branch newfeature
            </code-block>
        </chapter>

        <chapter title="Branch wechseln" id="ckeckout-wechseln">
            <p>
                Mit dem Befehl <code>git checkout &lt;name&gt;</code> in einen Zweig. Die benutzerfreundlichere und
                neuere Alternative ist git switch, was im Grunde genommen dasselbe bewirkt.
            </p>

            <code-block lang="bash">
                git checkout newfeature
            </code-block>
            <code-block lang="bash">
                git switch newfeature
            </code-block>

            <p>
                Beim Checkout werden alle unter Git-Kontrolle stehenden Dateien ausgetauscht und durch die Versionen
                ersetzt, die beim letzten Commit im jeweiligen Zweig gültig waren. Nicht unter Versionskontrolle
                stehende Dateien rührt git checkout nicht an.
            </p>
        </chapter>

        <chapter title="Branch erstellen und wechseln in einem Schritt" id="ckeckout-beides">
            <p>
                Um einen neuen Branch zu erzeugen und zeitgleich zu aktivieren, wird die Option <code>-b</code> dem
                Befehl angehängt.
            </p>

            <code-block lang="bash">
                git checkout -b newfeature
            </code-block>

            <p>
                Sollte es zu diesem Zeitpunkt bereits Änderungen ohne Commit geben, dann werden diese Änderungen
                automatisch in den neuen Zweig übernommen.
            </p>
        </chapter>
    </chapter>

    <chapter title="Einzelne Commits importieren (git cherry-pick)" id="cherrypick">
        <chapter title="Beispiel" id="cherrypick-beispiel">
            <p>
                Das letzte Release v1.0 im master-Branch ist Fehlerhaft und es wird bereits an einem neuen Feature im
                develop-Branch gearbeitet. Um das neue Feature fertig zu stellen ist noch viel Arbeit geplant und der
                Fehler ist gravierend, sodass nicht auf das nächste Feature-Update gewartet werden kann. Es werden
                folgende Steps durchgeführt:
            </p>

            <list>
                <li>wechsel in den master-Branch,</li>
                <li>korrigieren des Bugs, commiten des Bugfixes,</li>
                <li>v1.0.1 veröffentlichen,</li>
                <li>wechsel in den develop-Branch.</li>
            </list>
        </chapter>

        <chapter title="Commit importieren" id="cherrypick-importieren">
            <img src="swe-vcs-git-branches-cherrypick.jpg" alt="git cherry-pick"/>

            <p>
                Betrifft der Bug auch den new_feature-Branch so muss dieser hier ebenfalls sofort behoben werden. Mit
                dem Befehl <code>git cherry-pick</code>, und den als Parameter angegebenen Hascode des jeweiligen
                Commits, wird der Commit auch in den new_feature-Branch aufgenommen. Wird dies vergessen so tritt der
                Fehler im new_feature-Branch weiterhin auf aber beim Zusammenführen des new_feature-Branches und dem
                master-Branch durch merge bleibt der Bugfix aktiv.
            </p>

            <code-block lang="bash">
                git cherry-pick ad43e20
            </code-block>
        </chapter>
    </chapter>

    <chapter title="Branches in der Git-Datenbank" id="gitdatenbank">
        <p>
            Zweige in Git sind einfach nur Zeiger (Pointer) auf einen Commit. Wird ein neuer Zweig erstellt, so
            landet in <path>.git/refs/heads</path> eine neue Datei, deren Namen dem Branch-Namen entspricht. Die
            Textdatei (41 Byte) enthält nur den Hashcode des letzten Commits des Zweigs.
        </p>
        <p>
            Bei einem Checkout wird einfach der letzte Commit des jeweiligen Branches in das Arbeitsverzeichnis
            kopiert. Außerdem ändert sich beim Checkout die winzige Datei <path>.git/HEAD</path>: Sie enthält nun
            statt anfänglich <path>refs/heads/master</path> die Bezeichnung des gerade gültigen Zweigs, also z.B.
            <path>refs/heads/new_feature</path>.
        </p>
    </chapter>

    <chapter title="Branches visualisieren" id="visualisieren">
        <p>
            Git fehlen Tools ein Projekt mit vielen Branches, die parallel laufen (auch <b>Lanes</b> genannt) zu
            visualisieren. Dazu gibt es kommerzielle Zusatztools wie:
        </p>
        
        <list>
            <li>Git Flow Chart <a href="https://gfc.io">https://gfc.io</a></li>
            <li>Git Kraken <a href="https://www.gitkraken.com/git-client">https://www.gitkraken.com/git-client</a></li>
        </list>

        <p>
            Mit dem Befehl <code>git branch</code> werden alle Branches ausgegeben, wobei der aktuell aktive Zweig
            markiert wird. Mit den zusätzlichen Optionen <code>--merged</code> bzw. <code>--no-merged</code> wird die
            Ausgabe auf jene Branches reduziert, deren letzter Commit mit dem gerade aktuellen Zweig bereits
            zusammengeführt wurde bzw. eben noch nicht zusammengeführt wurde.
        </p>

        <code-block lang="bash">
            git branch
        </code-block>
        <code-block lang="bash">
            git branch --merged
        </code-block>
        <code-block lang="bash">
            git branch --no-merged
        </code-block>
    </chapter>

    <chapter title="Quellen" id="quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836271868, "Git - Projektverwaltung für Entwickler und DevOps-Teams", Bernd Öggl &amp; Michael Kofler, 2020
        </tip>
    </chapter>
</topic>