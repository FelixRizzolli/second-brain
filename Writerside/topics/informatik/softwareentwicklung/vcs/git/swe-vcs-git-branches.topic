<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Branches" id="swe-vcs-git-branches">
    <show-structure for="chapter,procedure" depth="2"/>

    <chapter title="Grundlegendes" id="grundlagen">
        <p>
            Repository-Zweige kommen ins spiel, wenn an mehreren Versionen gleichzeitig gearbeitet werden soll.
        </p>

        <chapter title="Der Vorteil von mehreren Zweigen (Beispiel)" id="grundlagen-vorteile">
            <p>
                Stellen Sie sich vor, das bis hierher entwickelte Programm läuft nun stabil und geht in den
                Produktionseinsatz. Jetzt wollen Sie das Programm weiterentwickeln, ohne die Stabilität der
                Produktivversion zu gefährden. Dazu trennen sie den Code in zwei Zweige auf:
            </p>

            <list>
                <li>
                    Im produktiven Zweig führen Sie nur winzige Bugfixes durch, sollte sich dazu die Notwendigkeit
                    ergeben.
                </li>
                <li>
                    Der Entwickler- oder Feature-Zweig ist dagegen für die Weiterentwicklung. Erst wenn sich die neue
                    Version nach vielen Tests stabilisiert, wollen Sie sie mit der Hauptversion wieder zusammenführen
                    und an ihre Kunden ausliefern (z.B. in Form eines Webservices).
                </li>
            </list>
        </chapter>

        <chapter title="Arbeiten mit Zweigen (Workflows)" id="grundlagen-workflows">
            <list>
                <li>
                    <a href="swe-vcs-git-workflows.topic#solo">
                        Solo-Entwicklung
                    </a>
                </li>
                <li>
                    <a href="swe-vcs-git-workflows.topic#featurebranching">
                        Feature-Branches für Teams
                    </a>
                </li>
                <li>
                    <a href="swe-vcs-git-workflows.topic#mergepull">
                        Merge/Pull-Requests
                    </a>
                </li>
                <li>
                    <a href="swe-vcs-git-workflows.topic#gitflow">
                        Gitflow (Long-Running Branches)
                    </a>
                </li>
                <li>
                    <a href="swe-vcs-git-workflows.topic#tbd">
                        Trunk-based Development
                    </a>
                </li>
                <li>
                    <a href="swe-vcs-git-workflows.topic#grundlagen-vergleich">
                        Welcher Workflow ist der Richtige?
                    </a>
                </li>
            </list>
        </chapter>
    </chapter>

    <chapter title="Zweig/Branch wechseln und erstellen (git checkout)" id="ckeckout">
        <chapter title="Einen neuen Branch erstellen" id="ckeckout-neu">
            <p>
                Ein neuer Branch wird mit dem Befehl <code>git branch</code> erstellt.
            </p>

            <code-block lang="bash">
                git branch newfeature
            </code-block>
        </chapter>

        <chapter title="Branch wechseln" id="ckeckout-wechseln">
            <p>
                Mit dem Befehl <code>git checkout &lt;name&gt;</code> in einen Zweig. Die benutzerfreundlichere und
                neuere Alternative ist git switch, was im Grunde genommen dasselbe bewirkt.
            </p>

            <code-block lang="bash">
                git branch newfeature
            </code-block>

            <p>
                Beim Checkout werden alle unter Git-Kontrolle stehenden Dateien ausgetauscht und durch die Versionen
                ersetzt, die beim letzten Commit im jeweiligen Zweig gültig waren. Nicht unter Versionskontrolle
                stehende Dateien rührt git checkout nicht an.
            </p>
        </chapter>

        <chapter title="Branch erstellen und wechseln in einem Schritt" id="ckeckout-beides">
            <p>
                Um einen neuen Branch zu erzeugen und zeitgleich zu aktivieren, wird die Option <code>-b</code> dem
                Befehl angehängt.
            </p>

            <code-block lang="bash">
                git checkout -b newfeature
            </code-block>

            <p>
                Sollte es zu diesem Zeitpunkt bereits Änderungen ohne Commit geben, dann werden diese Änderungen
                automatisch in den neuen Zweig übernommen.
            </p>
        </chapter>
    </chapter>

    <chapter title="Einzelne Commits importieren (git cherry-pick)" id="cherrypick">

        <chapter title="Beispiel" id="cherrypick-beispiel">
        </chapter>

        <chapter title="Commit importieren" id="cherrypick-importieren">
        </chapter>
    </chapter>

    <chapter title="Branches in der Git-Datenbank" id="gitdatenbank">
    </chapter>

    <chapter title="Branches visualisieren" id="visualisieren">
    </chapter>

    <chapter title="Quellen" id="quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836271868, "Git - Projektverwaltung für Entwickler und DevOps-Teams", Bernd Öggl &amp; Michael Kofler, 2020
        </tip>
    </chapter>
</topic>