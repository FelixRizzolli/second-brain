<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Datenanalyse im Repoitory" id="swe-vcs-git-datenanalyse">
    <show-structure for="chapter,procedure" depth="2"/>

    <chapter title="Einführung" id="einfuehrung">
        <p>
            Git bietet vielerlei Kommandos zum Durchsuchen des Repositorys. Neben den Kommandos gibt es auch
            Entwicklungsumgebungen, Editoren, Weboberflächen von Git-Plattformen oder spezielle Programme wie GitKraken
            die dabei mehr Komfort bieten. Auch VSCode in Kombination mit der Erweiterung GitLens ist sehr praktisch.
        </p>
        <p>
            Trotzdem ist es sinnvoll zu verstehen wie Git intern funktioniert und welche Funktionen es auf Kommandoebene
            gibt. Damit fällt einem die Anwendung solcher Tools umso leichter. Außerdem stößt jedes Tool früher an die
            Grenzen als das Kommando git!
        </p>
    </chapter>

    <chapter title="Commits durchsuchen" id="commit">
        <chapter title="Das Kommando git log" id="commit-gitlog">
            <p>
                Das Kommando <code>git log</code> zeigt, ausgehend vom aktuellen Commit, die vorangegangenen Commits an.
                Das ist möglich, weil zusammen mit jedem Commit auch eine Referenz auf den Parent-Commit gespeichert
                wird. (Bei Merge-Commits gibt es entsprechend mindestens zwei Parents.) Standardmäßig zeigt
                <code>git log</code> zu jedem Commit alle Metadaten (Datum, Autor, Zweig etc.) sowie die jeweilige
                Commit-Message an.
            </p>

            <code-block lang="bash">
                git log
            </code-block>

            <p>
                Um das Kommando zu testen, bietet das Repository des Linux-Kernel eine wunderbare Spielwiese. Dabei ist
                zu beachten, dass das Repository mehr als 4 GB an Speicherplatz benötigt. Link:
                <a href="https://github.com/torvalds/linux.git">https://github.com/torvalds/linux.git</a>
            </p>

            <chapter title="Die wichtigsten Parameter für ein übersichtlicheres Logging" id="commit-gitlog-param">
                <table>
                    <tr>
                        <td>Befehl</td>
                        <td>Beschreibung</td>
                    </tr>
                    <tr>
                        <td>
                            <code-block lang="bash">
                                git log --graph
                            </code-block>
                        </td>
                        <td>
                            Mit diesem Parameter werden die Zweige in ASCII-Art visualisiert.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code-block lang="bash">
                                git log --oneline
                            </code-block>
                        </td>
                        <td>
                            Mit diesem Parameter werden die Metadaten und Commit-Message in einer Zeile zusammengefasst.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code-block lang="bash">
                                git log --all
                            </code-block>
                        </td>
                        <td>
                            Mit diesem Parameter werden auch die Commits anderer Zweige angezeigt.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code-block lang="bash">
                                git log --decorate
                            </code-block>
                        </td>
                        <td>
                            Mit diesem Parameter lassen sich auch Tags anzeigen.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code-block lang="bash">
                                git log --name-only
                            </code-block>
                        </td>
                        <td>
                            Durch diesen Parameter werden die geänderten Dateien aufgelisted.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code-block lang="bash">
                                git log --name-status
                            </code-block>
                        </td>
                        <td>
                            <p>
                                Mit diesem Parameter lässt sich die Art der Änderung pro Datei auflisten:
                            </p>

                            <list>
                                <li><emphasis>m</emphasis> für <emphasis>modified</emphasis></li>
                                <li><emphasis>d</emphasis> für <emphasis>deleted</emphasis></li>
                                <li><emphasis>a</emphasis> für <emphasis>added</emphasis></li>
                            </list>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code-block lang="bash">
                                git log --pretty=online
                                                =short
                                                =medium
                                                =full
                                                =fuller
                                                =...
                            </code-block>
                        </td>
                        <td>
                            Mit diesem Parameter definiert man das Ausgabeformat für die Metadaten und die Commit-Message.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code-block lang="bash">
                                git log --numstat
                            </code-block>
                        </td>
                        <td>
                            Durch diesen Parameter wird die Anzahl der Zeilen pro Datei aufgelistet.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code-block lang="bash">
                                git log --stat
                            </code-block>
                        </td>
                        <td>
                            Mit diesem Parameter wird der Umfang der Änderungen pro Datei als Balkendiagramm aufgelistet.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code-block lang="bash">
                                git log --author &lt;name&gt;
                            </code-block>
                            <code-block lang="bash">
                                git log --author 'FelixRizzolli'
                            </code-block>
                        </td>
                        <td>
                            Mit diesem Parameter können speziell nur die Commits gesucht werden die vom jeweiligen Autor stammen.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code-block lang="bash">
                                git log &lt;branch&gt;
                            </code-block>
                            <code-block lang="bash">
                                git log feature
                            </code-block>

                            <p> </p>

                            <code-block lang="bash">
                                git log &lt;branch&gt;..&lt;branch&gt;
                            </code-block>
                            <code-block lang="bash">
                                git log master..feature
                            </code-block>

                            <p> </p>

                            <code-block lang="bash">
                                git log &lt;branch&gt;...&lt;branch&gt;
                            </code-block>
                            <code-block lang="bash">
                                git log master...feature
                            </code-block>
                        </td>
                        <td>
                            <list>
                                <li>
                                    Der Befehl <code>git log &lt;branch&gt;</code> liefert alle Commits des aktuellen
                                    bzw. des angegebenen Zweigs bis zurück zum Anfang der Commit-Abfolge, also in der
                                    Regel bis hin zum ersten Commit des Repositorys.
                                </li>
                                <li>
                                    Commits die spezifisch für einen Branch oder mehre Branches gelten können mit
                                    <code>git log &lt;branch&gt;..&lt;branch&gt;</code> angezeigt werden.
                                    <code>git log master..feature</code> zeigt somit nur die nicht mit master
                                    zusammengeführten Commits des Feature-Zweigs an.
                                </li>
                                <li>
                                    Mit drei Punkten werden zusätzlich die seit der Trennung der Zweige in master
                                    durchgeführten Commits berücksichtigt.
                                </li>
                            </list>

                            <p>
                                Anstelle von Zweignamen können Sie auch Hashcodes oder andere Revisionsangaben
                                verwenden.
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code-block lang="bash">
                                git log --since &lt;date&gt;
                            </code-block>
                            <code-block lang="bash">
                                git log --after &lt;date&gt;
                            </code-block>
                            <code-block lang="bash">
                                git log --until &lt;date&gt;
                            </code-block>
                            <code-block lang="bash">
                                git log --before &lt;date&gt;
                            </code-block>

                            <p></p>

                            <code-block lang="bash">
                                git log --after 2020-05-01 --until 2020-05-31
                            </code-block>
                        </td>
                        <td>
                            Mit diesen Parametern können die angezeigten Commits zeitlich eingegrenzt werden. Im
                            Beispiel werden jene Commits angezeigt, die im Mai 2020 entstanden sind.
                        </td>
                    </tr>
                </table>

                <p>
                    Der Befehl bietet noch viele weitere Optionen:
                    <a href="https://git-scm.com/docs/git-log">
                        https://git-scm.com/docs/git-log
                    </a>
                </p>
            </chapter>
        </chapter>

        <chapter title="Markierte Commits (git tag)" id="commit-gittag">
            <p>
                Der Befehl <code>git tag</code> liefert eine Liste aller Tags.
            </p>

            <code-block lang="bash">
                git tag
            </code-block>

            <p>
                Mittels <code>git tag --list &lt;pattern&gt;</code> kann das Ergebnis auf Tags, die dem Suchmuster
                entsprechen, eingeschränkt werden.
            </p>

            <code-block lang="bash">
                git tag list &lt;pattern&gt;
            </code-block>
            <code-block lang="bash">
                git tag list 'v-*'          //Zeigt alle Tags die mit 'v-' anfangen
            </code-block>

            <p>
                Mit git log &lt;pattern&gt; werden die Commits gelistet, die zu jenem Release geführt haben.
            </p>

            <code-block lang="bash">
                git tag 'v-1.0'
            </code-block>

            <p>
                Mit dem Befehl <code>git log --simplify-by-decoration</code> werden Commits angezeigt, die Tags
                enthalten oder auf einen Zweig verweisen.
            </p>

            <code-block lang="bash">
                git log --simplify-by-decoration
            </code-block>
        </chapter>

        <chapter title="Referenzlog (git reflog)" id="commit-gitreflog">
            <p>
                Der Referenzlog enthält alle durchgeführten Kommandos, die den globalen HEAD oder den Head eines Zweiges
                verändert haben. Mit dem Befehl <code>git reflog</code> werden diese Aktionen samt den Hashcodes der
                Commits aufgelistet.
            </p>

            <code-block lang="bash">
                git reflog
            </code-block>

            <p>
                Eine detailliertere Ausgabe bietet der Befehl <code>git log</code> mit der Option
                <code>--walk-reflog</code> oder <code>--reflog</code>. Bei <code>--walk-reflog</code> kann der gleiche
                Commit mehrfach auftauchen, z. B. immer dann, wenn zuvor mit git checkout den Zweig gewechselt wurde.
            </p>

            <code-block lang="bash">
                git log --walk-reflog
            </code-block>
        </chapter>
    </chapter>

    <chapter title="Dateien durchsuchen" id="file">
        <p>
            Mit den Kommandos git show, git diff und git blame bietet Git alle Fragen rund um Dateien zu Beantworten.
            Darunter:
        </p>
        
        <list>
            <li>Welchen Inhalt hatte eine Datei zu einem früheren Zeitpunkt?</li>
            <li>Was hat sich seither geändert?</li>
            <li>Und wer ist dafür verantwortlich?</li>
        </list>

        <chapter title="Alte Versionen einer Datei ansehen (git show)" id="file-gitshow">
            <p>
                Das Kommando <code>git show &lt;revision&gt;:&lt;file&gt;</code> gibt die Datei
                <code>&lt;file&gt;</code> in dem Zustand aus, den sie hatte, als er Commit <code>&lt;revison&gt;</code>
                aktuell war.
            </p>

            <code-block lang="bash">
                git show &lt;revision&gt;:&lt;file&gt;
            </code-block>
            <code-block lang="bash">
                git show v2.0:index.php      //Zeigt die Datei des Commits der mit dem Tag v2.0 gekennzeichnet wurde
            </code-block>
        </chapter>

        <chapter title="Unterschiede zwischen Dateien ansehen (git diff)" id="file-gitdiff">

            <chapter title="Unterschiede zwischen Commits ansehen" id="file-gitdiff-unterschiede">
            </chapter>

            <chapter title="Ergebnis gezielt einschränken" id="file-gitdiff-einschraenken">
            </chapter>
        </chapter>

        <chapter title="Dateien durchsuchen (git grep)" id="file-gitgrep">
        </chapter>

        <chapter title="Urheberschaft von Code herausfinden (git blame)" id="file-gitblame">
        </chapter>
    </chapter>

    <chapter title="Fehler suchen" id="fehlersuche">
    </chapter>

    <chapter title="Statistik und Visualisierung" id="statistik">
    </chapter>

    <chapter title="Quellen" id="quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836271868, "Git - Projektverwaltung für Entwickler und DevOps-Teams", Bernd Öggl &amp; Michael Kofler, 2020
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://git-scm.com/docs/git-log" ignore-vars="true">
                https://git-scm.com/docs/git-log
            </a>, 2020-11-08 07:30
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://git-scm.com/docs/git-tag" ignore-vars="true">
                https://git-scm.com/docs/git-tag
            </a>, 2020-11-08 10:45
        </tip>
    </chapter>
</topic>