<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="swe-vcs-git-datenanalyse"
       title="Datenanalyse im Repoitory"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">
    <show-structure depth="2" for="chapter,procedure"/>

    <chapter id="einfuehrung" title="Einführung">
        <p>
            Git bietet vielerlei Kommandos zum Durchsuchen des Repositorys. Neben den Kommandos gibt es auch
            Entwicklungsumgebungen, Editoren, Weboberflächen von Git-Plattformen oder spezielle Programme wie GitKraken
            die dabei mehr Komfort bieten. Auch VSCode in Kombination mit der Erweiterung GitLens ist sehr praktisch.
        </p>
        <p>
            Trotzdem ist es sinnvoll zu verstehen wie Git intern funktioniert und welche Funktionen es auf Kommandoebene
            gibt. Damit fällt einem die Anwendung solcher Tools umso leichter. Außerdem stößt jedes Tool früher an die
            Grenzen als das Kommando git!
        </p>
    </chapter>

    <chapter id="commit" title="Commits durchsuchen">
        <chapter id="commit-gitlog" title="Das Kommando git log">
            <p>
                Das Kommando <code>git log</code> zeigt, ausgehend vom aktuellen Commit, die vorangegangenen Commits an.
                Das ist möglich, weil zusammen mit jedem Commit auch eine Referenz auf den Parent-Commit gespeichert
                wird. (Bei Merge-Commits gibt es entsprechend mindestens zwei Parents.) Standardmäßig zeigt
                <code>git log</code> zu jedem Commit alle Metadaten (Datum, Autor, Zweig etc.) sowie die jeweilige
                Commit-Message an.
            </p>

            <code-block lang="bash">
                git log
            </code-block>

            <note>
                Um das Kommando zu testen, bietet das Repository des Linux-Kernel eine wunderbare Spielwiese. Dabei ist
                zu beachten, dass das Repository mehr als 4 GB an Speicherplatz benötigt. Link: <a
                    href="https://github.com/torvalds/linux.git"/>
            </note>

            <chapter id="commit-gitlog-param" title="Die wichtigsten Parameter für ein übersichtlicheres Logging">
                <table>
                    <tr>
                        <td>Befehl</td>
                        <td>Beschreibung</td>
                    </tr>
                    <tr>
                        <td>
                            <code-block lang="bash">
                                git log --graph
                            </code-block>
                        </td>
                        <td>
                            Mit diesem Parameter werden die Zweige in ASCII-Art visualisiert.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code-block lang="bash">
                                git log --oneline
                            </code-block>
                        </td>
                        <td>
                            Mit diesem Parameter werden die Metadaten und Commit-Message in einer Zeile zusammengefasst.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code-block lang="bash">
                                git log --all
                            </code-block>
                        </td>
                        <td>
                            Mit diesem Parameter werden auch die Commits anderer Zweige angezeigt.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code-block lang="bash">
                                git log --decorate
                            </code-block>
                        </td>
                        <td>
                            Mit diesem Parameter lassen sich auch Tags anzeigen.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code-block lang="bash">
                                git log --name-only
                            </code-block>
                        </td>
                        <td>
                            Durch diesen Parameter werden die geänderten Dateien aufgelisted.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code-block lang="bash">
                                git log --name-status
                            </code-block>
                        </td>
                        <td>
                            <p>
                                Mit diesem Parameter lässt sich die Art der Änderung pro Datei auflisten:
                            </p>

                            <list>
                                <li>
                                    <emphasis>m</emphasis>
                                    für
                                    <emphasis>modified</emphasis>
                                </li>
                                <li>
                                    <emphasis>d</emphasis>
                                    für
                                    <emphasis>deleted</emphasis>
                                </li>
                                <li>
                                    <emphasis>a</emphasis>
                                    für
                                    <emphasis>added</emphasis>
                                </li>
                            </list>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code-block lang="bash">
                                git log --pretty=online
                                =short
                                =medium
                                =full
                                =fuller
                                =...
                            </code-block>
                        </td>
                        <td>
                            Mit diesem Parameter definiert man das Ausgabeformat für die Metadaten und die
                            Commit-Message.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code-block lang="bash">
                                git log --numstat
                            </code-block>
                        </td>
                        <td>
                            Durch diesen Parameter wird die Anzahl der Zeilen pro Datei aufgelistet.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code-block lang="bash">
                                git log --stat
                            </code-block>
                        </td>
                        <td>
                            Mit diesem Parameter wird der Umfang der Änderungen pro Datei als Balkendiagramm
                            aufgelistet.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code-block lang="bash">
                                git log --author &lt;name&gt;
                            </code-block>
                            <code-block lang="bash">
                                git log --author 'FelixRizzolli'
                            </code-block>
                        </td>
                        <td>
                            Mit diesem Parameter können speziell nur die Commits gesucht werden die vom jeweiligen Autor
                            stammen.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code-block lang="bash">
                                git log &lt;branch&gt;
                            </code-block>
                            <code-block lang="bash">
                                git log feature
                            </code-block>

                            <p></p>

                            <code-block lang="bash">
                                git log &lt;branch&gt;..&lt;branch&gt;
                            </code-block>
                            <code-block lang="bash">
                                git log master..feature
                            </code-block>

                            <p></p>

                            <code-block lang="bash">
                                git log &lt;branch&gt;...&lt;branch&gt;
                            </code-block>
                            <code-block lang="bash">
                                git log master...feature
                            </code-block>
                        </td>
                        <td>
                            <list>
                                <li>
                                    Der Befehl <code>git log &lt;branch&gt;</code> liefert alle Commits des aktuellen
                                    bzw. des angegebenen Zweigs bis zurück zum Anfang der Commit-Abfolge, also in der
                                    Regel bis hin zum ersten Commit des Repositorys.
                                </li>
                                <li>
                                    Commits die spezifisch für einen Branch oder mehre Branches gelten können mit
                                    <code>git log &lt;branch&gt;..&lt;branch&gt;</code> angezeigt werden.
                                    <code>git log master..feature</code> zeigt somit nur die nicht mit master
                                    zusammengeführten Commits des Feature-Zweigs an.
                                </li>
                                <li>
                                    Mit drei Punkten werden zusätzlich die seit der Trennung der Zweige in master
                                    durchgeführten Commits berücksichtigt.
                                </li>
                            </list>

                            <note>
                                Anstelle von Zweignamen können Sie auch Hashcodes oder andere Revisionsangaben
                                verwenden.
                            </note>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code-block lang="bash">
                                git log --since &lt;date&gt;
                            </code-block>
                            <code-block lang="bash">
                                git log --after &lt;date&gt;
                            </code-block>
                            <code-block lang="bash">
                                git log --until &lt;date&gt;
                            </code-block>
                            <code-block lang="bash">
                                git log --before &lt;date&gt;
                            </code-block>

                            <p></p>

                            <code-block lang="bash">
                                git log --after 2020-05-01 --until 2020-05-31
                            </code-block>
                        </td>
                        <td>
                            Mit diesen Parametern können die angezeigten Commits zeitlich eingegrenzt werden. Im
                            Beispiel werden jene Commits angezeigt, die im Mai 2020 entstanden sind.
                        </td>
                    </tr>
                </table>

                <p>
                    Der Befehl bietet noch viele weitere Optionen:
                    <a href="https://git-scm.com/docs/git-log">
                        https://git-scm.com/docs/git-log
                    </a>
                </p>
            </chapter>
        </chapter>

        <chapter id="commit-gittag" title="Markierte Commits (git tag)">
            <p>
                Der Befehl <code>git tag</code> liefert eine Liste aller Tags.
            </p>

            <code-block lang="bash">
                git tag
            </code-block>

            <p>
                Mittels <code>git tag --list &lt;pattern&gt;</code> kann das Ergebnis auf Tags, die dem Suchmuster
                entsprechen, eingeschränkt werden.
            </p>

            <code-block lang="bash">
                git tag list &lt;pattern&gt;
            </code-block>
            <code-block lang="bash">
                git tag list 'v-*' //Zeigt alle Tags die mit 'v-' anfangen
            </code-block>

            <p>
                Mit git log &lt;pattern&gt; werden die Commits gelistet, die zu jenem Release geführt haben.
            </p>

            <code-block lang="bash">
                git tag 'v-1.0'
            </code-block>

            <p>
                Mit dem Befehl <code>git log --simplify-by-decoration</code> werden Commits angezeigt, die Tags
                enthalten oder auf einen Zweig verweisen.
            </p>

            <code-block lang="bash">
                git log --simplify-by-decoration
            </code-block>
        </chapter>

        <chapter id="commit-gitreflog" title="Referenzlog (git reflog)">
            <p>
                Der Referenzlog enthält alle durchgeführten Kommandos, die den globalen HEAD oder den Head eines Zweiges
                verändert haben. Mit dem Befehl <code>git reflog</code> werden diese Aktionen samt den Hashcodes der
                Commits aufgelistet.
            </p>

            <code-block lang="bash">
                git reflog
            </code-block>

            <p>
                Eine detailliertere Ausgabe bietet der Befehl <code>git log</code> mit der Option
                <code>--walk-reflog</code> oder <code>--reflog</code>. Bei <code>--walk-reflog</code> kann der gleiche
                Commit mehrfach auftauchen, z. B. immer dann, wenn zuvor mit git checkout den Zweig gewechselt wurde.
            </p>

            <code-block lang="bash">
                git log --walk-reflog
            </code-block>
        </chapter>
    </chapter>

    <chapter id="file" title="Dateien durchsuchen">
        <p>
            Mit den Kommandos git show, git diff und git blame bietet Git alle Fragen rund um Dateien zu Beantworten.
            Darunter:
        </p>

        <list>
            <li>Welchen Inhalt hatte eine Datei zu einem früheren Zeitpunkt?</li>
            <li>Was hat sich seither geändert?</li>
            <li>Und wer ist dafür verantwortlich?</li>
        </list>

        <chapter id="file-gitshow" title="Alte Versionen einer Datei ansehen (git show)">
            <p>
                Das Kommando <code>git show &lt;revision&gt;:&lt;file&gt;</code> gibt die Datei
                <code>&lt;file&gt;</code> in dem Zustand aus, den sie hatte, als er Commit <code>&lt;revison&gt;</code>
                aktuell war.
            </p>

            <code-block lang="bash">
                git show &lt;revision&gt;:&lt;file&gt;
            </code-block>
            <code-block lang="bash">
                git show v2.0:index.php //Zeigt die Datei des Commits der mit dem Tag v2.0 gekennzeichnet wurde
            </code-block>
        </chapter>

        <chapter id="file-gitdiff" title="Unterschiede zwischen Dateien ansehen (git diff)">
            <p>
                Mit dem Befehl <code>git diff</code> können die Änderungen zwischen der aktuellen Version und einer
                älteren Version sowie auch zwischen zwei älteren Versionen angezeigt werden. Die Ausgabe besteht aus
                mehreren Blöcken, die mit <code>@@</code> eingeleitet werden und die Position angeben. Zur Orientierung
                helfen einige Zeilen Code, den Kontext herzustellen. Anschließend folgen die geänderten Zeilen, denen
                <code>-</code> oder <code>+</code> vorangestellt ist, je nachdem, ob sie gelöscht oder hinzugefügt
                wurden.
            </p>

            <code-block lang="bash">
                git diff &lt;revision&gt; &lt;file&gt;
            </code-block>
            <code-block lang="bash">
                git diff v2.0 index.php
            </code-block>

            <p></p>

            <code-block lang="bash">
                git diff &lt;revision&gt;..&lt;revision&gt; &lt;file&gt;
            </code-block>
            <code-block lang="bash">
                git diff v1.0..v2.0 index.php
            </code-block>

            <p>
                Sollen nur die Änderungen angezeigt werden so kann die Ausgebe mit dem Parameter
                <code>--compact-summary</code> zusammengefasst werden.
            </p>

            <note>
                <p><b>Range-Syntax mit drei Punkten</b></p>

                <p>
                    Die Variante <code>git diff &lt;rev1&gt;..&lt;rev2&gt;</code> ist vor allem dann zweckmäßig, wenn es
                    sich bei den Revisionen um Zweige handelt. In diesem Fall ermittelt <code>git diff</code> zuerst die
                    letzte gemeinsame Basis beider Zweige und zeigt dann an, was sich in <code>&lt;rev2&gt;</code> im
                    Vergleich zum letzten gemeinsamen Commit verändert hat. Anders als bei
                    <code>&lt;rev1&gt;..&lt;rev2&gt;</code> werden aber alle Änderungen ignoriert, die seither in
                    <code>&lt;rev1&gt;</code> passiert sind.
                </p>
            </note>

            <chapter id="file-gitdiff-unterschiede" title="Unterschiede zwischen Commits ansehen">
                <p>
                    Wird die Datei nicht angegeben, so zeigt der Befehl <code>git diff &lt;revision&gt;</code> alle
                    geänderten Dateien seit der angegebenen Version bzw. zwischen zwei Versionen/Commits an. Bei
                    umfangreichen Änderungen fehlt der Platz, um für jede geänderte Zeile ein <code>+</code> oder ein
                    <code>-</code> auszugeben. Stattdessen wird nach <code>|</code> die Gesamtanzahl der geänderten
                    Zeilen angegeben. Die Anzahl der Plus- und Minus-Zeichen ist relativ zu der Datei mit den größten
                    Änderungen. Je länger der Balken aus den Zeichen ist, desto umfangreicher sind die Änderungen
                    ausgefallen.
                </p>

                <code-block lang="bash">
                    git diff --compact-summary v1.0..v2.0 index.php
                </code-block>

                <code-block>
                    css/autocompleteList.css
                    | 225 +-
                    css/editproject.css (new)
                    | 13 +
                    css/edituser.css
                    | 99 +-
                    css/iprot.css
                    | 648 ++++-
                    css/iprot/jquery-ui-1.8.13.custom.css
                    | 2 +-
                    css/mobile.css (new)
                    | 17 +
                    ...
                    269 files changed, 22819 insertions(+), 12792 deletions(-)
                </code-block>
            </chapter>

            <chapter id="file-gitdiff-einschraenken" title="Ergebnis gezielt einschränken">
                <list>
                    <li>
                        Mit den Parametern <code>-G &lt;pattern&gt;</code> werden Suchmuster (mit
                        <a href="swe-pk-regex.topic">regulären Ausdrücken</a>)
                        angegeben. Der Befehl <code>git diff</code> liefert dann nur die Textdateien, deren Änderungen
                        den Suchausdruck enthalten, wobei die Groß- und Kleinschreibung exakt übereinstimmen muss.
                    </li>
                    <li>
                        <code>--diff-filter=A|C|M|R</code> filtert jene Dateien heraus, die hinzugefügt (added), kopiert
                        (copied), gelöscht (deleted), verändert (modified) oder umbenannt (renamed) wurden.
                    </li>
                </list>
            </chapter>
        </chapter>

        <chapter id="file-gitgrep" title="Dateien durchsuchen (git grep)">
            <p>
                Mit dem Befehl <code>git grep &lt;pattern&gt;</code> können Dateien auf einem bestimmten Suchbegriff,
                der exakt dem Übergebenen regulären Ausdruck entspricht, durchsucht werden. Standardmäßig berücksichtigt
                das Kommando alle Dateien im Projektverzeichnis. Mit der Option <code>-i</code> wird die Groß- und
                Kleinschreibung nicht beachtet.
            </p>

            <code-block lang="bash">
                git grep SKAction
            </code-block>
            <code-block>
                ios-pacman/Maze.swift: let setGlitter = SKAction.setTextur...
                ios-pacman/Maze.swift: let setStandard = SKAction.setText...
                ios-pacman/Maze.swift: let waitShort = SKAction.wait(forDu...
                ...
            </code-block>

            <p>
                Wird der Parameter <code>--count</code> mitgegeben, so zeigt die Ausgabe nur wie oft der Begriff in den
                jeweiligen Dateien vorkommt.
            </p>

            <code-block lang="bash">
                git grep --count CGSize
            </code-block>
            <code-block>
                ios-pacman/CGOperators.swift:6
                ios-pacman/Global.swi ft:1
                ios-pacman/Maze.swift:4
                ...
            </code-block>

            <p>
                Mit der Option <code>-n</code> kann die Suche auch auf ein bestimmtes Verzeichnis beschränkt werden.
            </p>

            <code-block lang="bash">
                git grep -n margin css/
            </code-block>
            <code-block>
                css/config.json:100: "@form-group-margin-bottom": "15px",
                css/config.json:144: "@navbar-margin-bottom": "@line-heig...
                css/editglobal.css:25: margin-top: 1px;
                css/editglobal.css:29: margin-top: 0px;
                ...
            </code-block>

            <p>
                Es kann auch in einer älteren Version nach einem Begriff gesucht werden:
                <code>git grep &lt;pattern&gt; &lt;revision&gt;</code>
            </p>

            <code-block lang="bash">
                git grep 'UPDATE person' v2.0
            </code-block>
            <code-block>
                v2.0:lib/delete.php: $sql = "UPDATE person SET sta...
                v2.0:lib/person.php: $sql = sprintf("UPDATE person...
                v2.0:lib/personengruppe.php: $sql = sprintf("UPDATE person...
                ...
            </code-block>
        </chapter>

        <chapter id="file-gitblame" title="Urheberschaft von Code herausfinden (git blame)">
            <p>
                Mit dem Befehl <code>git blame &lt;file&gt;</code> wird die Datei <code>&lt;file&gt;</code> zeilenweise
                mit dem jeweiligen verantwortlichen des jeweiligen Commits angezeigt. Folgende Parameter können eine
                große Hilfe beim Lesen der Ausgabe bieten:
            </p>

            <list>
                <li>
                    <code>--color-lines</code> stellt Fortsetzungszeilen aus dem gleichen Commit in blauer Farbe dar.
                </li>
                <li>
                    <code>--color-by-age</code> kennzeichnet frisch geänderten Code rot (Änderungen im letzten Monat)
                    und mäßigt neuen Code weiß (Änderungen im letzten Jahr).
                </li>
            </list>
        </chapter>
    </chapter>

    <chapter id="fehlersuche" title="Fehler suchen">
    </chapter>

    <chapter id="statistik" title="Statistik und Visualisierung">
    </chapter>

    <chapter id="quellen" title="Quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836271868, "Git - Projektverwaltung für Entwickler und DevOps-Teams", Bernd Öggl &amp; Michael Kofler,
            2020
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://git-scm.com/docs/git-log" ignore-vars="true">
                https://git-scm.com/docs/git-log
            </a>, 2020-11-08 07:30
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://git-scm.com/docs/git-tag" ignore-vars="true">
                https://git-scm.com/docs/git-tag
            </a>, 2020-11-08 10:45
        </tip>
    </chapter>
</topic>