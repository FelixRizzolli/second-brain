<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="GIT" id="swe-vcs-git">
    <show-structure for="chapter,procedure" depth="2"/>

    <chapter title="Was ist Git?" id="git">
        <p>
            Git ist ein Versionsverwaltungssystem, das sich mittlerweile zum Standard entwickelt hat. Es ermöglicht
            allen Entwicklern den Zugriff auf das gesamte Projekt, sodass jeder Programmierer weiß, was die anderen
            zuletzt gemacht haben. Jeder Entwickler kann den Code der anderen ausprobieren und das Zusammenspiel mit den
            eigenen Änderungen Testen.
        </p>
        <p>
            Andere Versionsverwaltungssysteme wären:
        </p>

        <list>
            <li><a href="swe-vcs-cvs.topic">Concurrent Versions System (CVS)</a></li>
            <li><a href="swe-vcs-svn.topic">Subversion (SVN)</a></li>
            <li><a href="swe-vcs-vss.topic">Visual SourceSafe</a></li>
        </list>

        <p>
            Webplattformen wie GitHub, GitLab, Azure DevOps und Bitbucket vereinfachen die Nutzung von Git.
        </p>
    </chapter>

    <chapter title="Die Geschichte" id="geschichte">
        <p>
            Linus Torvalds suchte ein neues Versionsverwaltungssystem für die Weiterentwicklung des
            <a href="linux.topic">Linux</a>-Kernels, um das damals genutzte BitKeeper abzulösen. Keines, der verfügbaren
            Open-Source-Programmen, genügte seinen hohen Ansprüchen. So stoppte der Linux-Chefentwickler seine
            Hauptarbeit und schuf in nur zwei Wochen das Grundgerüst von Git. Der Name Git steht sinngemäß für Blödmann
            oder Depp, und auch die Hilfeseite man git bezeichnet das Programm als the stupid content tracker.
        </p>
        <p>
            Das Ziel von Linus Torvalds war es ein dezentrales Versionsverwaltungssystem zu schaffen. Aber erst der
            zentralistische Ansatz von GitHub und Co. machte Git für Entwickler richtig attraktiv. Diese Websites
            vereinfachen das Hosting von Git-Projekten enorm - sogar der Linux-Kernel befindet sich mittlerweile auf
            GitHub.
        </p>
    </chapter>

    <chapter title="Einführung" id="einfuehrung">
        <chapter title="Was ist Git?" id="einfuehrung-git">
            <p>
                Git ist ein dezentrales Versionsverwaltungssystem. Bei Softwareprojekten hilft Git dabei, sich die von
                unterschiedlichen Entwicklern durchgeführten Änderungen zu merken. Binärdateien wie Office-Dokumente,
                Bilder, Audios oder Videos sind für Git nicht geeignet, da sich dort die Änderungen schwer
                nachvollziehen lassen.
            </p>

            <chapter title="Das Kommando git" id="einfuehrung-git-kommando">
                <p>
                    Alle Git-Befehle lassen sich mit Optionen und Parametern durch das git-Kommando im Terminal oder in
                    der PowerShell (sofern Git installiert ist) ausführen.
                </p>
            </chapter>
        </chapter>

        <chapter title="Git-Oberflächen" id="einfuehrung-ui">
            <p>
                Nahezu alle Entwicklungsumgebungen (Visual Studio, Xcode, IntelliJ, Android Studio usw.) sowie die
                meisten größeren Editoren (Atom, Sublime, VSCode etc.) stellen Menükommandos zur Auswahl, mit denen
                elementare Git-Operationen unkompliziert durchgeführt werden können. Analog gilt das auch für die
                Weboberflächen wie GitHub oder GitLab.
            </p>

            <chapter title="Git vs. GitHub vs. GitLab" id="einfuehrung-ui-vergleich">
                <p>
                    Git ist ein dezentrales Werkzeug. In der Praxis sind aber externe Git-Repositorys wie GitHub oder
                    GitLab allgegenwärtig. Sie vereinfachen den Datenaustausch, dienen als zusätzliches Backup und
                    stellen diverse Zusatzfunktionen (Dokumentation, Bug-Tracker, Qualitätssicherung etc.) zur
                    Verfügung.
                </p>
                <p>
                    Git-Hoster wie GitHub oder GitLab sind keine Alternative zu Git, sondern eine Ergänzung.
                </p>
            </chapter>
        </chapter>
    </chapter>

    <chapter title="Installation" id="installation">

        <chapter title="Linux" id="installation-linux">
        </chapter>

        <chapter title="macOS (mit Homebrew)" id="installation-macos">
        </chapter>

        <chapter title="Windows" id="installation-windows">
        </chapter>
    </chapter>

    <chapter title="Arbeiten mit GIT" id="arbeiten">

        <chapter title="Die Eingabeaufforderung (cmd.exe)" id="arbeiten-cmd">
        </chapter>

        <chapter title="Windows Terminal" id="arbeiten-terminal">
        </chapter>

        <chapter title="Git im WSL" id="arbeiten-wsl">
        </chapter>
    </chapter>

    <chapter title="Quellen" id="quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836271868, "Git - Projektverwaltung für Entwickler und DevOps-Teams", Bernd Öggl &amp; Michael Kofler, 2020
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://de.wikipedia.org/wiki/PowerShell" ignore-vars="true">
                https://de.wikipedia.org/wiki/PowerShell
            </a>, 2020-10-29 03:45
        </tip>
    </chapter>
</topic>