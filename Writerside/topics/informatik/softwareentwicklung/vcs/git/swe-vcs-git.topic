<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="swe-vcs-git"
       title="GIT"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">
    <show-structure depth="2" for="chapter,procedure"/>

    <chapter id="git" title="Was ist Git?">
        <p>
            Git ist ein Versionsverwaltungssystem, das sich mittlerweile zum Standard entwickelt hat. Es ermöglicht
            allen Entwicklern den Zugriff auf das gesamte Projekt, sodass jeder Programmierer weiß, was die anderen
            zuletzt gemacht haben. Jeder Entwickler kann den Code der anderen ausprobieren und das Zusammenspiel mit den
            eigenen Änderungen Testen.
        </p>
        <p>
            Andere Versionsverwaltungssysteme wären:
        </p>

        <list>
            <li><a href="swe-vcs-cvs.topic">Concurrent Versions System (CVS)</a></li>
            <li><a href="swe-vcs-svn.topic">Subversion (SVN)</a></li>
            <li><a href="swe-vcs-vss.topic">Visual SourceSafe</a></li>
        </list>

        <p>
            Webplattformen wie GitHub, GitLab, Azure DevOps und Bitbucket vereinfachen die Nutzung von Git.
        </p>
    </chapter>

    <chapter id="geschichte" title="Die Geschichte">
        <p>
            Linus Torvalds suchte ein neues Versionsverwaltungssystem für die Weiterentwicklung des
            <a href="linux.topic">Linux</a>-Kernels, um das damals genutzte BitKeeper abzulösen. Keines, der verfügbaren
            Open-Source-Programmen, genügte seinen hohen Ansprüchen. So stoppte der Linux-Chefentwickler seine
            Hauptarbeit und schuf in nur zwei Wochen das Grundgerüst von Git. Der Name Git steht sinngemäß für Blödmann
            oder Depp, und auch die Hilfeseite man git bezeichnet das Programm als the stupid content tracker.
        </p>
        <p>
            Das Ziel von Linus Torvalds war es ein dezentrales Versionsverwaltungssystem zu schaffen. Aber erst der
            zentralistische Ansatz von GitHub und Co. machte Git für Entwickler richtig attraktiv. Diese Websites
            vereinfachen das Hosting von Git-Projekten enorm - sogar der Linux-Kernel befindet sich mittlerweile auf
            GitHub.
        </p>
    </chapter>

    <chapter id="einfuehrung" title="Einführung">
        <chapter id="einfuehrung-git" title="Was ist Git?">
            <p>
                Git ist ein dezentrales Versionsverwaltungssystem. Bei Softwareprojekten hilft Git dabei, sich die von
                unterschiedlichen Entwicklern durchgeführten Änderungen zu merken. Binärdateien wie Office-Dokumente,
                Bilder, Audios oder Videos sind für Git nicht geeignet, da sich dort die Änderungen schwer
                nachvollziehen lassen.
            </p>

            <chapter id="einfuehrung-git-kommando" title="Das Kommando git">
                <p>
                    Alle Git-Befehle lassen sich mit Optionen und Parametern durch das git-Kommando im Terminal oder in
                    der PowerShell (sofern Git installiert ist) ausführen.
                </p>
            </chapter>
        </chapter>

        <chapter id="einfuehrung-ui" title="Git-Oberflächen">
            <p>
                Nahezu alle Entwicklungsumgebungen (Visual Studio, Xcode, IntelliJ, Android Studio usw.) sowie die
                meisten größeren Editoren (Atom, Sublime, VSCode etc.) stellen Menükommandos zur Auswahl, mit denen
                elementare Git-Operationen unkompliziert durchgeführt werden können. Analog gilt das auch für die
                Weboberflächen wie GitHub oder GitLab.
            </p>

            <chapter id="einfuehrung-ui-vergleich" title="Git vs. GitHub vs. GitLab">
                <p>
                    Git ist ein dezentrales Werkzeug. In der Praxis sind aber externe Git-Repositorys wie GitHub oder
                    GitLab allgegenwärtig. Sie vereinfachen den Datenaustausch, dienen als zusätzliches Backup und
                    stellen diverse Zusatzfunktionen (Dokumentation, Bug-Tracker, Qualitätssicherung etc.) zur
                    Verfügung.
                </p>
                <p>
                    Git-Hoster wie GitHub oder GitLab sind keine Alternative zu Git, sondern eine Ergänzung.
                </p>
            </chapter>
        </chapter>
    </chapter>

    <chapter id="installation" title="Installation">
        <note>
            <p><b>Git ohne Installation</b></p>

            <p>
                In manchen Entwicklungsumgebungen wie beispielsweise Visual Studio oder Xcode sind Git-Bibliotheken bzw.
                das Kommando <code>git</code> direkt enthalten.
            </p>
        </note>

        <chapter id="installation-linux" title="Linux">
            <list>
                <li>Debian, Raspbian, Ubuntu: <code>apt install git</code></li>
                <li>CentOS/RHEL: <code>yum install git</code></li>
                <li>Fedora: <code>dnf install git</code></li>
                <li>SUSE/openSUSE: <code>zypper install git</code></li>
            </list>
        </chapter>

        <chapter id="installation-macos" title="macOS (mit Homebrew)">
            <list>
                <li>In Xcode ist git bereits fix integriert</li>
                <li>Homebrew: <a href="https://brew.sh">https://brew.sh</a></li>
                <li>Command: <code>brew install git</code></li>
            </list>
        </chapter>

        <chapter id="installation-windows" title="Windows">
            <p>
                Für Windows wird Git mit ein <a href="https://git-scm.com/downloads">Setup-Programm</a> installiert, was
                auch gleich eine Terminal-Umgebung, die Git Bash mit den wichtigsten, aus der Linux-Welt bekannten
                Komponenten, darunter die Shell <b>bash</b> sowie Kommandos wie <code>ls</code>, <code>find</code>,
                <code>grep</code>, <code>tar</code>, <code>gzip</code> usw., mit installiert. Ebenfalls inkludiert ist
                die Git GUI, eine grafische Git-Benutzeroberfläche.
            </p>
        </chapter>
    </chapter>

    <chapter id="arbeiten" title="Arbeiten mit GIT">
        <p>
            Bei Linux und macOS wird ein Terminalfenster geöffnet, um kommandoorientiert zu arbeiten. Bei Windows gibt
            es dagegen bis zu vier Varianten zur Wahl:
        </p>

        <list>
            <li>Die Eingabeaufforderung (cmd.exe)</li>
            <li>Git Bash</li>
            <li>PowerShell</li>
            <li>Windows Terminal</li>
        </list>

        <chapter id="arbeiten-cmd" title="Die Eingabeaufforderung (cmd.exe)">
            <p>
                Die Eingabeaufforderung von Windows ist noch ein Überbleibsel aus den DOS-Zeiten und reicht auch aus, um
                elementare Kommandos wie <code>cd</code>, <code>mkdir</code> und auch <code>git</code> auszuführen. Sie
                sollte aber nicht als dauerhafte Option gewählt werden, da die uralte Struktur des Programms häufig zu
                Problemen führt, web Zeichen außerhalb des ASCII-Zeichensatzes verwendet werden.
            </p>

            <chapter id="arbeiten-cmd-powershell" title="PowerShell">
                <p>
                    Die PowerShell besteht aus einem Kommandozeileninterpreter sowie einer Skriptsprache. Sie kann weit
                    aus mehr als sie Eingabeaufforderung. Für eine effiziente Bedienung von Git durch die PowerShell
                    gibt es
                    <a href="https://git-scm.com/book/en/v2/Appendix-A%3A-Git-in-Other-Environments-Git-in-PowerShell">
                        »hier«
                    </a>
                    eine offizielle Dokumentation.
                </p>
            </chapter>
        </chapter>

        <chapter id="arbeiten-terminal" title="Windows Terminal">
            <p>
                2019 hat Microsoft ein neues Terminal veröffentlicht, welches die alte Eingabeaufforderung und die
                PowerShell in einer vereint und zudem noch weitere Eigenschaften bietet. Wie in immer mehr
                Microsoft-Projekten ist der Quellcode öffentlich und befindet sich in einem GitHub-Repository:
                <a href="https://github.com/microsoft/terminal">https://github.com/microsoft/terminal</a>. Der Download
                ist auch im Microsoft Store erhältlich.
            </p>

            <chapter id="arbeiten-terminal-gitbash" title="Git Bash">
                <p>
                    Git Bash wird bei der Installation von Git mitgeliefert und sieht der Eingabeaufforderung von
                    Windows sehr ähnlich. Mit ihr können alle elementaren Linux-Kommandos verwendet werden. Um
                    beispielsweise Dateien im aktuellen Verzeichnis aufzulisten wird <code>ls</code> anstelle von
                    <code>dir</code> verwendet. Soweit es nicht namensgleiche Linux-Kommandos gibt, können DOS-Kommandos
                    verwendet werden.
                </p>
                <p>
                    Der größte Vorteil der Git Bash liegt in der Integration des <code>ssh</code>-Kommandos, welches im
                    Zusammenspiel mit Git häufig verwendet wird.
                </p>
                <p>
                    Git Bash ist Unicode-kompatibel und verwendet Standardmäßig den Zeichensatz UTF-8.
                </p>
            </chapter>
        </chapter>

        <chapter id="arbeiten-wsl" title="Git im WSL">
            <p>
                Werden die Projekte, welche mit git heruntergeladen werden vorwiegend in einer Linux-Umgebung (und nicht
                mit Windows-Programmen) bearbeitet, so besteht auch die Möglichkeit Git im WSL (Windows Subsystem for
                Linux) zu installieren und dort zu verwenden.
            </p>
        </chapter>
    </chapter>

    <chapter id="quellen" title="Quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836271868, "Git - Projektverwaltung für Entwickler und DevOps-Teams", Bernd Öggl &amp; Michael Kofler,
            2020
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://de.wikipedia.org/wiki/PowerShell" ignore-vars="true">
                https://de.wikipedia.org/wiki/PowerShell
            </a>, 2020-10-29 03:45
        </tip>
    </chapter>
</topic>