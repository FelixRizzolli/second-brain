<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Tags" id="swe-vcs-git-tags">
    <show-structure for="chapter,procedure" depth="2"/>

    <chapter title="Einführung" id="einfuehrung">
        <p>
            Standardmäßig werden Commits durch einen hexadezimalen Hashcode identifiziert. <b>Tags</b> bieten eine
            alternative, um Commits zu kennzeichnen bzw. zu benennen. Tags werden üblicherweise verwendet um
            Meilensteine, ausgelieferte Versionen oder besonders wichtige Commits zu markieren.
        </p>

        <code-block lang="bash">
            git commit -m 'final work for version 1.0 done'
        </code-block>
        <code-block lang="bash">
            git tag v1.0
        </code-block>

        <note>
            Tag-Namen dürfen keine Leerzeichen enthalten. Auch für diverse Sonderzeichen bestehen Einschränkungen
            (siehe <a href="https://git-scm.com/docs/git-check-ref-format">git-check-ref-format</a>)
        </note>
    </chapter>

    <chapter title="Tags auflisten" id="list">
        <p>
            Mit dem Befehl <code>git tag</code> oder <code>git tag --list</code> lassen sich alle Tags in alphabetischer
            Reihenfolge auflisten. Dabei wird aber beispielsweise v0.7 vor v0.12 gelistet, da 7 nach 1 kommt. Damit Tags
            in der richtigen Reihenfolge erscheinen muss eine entsprechende Nomenklatur überlegt werden: falls es mehr
            als 10 Versionsnummern geben kann, dann z.B. v0.01. Tags können auch mit
            <code>git tag --sort=committerdate</code> nach dem Commit-Zeitpunkt sortiert werden.
        </p>

        <code-block lang="bash">
            git tag
        </code-block>
        <code-block lang="bash">
            git tag --list
        </code-block>
        <code-block lang="bash">
            git tag --sort=committerdate
        </code-block>
    </chapter>

    <chapter title="Einfache Tags vs annotierte Tags" id="typen">
        <p>
            Git kennt zwei Arten von Tags:
        </p>

        <list>
            <li>
                <code>git tag &lt;tagname&gt;</code>: Ein einfacher Tag ist eine simple Referenz auf den letzten Commit
                im aktiven Zweig. Intern werden solche Referenzen in Form winziger Textdateien im Verzeichnis
                <path>.git/refs/tag</path> gespeichert, wobei der Name der Datei dem Tag-Text entspricht. Die Datei
                enthält den Hashcode des Commits.
            </li>
            <li>
                <code>git tag -a &lt;tagname&gt;</code>: Ein annotierter Tag speichert neben den Tag-Text diverse
                Zusatzinformationen, z.B. wann der Tag von wem erzeugt wurde. Außerdem kann mit der Option
                <code>-m</code> ein zweiter, ausführlicher Message-Text gespeichert werden. (Mit <code>-m</code> kann
                auf <code>-a</code> verzichtet werden.) Git-intern sind annotierte Tags eigene Objekte.
                <path>.git/ref/tags/&lt;tagname&gt;</path> verweist nun nicht auf den Commit, sondern auf das
                Tag-Objekt. Dies enthält Datum, Uhrzeit, die Tag Message und natürlich den Verweis auf den gerade
                gültigen Commit.
            </li>
        </list>

        <note>
            Auch bei annotierten Tags ist der Verwaltungs-Overhead minimal. Es müssen also keine Effizienzeinbußen
            befürchtet werden, wenn annotierte Tags verwendet werden.
        </note>
    </chapter>

    <chapter title="Tags synchronisieren" id="synchronisieren">
        <p>
            Der Befehl <code>git push</code>, ohne weitere Parameter, überträgt Commits aber keine Tags ins Remote
            Repository. Es gibt drei Möglichkeiten Tags ins Remote Repository zu übertragen:
        </p>
        
        <list>
            <li>
                <code>git push origin &lt;tagname&gt;</code> überträgt nur den angegebenen Tag. Das Kommando
                funktioniert für einfache und für annotierte Tags. Hier muss <code>origin</code> oder eine andere
                Remote-Bezeichnung angeben werden, weil git andernfalls den Tag-Namen als Remote-Bezeichnung
                interpretiert.
            </li>
            <li>
                <code>git push --tags überträgt</code> alle Tags des aktiven Zweigs. Auch dieses Kommando berücksichtigt
                sowohl einfache als auch annotierte Tags. Commits werden hingegen nicht übertragen. Um sowohl die
                Commits als auch die Tags zu übertragen, benötigt es zwei Kommandos: <code>git push</code> und
                <code>git push --tags</code>.
            </li>
            <li>
                <code>git push --follow-tags</code> überträgt sowohl Commits und als auch die damit verbundenen Tags in
                das Remote Repository. Diese Option berücksichtigt <emphasis>nur annotierte Tags</emphasis>, keine
                einfachen Tags!
            </li>
        </list>
    </chapter>

    <chapter title="Tags nachträglich setzen" id="nachtraeglich-setzen">
        <p>
            Der Befehl <code>git tag</code> gilt standardmäßig für den aktuellen Commit. Wurde vergessen ein Tag zu
            setzen, so kann dieser auch nachträglich mit den ersten Stellen des Hashcodes gesetzt werden.
        </p>

        <code-block lang="bash">
            git tag 'iprot_v3.6.0' 612410
        </code-block>
    </chapter>

    <chapter title="Tags löschen" id="loeschen">
    </chapter>

    <chapter title="Tags ändern bzw. korrigieren (Re-Tagging)" id="aendern">
    </chapter>

    <chapter title="Quellen" id="quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836271868, "Git - Projektverwaltung für Entwickler und DevOps-Teams", Bernd Öggl &amp; Michael Kofler, 2020
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://git-scm.com/docs/git-check-ref-format" ignore-vars="true">
                https://git-scm.com/docs/git-check-ref-format
            </a>, 2020-11-11 07:10
        </tip>
    </chapter>
</topic>