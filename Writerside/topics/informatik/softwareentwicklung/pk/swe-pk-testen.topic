<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="swe-pk-testen"
       title="Testen"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">
    <show-structure depth="2" for="chapter,procedure"/>

    <chapter id="automatisiert" title="Das Prinzip von automatisierten Tests">
        <code-block lang="mermaid">
            <![CDATA[
            stateDiagram-v2

            state "Zu testender Code (»System Under Test«)" as system {
                state "Zu testende Funktion" as system_function
            }

            state "Testender Code (»Unit-Test«)" as unittest {
                state "Testfall" as unittest_testfall {
                    state "1.) Aufruf einer Funktion" as unittest_testfall_aufruf
                    state "2.) Überprüfen des Rückgabewertes" as unittest_testfall_check
                }
            }

            state "Test erfolgreich" as test_ok
            state "Test fehlgeschlagen" as test_ko

            unittest_testfall_aufruf --> system_function
            system_function --> unittest_testfall_check
            unittest_testfall_check --> test_ok: Anforderungen erfüllt
            unittest_testfall_check --> test_ko: Anforderungen nicht erfüllt
            ]]>
        </code-block>

        <p>
            Die Idee von automatisierten Tests ist im Wesentlichen, dass man spezielle Programme (Testprogramme bzw.
            <b>Unit-Tests</b>) schreibt, welche den zu testenden Code aufrufen und die Ergebnisse des Codes überprüfen.
            Der zu testende Code kann eine einzelne Funktion sein, aber auch eine Kombination verschiedener Funktionen
            oder verschiedener Klassen und Objekte. Im Allgemeinen spricht man daher auch von einer <b>Class Under
            Test</b> oder, noch allgemeiner, von einem System Under Test. Die Überprüfungen innerhalb eines
            <b>Unit-Tests</b> nennt man auch <b>Assertions</b>. Ein Unit-Test besteht in der Regel zudem aus mehreren
            Testfällen (auch <b>Test-Cases</b> genannt).
        </p>

        <chapter id="automatisiert-beispiel" title="Beispiel">
            <code-block lang="mermaid">
                <![CDATA[
                stateDiagram-v2

                state "Zu testender Code (»System Under Test«)" as system {
                    state "function add(x, y) { return x + y; }" as system_function
                }

                state "Testender Code (»Unit-Test«)" as unittest {
                    state "Testfall" as unittest_testfall {
                        state "1.) let result = add(5, 6)" as unittest_testfall_aufruf
                        state "2.) result === 11" as unittest_testfall_check
                    }
                }

                state "Test erfolgreich" as test_ok
                state "Test fehlgeschlagen" as test_ko

                unittest_testfall_aufruf --> system_function
                system_function --> unittest_testfall_check
                unittest_testfall_check --> test_ok: Ja
                unittest_testfall_check --> test_ko: Nein
                ]]>
            </code-block>

            <p>
                Angenommen es wurde eine Funktion <code>add()</code> implementiert, welche zwei Zahlen addieren und das
                Ergebnis zurückgeben soll. Ein Unit-Test würde dann, diese Funktion aufrufen (beispielsweise mit den
                Argumenten 5 und 6) und prüfen, ob das tatsächliche Ergebnis dem erwarteten Ergebnis entspricht. Ist
                dies der Fall, ist der Test erfolgreich, andernfalls schlägt er fehl.
            </p>
            <p>
                Warum sollten überhaupt Unit-Tests geschrieben werden? Warum sollte man sich die Mühe machen und
                zusätzlichen Quelltext schreiben, der den anderen (den »richtigen«) Quelltext überprüft? Dafür gibt es
                mehrere Gründe:
            </p>

            <list>
                <li>
                    Über Tests wird sichergestellt, dass nachträgliche Änderungen am Code keine ungewollten
                    Nebenwirkungen haben. Treten solche nämlich auf, schlagen die entsprechenden Tests fehl.
                </li>
                <li>
                    Durchs Schreiben von Unit-Tests macht man sich auch generell mehr Gedanken über die Struktur des
                    Codes, weil man automatisch mehr darauf achtet, einfachen und leicht testbaren Code zu schreiben.
                    Dies wiederum hat in der Regel den positiven Nebeneffekt, dass der Code auch für andere leichter zu
                    verwenden und zu verstehen ist.
                </li>
            </list>
        </chapter>
    </chapter>

    <chapter id="tdd" title="Das Prinzip der testgetriebenen Entwicklung">
        <p>
            Wenn man das Prinzip des automatisierten Testens in seinen Entwicklungsworkflow integriert, spricht man auch
            von testgetriebener Entwicklung (auch <b>Test-Driven Development</b>, kurz TDD). Die grundlegende Idee dabei
            ist ein iteratives Vorgehen: Bevor man mit der Implementierung einer neuen Komponente (beispielsweise einer
            Funktion) beginnt, definiert man zunächst Unit-Tests und legt darüber fest, welche Anforderungen die neue
            Komponente erfüllen muss. Beim TDD folgt man folgenden Schritten:
        </p>

        <code-block lang="mermaid">
            <![CDATA[
            stateDiagram-v2

            state "Test schreiben" as step1
            state "Test ausführen" as step2
            state "Komponente implementieren" as step3
            state "Test erneut ausführen" as step4
            state "Komponente optimieren" as step5

            step1 --> step2
            step2 --> step3
            step3 --> step4
            step4 --> step5: Test erfolgreich
            step5 --> step1
            step5 --> step4
            step4 --> step3: Test fehlgeschlagen
            ]]>
        </code-block>

        <list>
            <li>
                <b>Test schreiben</b>: Bevor mit der Implementierung der neuen Komponente begonnen wird, werden im
                Unit-Test über Assertions die Anforderungen an die zu implementierende Komponente definiert.
            </li>
            <li>
                <b>Test ausführen</b>: Als Nächstes wird der Test ausgeführt, welcher zu Beginn fehlschlagen wird (da
                die geforderte Funktionalität ja noch nicht implementiert wurde).
            </li>
            <li>
                <b>Komponente implementieren</b>: Im nächsten Schritt wird die Komponente mit dem Ziel implementiert,
                die Anforderungen des Tests zu erfüllen, sodass dieser bei erneuter Ausführung besteht.
            </li>
            <li>
                <b>Test erneut ausführen</b>: Ob die Anforderungen korrekt implementiert wurden, wird durch erneutes
                Ausführen des Tests überprüft. Erst wenn der Test erfolgreich ist, wird zum nächsten Schritt
                übergegangen. Schlägt der Test dagegen fehl, passen wird die Komponente entsprechend angepasst und ein
                neuer Testversuch wird gestartet.
            </li>
            <li>
                <b>Komponente optimieren</b>: Im nächsten Schritt der Iteration kann nun die Komponente optimiert werden
                (dies wird auch <b>Refactoring</b> genannt). Durch erneutes Ausführen des Tests kann dabei immer
                sichergestellt werden, dass durch die Optimierungen die eigentliche Funktionalität nicht beeinträchtigt
                wird.
            </li>
        </list>

        <p>
            Diese Abfolge von Schritten wird auch als »Red – Green – Refactor« bezeichnet, weil fehlgeschlagene Tests in
            vielen Tools rot und erfolgreiche Tests grün gekennzeichnet werden.
        </p>

        <note>
            <p><b>Modul, Unit, Komponente</b></p>

            <p>
                Die Begriffe Modul, Unit und Komponente werden im Zusammenhang mit dem Testen übrigens häufig synonym
                verwendet. Daher spricht man auch von Modultests, Unit-Tests oder Komponententests.
            </p>
        </note>
    </chapter>

    <chapter id="quellen" title="Quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836256971, "JavaScript - Das umfassende Handbuch", Philip Ackermann, 2018
        </tip>
    </chapter>
</topic>