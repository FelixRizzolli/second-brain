<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Testen" id="swe-pk-testen">
    <show-structure for="chapter,procedure" depth="2"/>

    <chapter title="Das Prinzip von automatisierten Tests" id="automatisiert">
        <code-block lang="mermaid">
            <![CDATA[
            stateDiagram-v2

            state "Zu testender Code (»System Under Test«)" as system {
                state "Zu testende Funktion" as system_function
            }

            state "Testender Code (»Unit-Test«)" as unittest {
                state "Testfall" as unittest_testfall {
                    state "1.) Aufruf einer Funktion" as unittest_testfall_aufruf
                    state "2.) Überprüfen des Rückgabewertes" as unittest_testfall_check
                }
            }

            state "Test erfolgreich" as test_ok
            state "Test fehlgeschlagen" as test_ko

            unittest_testfall_aufruf --> system_function
            system_function --> unittest_testfall_check
            unittest_testfall_check --> test_ok: Anforderungen erfüllt
            unittest_testfall_check --> test_ko: Anforderungen nicht erfüllt
            ]]>
        </code-block>

        <p>
            Die Idee von automatisierten Tests ist im Wesentlichen, dass man spezielle Programme (Testprogramme bzw.
            <b>Unit-Tests</b>) schreibt, welche den zu testenden Code aufrufen und die Ergebnisse des Codes überprüfen.
            Der zu testende Code kann eine einzelne Funktion sein, aber auch eine Kombination verschiedener Funktionen
            oder verschiedener Klassen und Objekte. Im Allgemeinen spricht man daher auch von einer <b>Class Under
            Test</b> oder, noch allgemeiner, von einem System Under Test. Die Überprüfungen innerhalb eines
            <b>Unit-Tests</b> nennt man auch <b>Assertions</b>. Ein Unit-Test besteht in der Regel zudem aus mehreren
            Testfällen (auch <b>Test-Cases</b> genannt).
        </p>

        <chapter title="Beispiel" id="automatisiert-beispiel">
            <code-block lang="mermaid">
                <![CDATA[
                stateDiagram-v2

                state "Zu testender Code (»System Under Test«)" as system {
                    state "function add(x, y) { return x + y; }" as system_function
                }

                state "Testender Code (»Unit-Test«)" as unittest {
                    state "Testfall" as unittest_testfall {
                        state "1.) let result = add(5, 6)" as unittest_testfall_aufruf
                        state "2.) result === 11" as unittest_testfall_check
                    }
                }

                state "Test erfolgreich" as test_ok
                state "Test fehlgeschlagen" as test_ko

                unittest_testfall_aufruf --> system_function
                system_function --> unittest_testfall_check
                unittest_testfall_check --> test_ok: Ja
                unittest_testfall_check --> test_ko: Nein
                ]]>
            </code-block>
            
            <p>
                Angenommen es wurde eine Funktion <code>add()</code> implementiert, welche zwei Zahlen addieren und das
                Ergebnis zurückgeben soll. Ein Unit-Test würde dann, diese Funktion aufrufen (beispielsweise mit den
                Argumenten 5 und 6) und prüfen, ob das tatsächliche Ergebnis dem erwarteten Ergebnis entspricht. Ist
                dies der Fall, ist der Test erfolgreich, andernfalls schlägt er fehl.
            </p>
            <p>
                Warum sollten überhaupt Unit-Tests geschrieben werden? Warum sollte man sich die Mühe machen und
                zusätzlichen Quelltext schreiben, der den anderen (den »richtigen«) Quelltext überprüft? Dafür gibt es
                mehrere Gründe:
            </p>
            
            <list>
                <li>
                    Über Tests wird sichergestellt, dass nachträgliche Änderungen am Code keine ungewollten
                    Nebenwirkungen haben. Treten solche nämlich auf, schlagen die entsprechenden Tests fehl.
                </li>
                <li>
                    Durchs Schreiben von Unit-Tests macht man sich auch generell mehr Gedanken über die Struktur des
                    Codes, weil man automatisch mehr darauf achtet, einfachen und leicht testbaren Code zu schreiben.
                    Dies wiederum hat in der Regel den positiven Nebeneffekt, dass der Code auch für andere leichter zu
                    verwenden und zu verstehen ist.
                </li>
            </list>
        </chapter>
    </chapter>

</topic>