<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="swe-pk-errorhandling"
       title="Fehler und Fehlerbehandlung (error handling)"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">
    <show-structure depth="2" for="chapter,procedure"/>

    <chapter id="warum_ist_software_fehlerhaft_" title="Warum ist Software fehlerhaft?">
        <p>
            Die Antwort ist einfach: Irren ist menschlich. Programme werden von Menschen geschrieben, und Menschen
            machen Fehler. Dies sind beispielsweise Denkfehler oder auch Flüchtigkeitsfehler. Software-Projekte sind oft
            sehr groß, kompliziert und unübersichtlich – viele Projekte bestehen aus mehreren Millionen Zeilen Coe! Dort
            verliert ein Entwickler leicht den Überblick und macht so Fehler. Bleiben diese unentdeckt, werde sie mit
            dem Programm an den Nutzer ausgeliefert und können dort zu unvorhergesehenen Problemen führen. Es gibt
            jedoch Techniken zur Vermeidung von Fehlern, die – richtig eingesetzt – die Anzahl an unentdeckten Mängeln
            reduzieren können.
        </p>

        <note>
            <p><b>Ausnahmen und Ausnahmebehandlung</b></p>

            <p>
                Häufig ist in der Software-Entwicklung alternativ zu dem Begriff auch von Ausnahmen die Rede, die
                Fehlerbehandlung nennt man häufig auch Ausnahmebehandlung.
            </p>
        </note>
    </chapter>

    <chapter id="bugs" title="Bugs">
        <p>
            Der Begriff Bug wird in der Informatik oft als Synonym für »Fehler« verwendet. Meistens benutzt man ihn, um
            zu sagen, dass etwas um Programm schiefgeht, was funktionieren sollte. Für die Vermeidung und Behebung von
            Fehlern ist es von großem Vorteil, präzisere Begriffe zu verwenden:
        </p>

        <list>
            <li>
                Ein Fehler beginnt immer mit einer <b>Fehlerhandlung</b>. Diese beschreibt die (meist menschliche)
                Ursache für den Fehler.
            </li>
            <li>
                Schließlich ist der Fehler im Code, und es kommt während einer Programmausführung zu einem
                <b>Fehlerzustand</b> des Systems.
            </li>
            <li>
                Schließlich wird eine <b>Fehlerwirkung</b> erreicht, wenn der Fehler sich nach außen zeigt,
                beispielsweise durch die Ausgabe eines falschen Ergebnisses oder durch einen Absturz.
            </li>
            <li>
                Das Suchen und Beheben von Fehlern bezeichnet man als <b>Debugging</b>.
            </li>
        </list>

        <note>
            Der Begriff Bug (aus dem Englischen für Insekt) geht darauf zurück, dass einer der ersten Fehler in einem
            Computerprogramm laut Erzählungen tatsächlich auf ein (echtes) Insekt zurückzuführen war.
        </note>
    </chapter>

    <chapter id="fehlerarten" title="Verschiedene Fehlerarten">
        <p>
            Fehler lassen sich meist mehreren Kategorien zuordnen. Diese Unterteilung nehmen wir vor, um die jeweiligen
            Fehler frühzeitig zu erkennen und unter Anwendung den richtigen Werkzeugen zu beheben oder sogar zu
            verhindern.
        </p>

        <chapter id="fehlerarten-syntax" title="Kompilierungsfehler bzw. Syntaxfehler">
            <p>
                Der erste Zeitpunkt, bei dem Fehler auftreten können, ist, wenn der Computer das Programm kompiliert,
                das heißt aus der Programmiersprache in Maschinencode übersetzt. Versteht der Compiler, also das
                Programm, das den Code übersetzt, diesen nicht, so tritt ein Kompilierungsfehler auf.
                Kompilierungsfehler entstehen aus Verletzung der Notationsregeln der verwendeten Programmiersprache.
                Diese Verletzung kann zum Beispiel ein Syntaxfehler sein, gewissermaßen eine falsche Verwendung der
                Grammatik der Programmiersprache. Bei Sprachen, deren Notationsregeln sehr streng sind, wird beim
                Kompilieren unter anderem festgestellt, wenn unbekannte Befehle verwendet werden, quasi ein Vokal, die
                der Computer noch nicht kennt.
            </p>

            <chapter collapsible="true" id="fehlerarten-syntax-beispiel" title="Beispiel mit Kompilierungsfehler">
                <chapter id="fehlerarten-syntax-beispiel-mitfehler"
                         title="Berechnung der Fläche eines Kreises (mit Fehler)">
                    <code-block>
                        Eingabe: Der Wert kreisRadius
                        Ausgabe: Die Fläche des Kreises
                        1: Return 3.14159 * radius * radius
                    </code-block>

                    <p>
                        Das Programm soll zu einem gegebenen Kreisradius den entsprechenden Flächeninhalt des Kreises
                        berechnen. Dabei hat der Programmierer statt des konkreten Variablennamens
                        <code>kreisRadius</code> den Namen radius verwendet. Wird dieser Algorithmus als Programm in der
                        Programmiersprache Java kompiliert, erhält man die Fehlermeldung <code>»Error, cannot find
                        symbol radius«</code>, da die verwendete Variable radius nicht existiert.
                    </p>
                </chapter>

                <chapter id="fehlerarten-syntax-beispiel-ohnefehler"
                         title="Berechnung der Fläche eines Kreises (Korrektur)">
                    <code-block>
                        Eingabe: Der Wert kreisRadius
                        Ausgabe: Die Fläche des Kreises
                        1: Return 3.14159 * kreisRadius * kreisRadius
                    </code-block>

                    <p>
                        Solche Fehler werden vom Compiler erkannt, da ihm nicht klar ist, was in der jeweiligen Zeile zu
                        tun ist. Die Fehlermeldung enthält Details, die dem Entwickler helfen, den Fehler im Code zu
                        finden und zu beheben. Weil man während der Entwicklung eines Programms oft kompiliert, fallen
                        diese Fehler schnell auf und sind meist leicht zu beheben. Einige Entwicklungsumgebung weisen
                        zudem auf solche Fehler schon während des Programmierens hin und bieten eine schnelle Behebung
                        an. Daher schaffen es diese Fehler selten in ein ausgeliefertes Programm.
                    </p>
                </chapter>
            </chapter>
        </chapter>

        <chapter id="fehlerarten-laufzeit" title="Laufzeitfehler">
            <p>
                Laufzeitfehler treten bei der Ausführung eines Programms auf und führen zum Absturz der Software. Sie
                werden meist durch bestimmte, unerwartete Eingaben ausgelöst.
            </p>
            <p>
                Laufzeitfehler sind oft schwer zu entdecken, da sie meist nicht bei jeder Ausführung des
                Programms, sondern nur bei manchen Eingaben auftreten. Zudem kann es sehr aufwendig und schwer
                sein, die Ursache des Fehlers zu finden und zu beheben, denn ein Fehler in einer Codezeile
                erzeugt potenziell zunächst nur ein falsches Zwischenergebnis, das erst an späterer Stelle der
                Ausführung zu einem beobachtbaren Fehlverhalten des Programms führt.
            </p>

            <chapter collapsible="true" id="fehlerarten-laufzeit-beispiel" title="Beispiel mit Laufzeitfehler">
                <code-block>
                    Eingabe: Die Werte distanz und zeit
                    Ausgabe: Die Geschwindigkeit
                    1: Return distanz / zeit
                </code-block>

                <p>
                    Die Funktion soll aus einer zurückgelegten Strecke und der dafür benötigten Zeit die
                    Geschwindigkeit berechnen. Wenn nun jedoch als Zeit der Wert 0 angegeben wird, so wird versucht,
                    durch null zu teilen, und das Programm stürzt ab. Je nach Einsatzgebiet der Software kann ein
                    solcher Absturz fatal sein: In kritischen Systemen wie Flugzeugen führt er möglicherweise zum
                    wortwörtlichen Absturz.
                </p>
            </chapter>
        </chapter>

        <chapter id="fehlerarten-logik" title="Logische Fehler">
            <p>
                Logische Fehler (manchmal auch Denkfehler genannt) sind falsche Überlegungen in der konkreten
                Problemlösung des Programmierers. Ist der Fehler gefunden, so ist er oftmals einfach zu beheben. Solche
                Fehler lassen sich meist durch das Durchrechnen von Beispielwerten finden. Im Allgemeinen ist das Finden
                des logischen Fehlers allerdings gerade der schwierige Schritt, da man feststellen muss, dass eine
                getroffene Annahme falsch war.
            </p>

            <chapter collapsible="true" id="fehlerarten-logik-beispiel" title="Beispiel mit Laufzeitfehler">
                <chapter id="fehlerarten-logik-beispiel-mitfehler"
                         title="Berechnung der Fläche eines Kreises (mit Fehler)">
                    <code-block>
                        Eingabe: Die Anzahl Personen n
                        Ausgabe: Die Anzahl Handschläge zwischen allen Personen
                        1: Return n * (n-1)
                    </code-block>

                    <p>
                        Dieses Programm soll berechnen, wie viele Handschläge es zwischen <code>n</code> Personen gibt,
                        wenn jede Person jeder anderen die Hand gibt. Die Argumentation des Programmierers hier lautet:
                        Es gibt <code>n</code> Personen, und jeder schüttelt jedem anderen, also <code>n-1</code>
                        Personen, die Hand. Daher müsste es ja <code>n*(n-1)</code> viele Handschläge geben. Dies ist
                        jedoch falsch, wie schon am Beispiel von <code>n=2</code> erkennbar ist: Der Algorithmus
                        berechnet <code>2</code> als Ergebnis, während tatsächlich nur ein Handschlag stattfindet. Der
                        Denkfehler besteht darin, dass wir bei der Berechnung <code>n*(n-1)</code> jeden Handschlag
                        doppelt zählen, nämlich einmal für jede beteiligte Person. Teilen wir das Ergebnis noch durch
                        <code>2</code> erhalten wir den korrekten Algorithmus:
                    </p>
                </chapter>
                <chapter id="fehlerarten-logik-beispiel-ohnefehler"
                         title="Berechnung der Fläche eines Kreises (Korrektur)">
                    <code-block>
                        Eingabe: Die Anzahl Personen n
                        Ausgabe: Die Anzahl Handschläge zwischen allen Personen
                        1: Return n * (n-1) / 2
                    </code-block>
                </chapter>
            </chapter>
        </chapter>

        <chapter id="fehlerarten-design" title="Designfehler">
            <p>
                Designfehler haben ihren Ursprung ähnlich wie logische Fehler in der Idee der Problemlösung, nicht in
                einem Fehler der Umsetzung. Jedoch beziehen sich logische Fehler meist nur auf wenige Codezeilen oder
                Funktionen, während Designfehler Planung und Entwurf einer Lösung betreffen, die für den Anwendungszweck
                nicht oder nicht mehr geeignet ist.
            </p>

            <chapter collapsible="true" id="fehlerarten-design-beispiel" title="Beispiel mit Designfehler">
                <code-block lang="plantuml">
                    @startuml
                    Alice -> Vidio: Anruf starten
                    Vidio -> Bob: weiterleiten
                    Bob -> Vidio: Anruf annehmen
                    Vidio -> Alice: weiterleiten

                    group wiederhole
                    Alice -> Vidio: Audio + Video von Alice
                    Vidio -> Bob: Audio + Video von Alice
                    Bob -> Vidio: Audio + Video von Bob
                    Vidio -> Alice: Audio + Video von Bob
                    end
                    @enduml
                </code-block>

                <p>
                    In diesem Beispiel wird ein Designfehler in einer fiktiven Live-Videochat-Plattform namens »Vidio«
                    dargestellt. Auf ihr können sich Nutzer wie Alice und Bob über Videochat miteinander unterhalten.
                    Sämtliche Videodaten werden über den Dienst gesendet. Konkret sendet Alice an Vidio die Nachricht,
                    dass sie Bob anrufen möchte. Daraufhin kontaktiert Vidio Bob. Dieser teilt Vidio mit, dass er den
                    Anruf annimmt. Für den Anruf sendet nun Alice und Bob ihre Audio- und Videodaten an Vidio, das sie
                    an Gesprächspartner weiterleitet.
                </p>
                <p>
                    Diese Struktur kat diverse Vorteile. Beispielsweise könnte der Computer von Alice ohne Vidio gar
                    nicht direkt den Computer von Bob kontaktieren, da Alice Bobs IP-Adresse nicht kennt. Vidio hat
                    diese Informationen und kann so der Vermittler für beide sein. Für wenige Nutzer mag diese Struktur
                    funktionieren. Allerdings leitet Vidio viele Daten einfach nur weiter und scheint fast überflüssig
                    zu sein. Tatsächlich entsteht durch diesen Umweg ein sehr großes Datenvolumen seitens Vidio: Weil
                    Vidio alle Anrufe vermittelt, muss der Dienst auch die Video- und Audiodaten aller Nutzer
                    verarbeiten. Dadurch lässt sich der Dienst nicht problemlos auf eine größere Nutzerzahl erweitern.
                    Je mehr Nutzer die Videoplattform hat, desto mehr Videodaten muss Vidio verarbeiten können.
                    Eigentlich wird Vidio hier nur für den ersten Schritt der Kontaktaufnahme benötigt: Alice sieht,
                    dass Bob online ist, und startet den Anrufversuch; Vidio stellt dann die Verbindung zwischen den
                    beiden her. Zu diesem Zeitpunkt kann Vidio den beiden gegenseitig ihre IP-Adressen mitteilen, und
                    Alice und Bob können ihren Videochat in direkter Verbindung führen.
                </p>

                <code-block lang="plantuml">
                    @startuml
                    Alice -> Vidio: Anruf starten
                    Vidio -> Bob: weiterleiten
                    Bob -> Vidio: Anruf annehmen
                    Vidio -> Alice: weiterleiten

                    group wiederhole
                    Alice -> Bob: Audio + Video von Alice
                    Bob -> Alice: Audio + Video von Bob
                    end
                    @enduml
                </code-block>

                <p>
                    Weil Vidio nun nicht mehr sämtliche Audio- und Videodaten verarbeiten muss, ist der Dienst von der
                    Hauptlast befreit und deutlich besser auf eine große Nutzerzahl erweiterbar. Auf dem Papier sieht
                    das Beheben dieses Problems einfach aus. Aber in der Realität ist dieser Designfehler schon tief in
                    der Software-Architektur verwurzelt und bedarf einer Überarbeitung großer Teile des Codes. Oftmals
                    werden Designfehler erst sehr spät im Entwicklungsprozesses entdeckt, sodass das Beheben aufwendig
                    und teuer ist.
                </p>
                <p>
                    Die Wahrscheinlichkeit solcher Designfehler können durch eine gründliche Analyse der Anforderungen
                    an die Software verringern. Außerdem wird durch kluge Strukturierung des Programmcodes nachträgliche
                    Änderungen erleichtert.
                </p>
            </chapter>
        </chapter>

        <chapter id="fehlerarten-umgebung" title="Umgebungsfehler">
            <p>
                Auch wenn ein Programm für sich korrekt ist, kann es trotzdem zu Fehlern bei der Ausführung kommen. Dies
                passiert, wenn die Umgebung des Programmes sich unerwartet verhält: Beispiele für solche Umgebungsfehler
                sind Hardware-Fehler wie kaputte Festplatten, instabile Netzwerkverbindungen, defekte Sensoren oder
                fehlerhafte Eingabedaten. Wenn etwa eine Wetterstation fehlerhafte Messdaten aufgrund eines kaputten
                Thermometers erhält, so sind die daraus resultierenden Berechnungen falsch, egal, ob der Algorithmus
                dafür korrekt ist.
            </p>
            <p>
                Die Fehlerbehebung besteht hier im Korrigierten der Umgebung, im Beispiel muss das Thermometer
                ausgetauscht werden. Dies ist jedoch meist nicht Aufgabe der Softwareentwickler. Stattdessen liegt bei
                Informatikern der Fokus auf dem Entwickeln von <b>fehlertoleranten Systemen</b>, die trotz fehlerhafter
                Umgebung funktionstüchtig sind. Das Erkennen und Vermeiden dieser Fehler ist schwierig, und der Ansatz
                variiert je nach Umgebung. Eingabedaten, die stark vom erwarteten Wert abweichen (z.B. 100 °C beim
                Thermometer der Wetterstation), können oftmals erkannt werden. Sind Messdaten jedoch falsch, aber
                realistisch möglich, so kann eine Software die Abweichung nur durch weitere Kontrollgeräte bemerken.
                Kritische Vorgänge, wie zum Beispiel Berechnungen eines Autopiloten im Flugzeug, werden auf
                verschiedenen Geräten gleichzeitig ausgeführt, um so Hardware-Fehler zu erkennen und darauf reagieren zu
                können.
            </p>
        </chapter>

        <chapter id="fehlerarten-kommunikation" title="Kommunikationsfehler">
            <p>
                Programme werden in Softwareprojekten von Menschen für Menschen entwickelt. Jedoch kann es hier zu
                verschiedenen Problemen kommen. Sind sich mehrere Entwickler, die am selben Projekt arbeiten, über die
                Funktionsweise der Software uneinig, entwickeln sie nicht zusammenpassende Teile. Für eine erfolgreiche
                Durchführung des Softwareprojekts müssen also alle Beteiligten ein gemeinsames Ziel verfolgen und ein
                gemeinsames Verständnis über Inhalt und Verlauf des Projekts haben. Solche Kommunikationsfehler
                passieren auch im Alltag häufig, doch selten sind sie so fatal wie im Fall der Mars-Sonde MCO: Diese
                verbrannte in der Atmosphäre des Mars, weil die entwickelnden Teams der Firmen NASA und Lockheed Martin
                verschieden Maßeinheiten (metrisch und imperial) bei ihren Berechnungen verwendeten und dadurch der
                Ladeanflug missglückte.
            </p>
            <p>
                Es ist nicht einfach, solche Kommunikationsprobleme zu bemerken, geschweige denn sie zu vermeiden. Eine
                wichtige Rolle dabei spielt die Größe der beteiligten Teams. Je mehr Personen an einem Projekt beteiligt
                sind, desto komplexer wird die Kommunikation, und das Risiko von Missverständnissen ist höher. Eine
                mögliche Lösung ist es deshalb, kleine Teams an Teilproblemen arbeiten zu lassen und für eine
                regelmäßige und gute Kommunikation zwischen den Teams zu sorgen. Auch bei der Kommunikation mit dem
                Kunden können Fehler entstehen. Ein Entwickler, der einen Kunden missversteht, entwickelt möglicherweise
                ein Programm, das von diesem so nicht gewünscht war. Missverständnisse können oft durch Nachfragen
                bemerkt und geklärt werden.
            </p>
        </chapter>
    </chapter>

    <chapter id="techniken" title="Techniken zur Fehlervermeidung">
        <p>
            Zur Vermeidung von Fehlern gibt es eine Vielzahl von Praktiken und Werkzeugen, deren korrekte Benutzung
            helfen kann, korrekte und zuverlässige Programme zu schreiben.
        </p>

        <chapter id="techniken-testen" title="Testen">
            <p>
                Testen im Rahmen von Software-Entwicklung ist vergleichbar mit dem Testen von Technik in der echten
                Welt: Fahrstühle durchlaufen Belastungstests, Autos werden testweise gefahren. Das Ziel der Tests ist
                es, die spätere Verwendung und Umgebung zu simulieren, um so Aufschluss über die Qualität des
                Testobjekts zu bekommen. Aber wie sehen solche Tests für Software aus?
            </p>
            <p>
                Wir vergleichen das Verhalten des Programms auf bestimmten Eingaben mit einem Wunschverhalten,
                insbesondere überprüfen wir Zustände und Ausgaben des Programms.
            </p>

            <chapter collapsible="true" id="techniken-testen-beispiel" title="Beispiel: Tachenrechner testen">
                <p>
                    Angenommen es soll ein Taschenrechner auf seine Korrektheit überprüft werden. Es ist klar, dass es
                    unmöglich sein wird, alle erlaubten Eingaben auszuprobieren. Aber wir können dennoch versuchen, den
                    Taschenrechner strukturiert zu testen. Wir führen typischerweise einzelne, voneinander unabhängige
                    Tests auf dem Taschenrechner aus. Jeder dieser Tests besteht darin, dass wir eine bestimmte Rechnung
                    eingeben und Zwischenergebnisse sowie das Endergebnis des Taschenrechners mit manuell berechneten
                    Werten vergleichen. Einige der Tests sind sehr einfach und überprüfen nur einzelne Operationen wie
                    Multiplikation der Addition von zwei Zahlen. Andere wiederum verwenden eine Vielzahl von Operationen
                    oder testen zusätzliche Funktionen wie das Wechseln von Rechen-Modi.
                </p>
                <p>
                    Damit wir diese Überprüfung nicht per Hand durchführen müssen, können wir die Werkzeuge nutzen, die
                    uns von fast allen Programmiersprachen zum Ausführen von Tests zur Verfügung gestellt werden:
                    <b>Unittests</b>
                </p>
            </chapter>

            <note>
                <p><b>Unittests</b></p>

                <p>
                    Unittests werden dafür verwendet kleine Teile einer Software zu testen. Die Ausführung dieser Tests
                    kann nun manuell oder automatisch ausgelöst werden. Verändert ein Entwickler auf seinem Computer das
                    Programm, so kann er anschließend die Korrektheit des Programms mithilfe der Tests ohne großen
                    Aufwand überprüfen und sich danach zumindest sicher sein, dass es sich auf diesen Eingaben korrekt
                    verhält. Die Tests können auch automatisiert immer dann ausgeführt werden, wenn ein Entwickler
                    Änderungen in die Quellcodeverwaltung hochlädt.
                </p>
            </note>

            <p>
                Auch das Durchführen großer Tests, die umfangreiche Teile einer Software überprüfen, kann auf ähnlicher
                Weise erfolgen. Dabei wird anhand von Integrationstests sichergestellt, dass die verschiedenen Teile
                eines Programms korrekt miteinander interagieren. Am Beispiel des Taschenrechners stellt die Kombination
                verschiedener Operationen einen Integrationstest dar.
            </p>
            <p>
                Wie steht es jedoch mit dem Testen von Software-Anwendungen, die Nutzerinteraktionen wie Mausklicks oder
                den Gebrauch in anderen Umgebungen erfordern, beispielsweise das Aufnehmen von Fotos mit der Kamera?
                Teilweise sind auch diese simulierbar, aber mit steigenden Anforderungen wird es immer schwerer, die
                Tests zu programmieren. In einem Computerspiel muss zum Beispiel der komplette Spielablauf überprüft
                werden, inklusive aller Dialoge und möglichen Interaktionen mit der Spielewelt. Dafür werden oft
                Menschen beauftragt, das Programm möglichst umfangreich zu testen.
            </p>
        </chapter>

        <chapter id="techniken-abtesting" title="A/B-Testing">
            <p>
                Ist ein Programm beriets ausgeliefert und gibt es Änderungen, die getestet werden müssen, so ist die
                Praxis des A/B-Testens üblich. Dabei werden zwei oder mehr Versionen der Software (Version A und Version
                B) an Endkunden ausgeliefert. Üblicherweise erhält dabei eine kleine Gruppe der Kunden bereits eine
                Version mit neuen oder überarbeiteten Inhalten, während die übrigen Kunden als Kontrollgruppe dienen und
                weiterhin die alte Version verwenden. Auf diese Weise kann nicht nur das Verhalten der Nutzer der neuen
                Softwareversion untersucht werden, sondern es können auch viele Fehler gefunden werden, bevor die
                Software an alle Kunden verteilt wird. Fehler werden zwar so nicht vermieden, doch ihr Schaden wird
                stark eingegrenzt.
            </p>
            <p>
                Je größer die Kundengruppe, desto effektiver ist diese Praktik: Facebook hat über eine Milliarde Nutzer
                und nutzt regelmäßig A/B-Testing, um neue Funktionalitäten an einigen Tausend oder Millionen Nutzern
                auszuprobieren, bevor sie für alle Nutzer zur Verfügung gestellt werden.
            </p>
        </chapter>

        <chapter id="techniken-programmierstiel" title="Programmierstiel">
            <p>
                Durch Festlegen von Regeln (sogenannten <b>Coding Conventions</b>) kann der Programmierstil mehrerer
                Personen vereinheitlicht werden. Diese Regeln betreffen unter anderem die Benennung von Variablen und
                die Strukturierung des Codes.
            </p>
            <p>
                Das Vereinheitlichen des Stils hat einen einfachen aber wichtigen Zweck: Unabhängig davon, wer welchen
                Teil des Codes verfasst hat, ist dieser für alle Entwickler verständlicher und besser wartbarer, als
                wenn jeder nach seinen ganz eigenen Vorlieben programmiert. Neue Mitarbeiter können sich außerdem
                schneller in den existierenden Code einarbeiten, und Fehler können zügig gefunden und behoben werden.
                Dies ist vergleichbar mit der Organisation von Ordnern in einem Regal: Wenn sich alle darauf einigen,
                wie diese beschriftet uns sortiert werden sollen, so finden Mitarbeiter problemlos im Regal eines
                Kollegen etwas, ohne zunächst deren persönliche Anordnung verstehen zu müssen.
            </p>
        </chapter>

        <chapter id="techniken-pairprogramming" title="Pair Programming">
            <p>
                Pair Programming bedeutet, zu zweit zu programmieren. Das Prinzip ist vergleichbar mit dem Autofahren:
                Es gibt einen Fahrer, der die Geräte bedient, und einen unterstützenden Beifahrer, der den Überblick
                behält und auf die Route achtet. Der Fahrer sitzt am Computer und programmiert, während der Beifahrer
                danebensitzt und den Fahrer unterstützt. Der Beifahrer kontrolliert den geschriebenen Code und spricht
                gefundene Probleme an. Die Rollen werden regelmäßig getauscht. Warum führt dies zu weniger Fehlern? Vier
                Augen sehen mehr als zwei. Insbesondere der Beifahrer kann gut den Überblick behalten und auf versteckte
                Fehlerquellen achten, die der Fahrer nicht bemerkt. Auf diese Weise werden Fehler früh erkannt und
                behoben. Pair Programming hat eine Vielzahl weiterer Vorteile: Insgesamt hat der geschriebene Code eine
                bessere Qualität, und es findet ein guter Wissensaustausch zwischen den beiden Programmierern statt.
                Dieser Austausch kenn spätere Kommunikationsfehler verhindern.
            </p>
        </chapter>

        <chapter id="techniken-codereview" title="Code Review">
            <p>
                Code Review ist ein formaler Prozess, bei dem geschriebener Code von anderen Entwicklern überprüft wird,
                bevor er in die Software aufgenommen wird. Ähnlich wie beim Pair Programming ist hier die Motivation,
                dass mithilfe der Kontrolle durch weitere Personen mehr Fehler gefunden und anschließend behoben werden
                können. Je nach Umfang von Projekt und Team können noch genauere Praktiken durchgeführt werden. Es kann
                beispielsweise sinnvoll sein, dass Code möglichst von einem Entwickler aus einem anderen Team überprüft
                wird, damit dieser den Code kritischer und objektiver betrachtet als ein Teamkollege des Verfassers.
            </p>
        </chapter>
    </chapter>

    <chapter id="laufzeitfehler" title="Behandlung von Laufzeitfehlern">
        <chapter id="laufzeitfehler-trycatch" title="Fehler mit dem try-catch-finally-Statement abfangen">
            <p>
                Über das Schlüsselwort <code>try</code> leitet man den Codeblock ein, der potenziell Fehler werfen
                könnte. Folglich wird mit dem Schlüsselwort <code>catch</code> der Codeblock definiert, der ausgeführt
                werden soll, wenn ein Fehler auftritt. Hier wird auch meistens als eine Art Funktionsparameter ein
                Fehlerobjekt definiert, auf das man anschließend im <code>catch</code>-Codeblock zugreifen kann. In
                einigen Fällen kann es sein, dass man unabhängig davon, ob ein Fehler auftritt oder nicht, nach
                Ausführung des fehlerproduzierenden Codes spezielle Anweisungen ausführen möchte. Dieser Code wird in
                einem Codeblock nach dem <code>finally</code>-Schlüsselwort platziert. Alle Anweisungen, die in diesem
                <code>finally</code>-Block stehen, werden in jedem Fall ausgeführt: wenn ein Fehler auftritt und, auch,
                wenn kein Fehler auftritt.
            </p>

            <code-block lang="mermaid">
                <![CDATA[
                stateDiagram-v2
                [*] --> try

                state try {
                    state if_state <<choice>>
                    Fehler --> if_state
                        if_state --> Fehlerbedandlung: ja
                        if_state --> c1: nein
                }

                state catch(error) {
                   Fehlerbehandlung --> c1
                }

                state finally {
                    state "..." as c1
                }
                ]]>
            </code-block>

            <p>
                Es gibt in den meisten Programmiersprachen insgesamt drei Möglichkeiten von
                <code>try</code>-Anweisungen:
            </p>

            <list>
                <li>
                    Verwendung von <code>try</code> in Kombination mit catch: Fehler produzierender Code wird
                    aufgerufen, und eventuelle Fehler werden gefangen.
                </li>
                <li>
                    Verwendung von <code>try</code> in Kombination mit <code>finally</code>: Fehlerproduzierender Code
                    wird ausgeführt, eventuelle Fehler werden nicht gefangen, aber in jedem Fall die Anweisungen im
                    <code>finally</code>-Block ausgeführt.
                </li>
                <li>
                    Verwendung von <code>try</code> in Kombination mit catch und <code>finally</code>:
                    Fehlerproduzierender Code wird aufgerufen, eventuelle Fehler werden gefangen und in jedem Fall die
                    Anweisungen im <code>finally</code>-Block ausgeführt.
                </li>
            </list>

            <p>
                In einigen Programmiersprachen wie Java können mehrere <code>catch</code>-Blöcke verwendet werden, um
                verschiedene Typen von Fehlern abzufangen und diese unterschiedlich zu behandeln.
            </p>
        </chapter>

        <chapter id="laufzeitfehler-throw" title="Fehler mit dem throw-Statement auslösen">
            <p>
                Um einen Fehler zu fangen, muss dieser Fehler natürlich auch irgendwo ausgelöst und geworfen werden.
                Standard-Methoden besitzen eine Implementierung, welche bei Fehler diese wirft. In den meisten
                Programmiersprachen hat man auch selbst die Möglichkeit, innerhalb einer Funktion selbst Fehler zu
                werfen. Um dies zu tun, wird das Schlüsselwort <code>throw</code> verwendet. Hinter dem Schlüsselwort
                <code>throw</code> schreibt man das Fehlerobjekt, welches den jeweiligen Fehler repräsentiert. Trifft
                das Programm auf ein <code>throw</code>, wird dadurch aus der jeweiligen Funktion herausgesprungen. Die
                in der Funktion nachfolgenden Anweisungen werden also nicht mehr ausgeführt.
            </p>

            <code-block lang="javascript">
                console.log(checkAge(22)); // true
                console.log(checkAge("Max Mustermann")); // TypeError: Alter muss eine Zahl sein

                function checkAge(age) {
                if(isNaN(parseFloat(age))) {
                throw new TypeError('Alter muss eine Zahl sein.');
                } else if (age &lt; 0) {
                throw new RangeError('Alter darf nicht negativ sein.');
                }
                return true; // Im Fehlerfall wird diese Anweisung nicht mehr ausgeführt.
                }

                try {
                console.log(checkAge(-22)); // keine Ausgabe
                } catch(error) {
                console.log(error); // RangeError: Alter darf nicht negativ sein
                }
            </code-block>

            <code-block lang="mermaid">
                <![CDATA[
                stateDiagram-v2
                [*] --> try

                state try {
                    state "checkAge(-22);" as check
                    check --> c1
                }

                state "function checkAge(age)" as fun {
                    state "..." as c1
                    state "throw new RangeError(...);" as throw
                    state "..." as c2

                    c1 --> throw
                    throw --> c2
                    c2 --> Fehlerbehandlung
                }

                state catch(error) {
                   Fehlerbehandlung
                }
                ]]>
            </code-block>

            <note>
                In den meisten Programmiersprachen können verschiedene Fehlertypen verwendet werden. Der Fehler, der
                geworfen wird, sollte im Idealfall Rückschluss auf die Art des Fehlers ermöglichen. Im obigen
                JavaScript-Beispiel wird <code>TypeError</code> für einen falschen Datentyp und <code>RangeError</code>
                für eine ungültige Zahl verwendet.
            </note>
        </chapter>

        <chapter id="laufzeitfehler-stack" title="Fehler und der Funktionsaufruf-Stack">
            <p>
                Wird innerhalb einer Funktion ein Fehler geworfen, so springt das Programm aus dieser Funktion heraus.
                Wird der Fehler in der Funktion, zu der das Programm zurückspringt, nicht gefangen, so springt das
                Programm auch aus dieser Funktion heraus. Wird der Fehler auch in der nächsten (bzw. genauer: in der im
                Funktionsaufruf-Stack vorherigen) Funktion nicht gefangen, springt das Programm auch hier heraus. Dies
                wird so lange gemacht, bis der Fehler gefangen wird.
            </p>
            <p>
                Hier ein Beispiel mit JavaScript:
            </p>

            <img alt="Funktionsaufruf-Stack" src="swe-pk-fehlerbehandlung-funktionsaufrufstack.png"/>

            <p>
                Die Frage, wie und an welcher Stelle im Code man Fehler am besten behandelt, lässt sich pauschal nicht
                beantworten, da die Art und Weise der Fehlerbehandlung stark von der Art des Fehlers abhängt.
                Prinzipiell kann man sich aber merken, dass Fehler nur an den Nutzer weitergeleitet werden sollen, wen
                dieser mit den Fehlerinformationen auch etwas anfangen kann bzw. im Idealfall sogar weiß, was zu tun
                ist, damit der Fehler nicht noch einmal auftritt.
            </p>
        </chapter>

        <chapter id="laufzeitfehler-weiterleiten" title="Fehler an den Nutzer weiterleiten, oder nicht?">
            <p>
                Fehler auf die der Nutzer reagieren bzw. die der Nutzer umgehen kann, sollten auch an den Nutzer
                weitergeleitet werden. Fehler dagegen, mit denen der Nutzer ohnehin nichts anfangen kann, sollten
                innerhalb des Programms versucht werden zu lösen oder zu loggen.
            </p>
        </chapter>
    </chapter>

    <chapter id="debuggen" title="Den Code debuggen">
        <p>
            Mithilfe eines Debuggers ist es möglich ein Programm an einer bestimmten Stelle zu pausieren und dann ab
            dieser Stelle Schritt für Schritt die folgenden Anweisungen durchzugehen: sich jeweils die Variablenlegung
            anzuschauen und vieles mehr. Damit lässt sich der Ablauf eines Programmes besonders gut nachvollziehen.
        </p>
    </chapter>

    <chapter id="quellen" title="Quellen">
        <tip>
            <b>(BUCH)</b>
            978-3-8362-4406-0, "Fit fürs Studium – Informatik", Philipp Fischbeck &amp; Arne Boockmeyer &amp; Stefan
            Neubert, 2019
        </tip>
        <tip>
            <b>(BUCH)</b>
            978-3836256971, "JavaScript - Das umfassende Handbuch", Philip Ackermann, 2018
        </tip>
    </chapter>
</topic>