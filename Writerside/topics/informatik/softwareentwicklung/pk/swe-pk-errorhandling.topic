<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Fehler und Fehlerbehandlung (error handling)" id="swe-pk-errorhandling">
    <show-structure for="chapter,procedure" depth="2"/>

    <chapter title="Warum ist Software fehlerhaft?" id="warum_ist_software_fehlerhaft_">
        <p>
            Die Antwort ist einfach: Irren ist menschlich. Programme werden von Menschen geschrieben, und Menschen
            machen Fehler. Dies sind beispielsweise Denkfehler oder auch Flüchtigkeitsfehler. Software-Projekte sind oft
            sehr groß, kompliziert und unübersichtlich – viele Projekte bestehen aus mehreren Millionen Zeilen Coe! Dort
            verliert ein Entwickler leicht den Überblick und macht so Fehler. Bleiben diese unentdeckt, werde sie mit
            dem Programm an den Nutzer ausgeliefert und können dort zu unvorhergesehenen Problemen führen. Es gibt
            jedoch Techniken zur Vermeidung von Fehlern, die – richtig eingesetzt – die Anzahl an unentdeckten Mängeln
            reduzieren können.
        </p>

        <note>
            <p><b>Ausnahmen und Ausnahmebehandlung</b></p>

            <p>
                Häufig ist in der Software-Entwicklung alternativ zu dem Begriff auch von Ausnahmen die Rede, die
                Fehlerbehandlung nennt man häufig auch Ausnahmebehandlung.
            </p>
        </note>
    </chapter>

    <chapter title="Bugs" id="bugs">

    </chapter>

    <chapter title="Verschiedene Fehlerarten" id="fehlerarten">

        <chapter title="Kompilierungsfehler bzw. Syntaxfehler" id="fehlerarten-syntax">

        </chapter>

        <chapter title="Laufzeitfehler" id="fehlerarten-laufzeit">

        </chapter>

        <chapter title="Logische Fehler" id="fehlerarten-logik">

        </chapter>

        <chapter title="Designfehler" id="fehlerarten-design">

        </chapter>

        <chapter title="Umgebungsfehler" id="fehlerarten-umgebung">

        </chapter>

        <chapter title="Kommunikationsfehler" id="fehlerarten-kommunikation">

        </chapter>
    </chapter>

    <chapter title="Techniken zur Fehlervermeidung" id="techniken">

        <chapter title="Testen" id="techniken-testen">

        </chapter>

        <chapter title="A/B Testing" id="techniken-abtesting">

        </chapter>

        <chapter title="Programmierstiel" id="techniken-programmierstiel">

        </chapter>

        <chapter title="Pair Programming" id="techniken-pairprogramming">

        </chapter>

        <chapter title="Code Review" id="techniken-codereview">

        </chapter>
    </chapter>

    <chapter title="Behandlung von Laufzeitfehlern" id="laufzeitfehler">

        <chapter title="Fehler mit dem try-catch-finally-Statement abfangen" id="laufzeitfehler-trycatch">

        </chapter>

        <chapter title="Fehler mit dem throw-Statement auslösen" id="laufzeitfehler-throw">

        </chapter>

        <chapter title="Fehler und der Funktionsaufruf-Stack" id="laufzeitfehler-stack">

        </chapter>

        <chapter title="Fehler an den Nutzer weiterleiten oder nicht?" id="laufzeitfehler-weiterleiten">

        </chapter>
    </chapter>

    <chapter title="Den Code debuggen" id="debuggen">

    </chapter>

    <chapter title="Quellen" id="quellen">
        <tip>
            <b>(BUCH)</b>
            978-3-8362-4406-0, "Fit fürs Studium – Informatik", Philipp Fischbeck &amp; Arne Boockmeyer &amp; Stefan Neubert, 2019
        </tip>
        <tip>
            <b>(BUCH)</b>
            978-3836256971, "JavaScript - Das umfassende Handbuch", Philip Ackermann, 2018
        </tip>
    </chapter>
</topic>