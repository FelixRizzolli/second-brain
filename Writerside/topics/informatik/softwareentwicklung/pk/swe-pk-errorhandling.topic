<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Fehler und Fehlerbehandlung (error handling)" id="swe-pk-errorhandling">
    <show-structure for="chapter,procedure" depth="2"/>

    <chapter title="Warum ist Software fehlerhaft?" id="warum_ist_software_fehlerhaft_">
        <p>
            Die Antwort ist einfach: Irren ist menschlich. Programme werden von Menschen geschrieben, und Menschen
            machen Fehler. Dies sind beispielsweise Denkfehler oder auch Flüchtigkeitsfehler. Software-Projekte sind oft
            sehr groß, kompliziert und unübersichtlich – viele Projekte bestehen aus mehreren Millionen Zeilen Coe! Dort
            verliert ein Entwickler leicht den Überblick und macht so Fehler. Bleiben diese unentdeckt, werde sie mit
            dem Programm an den Nutzer ausgeliefert und können dort zu unvorhergesehenen Problemen führen. Es gibt
            jedoch Techniken zur Vermeidung von Fehlern, die – richtig eingesetzt – die Anzahl an unentdeckten Mängeln
            reduzieren können.
        </p>

        <note>
            <p><b>Ausnahmen und Ausnahmebehandlung</b></p>

            <p>
                Häufig ist in der Software-Entwicklung alternativ zu dem Begriff auch von Ausnahmen die Rede, die
                Fehlerbehandlung nennt man häufig auch Ausnahmebehandlung.
            </p>
        </note>
    </chapter>

    <chapter title="Bugs" id="bugs">
        <p>
            Der Begriff Bug wird in der Informatik oft als Synonym für »Fehler« verwendet. Meistens benutzt man ihn, um
            zu sagen, dass etwas um Programm schiefgeht, was funktionieren sollte. Für die Vermeidung und Behebung von
            Fehlern ist es von großem Vorteil, präzisere Begriffe zu verwenden:
        </p>

        <list>
            <li>
                Ein Fehler beginnt immer mit einer <b>Fehlerhandlung</b>. Diese beschreibt die (meist menschliche)
                Ursache für den Fehler.
            </li>
            <li>
                Schließlich ist der Fehler im Code, und es kommt während einer Programmausführung zu einem
                <b>Fehlerzustand</b> des Systems.
            </li>
            <li>
                Schließlich wird eine <b>Fehlerwirkung</b> erreicht, wenn der Fehler sich nach außen zeigt,
                beispielsweise durch die Ausgabe eines falschen Ergebnisses oder durch einen Absturz.
            </li>
            <li>
                Das Suchen und Beheben von Fehlern bezeichnet man als <b>Debugging</b>.
            </li>
        </list>

        <note>
            Der Begriff Bug (aus dem Englischen für Insekt) geht darauf zurück, dass einer der ersten Fehler in einem
            Computerprogramm laut Erzählungen tatsächlich auf ein (echtes) Insekt zurückzuführen war.
        </note>
    </chapter>

    <chapter title="Verschiedene Fehlerarten" id="fehlerarten">
        <p>
            Fehler lassen sich meist mehreren Kategorien zuordnen. Diese Unterteilung nehmen wir vor, um die jeweiligen
            Fehler frühzeitig zu erkennen und unter Anwendung den richtigen Werkzeugen zu beheben oder sogar zu
            verhindern.
        </p>

        <chapter title="Kompilierungsfehler bzw. Syntaxfehler" id="fehlerarten-syntax">
            <p>
                Der erste Zeitpunkt, bei dem Fehler auftreten können, ist, wenn der Computer das Programm kompiliert, 
                das heißt aus der Programmiersprache in Maschinencode übersetzt. Versteht der Compiler, also das 
                Programm, das den Code übersetzt, diesen nicht, so tritt ein Kompilierungsfehler auf. 
                Kompilierungsfehler entstehen aus Verletzung der Notationsregeln der verwendeten Programmiersprache. 
                Diese Verletzung kann zum Beispiel ein Syntaxfehler sein, gewissermaßen eine falsche Verwendung der 
                Grammatik der Programmiersprache. Bei Sprachen, deren Notationsregeln sehr streng sind, wird beim 
                Kompilieren unter anderem festgestellt, wenn unbekannte Befehle verwendet werden, quasi ein Vokal, die 
                der Computer noch nicht kennt.
            </p>

            <chapter title="Beispiel mit Kompilierungsfehler" id="fehlerarten-syntax-beispiel" collapsible="true">
                <chapter title="Berechnung der Fläche eines Kreises (mit Fehler)"
                         id="fehlerarten-syntax-beispiel-mitfehler">
                    <code-block>
                        Eingabe: Der Wert kreisRadius
                        Ausgabe: Die Fläche des Kreises
                        1: Return 3.14159 * radius * radius
                    </code-block>

                    <p>
                        Das Programm soll zu einem gegebenen Kreisradius den entsprechenden Flächeninhalt des Kreises
                        berechnen. Dabei hat der Programmierer statt des konkreten Variablennamens
                        <code>kreisRadius</code> den Namen radius verwendet. Wird dieser Algorithmus als Programm in der
                        Programmiersprache Java kompiliert, erhält man die Fehlermeldung <code>»Error, cannot find
                        symbol radius«</code>, da die verwendete Variable radius nicht existiert.
                    </p>
                </chapter>

                <chapter title="Berechnung der Fläche eines Kreises (ohne Fehler)"
                         id="fehlerarten-syntax-beispiel-ohnefehler">
                    <code-block>
                        Eingabe: Der Wert kreisRadius
                        Ausgabe: Die Fläche des Kreises
                        1: Return 3.14159 * kreisRadius * kreisRadius
                    </code-block>

                    <p>
                        Solche Fehler werden vom Compiler erkannt, da ihm nicht klar ist, was in der jeweiligen Zeile zu
                        tun ist. Die Fehlermeldung enthält Details, die dem Entwickler helfen, den Fehler im Code zu
                        finden und zu beheben. Weil man während der Entwicklung eines Programms oft kompiliert, fallen
                        diese Fehler schnell auf und sind meist leicht zu beheben. Einige Entwicklungsumgebung weisen
                        zudem auf solche Fehler schon während des Programmierens hin und bieten eine schnelle Behebung
                        an. Daher schaffen es diese Fehler selten in ein ausgeliefertes Programm.
                    </p>
                </chapter>
            </chapter>
        </chapter>

        <chapter title="Laufzeitfehler" id="fehlerarten-laufzeit">

        </chapter>

        <chapter title="Logische Fehler" id="fehlerarten-logik">

        </chapter>

        <chapter title="Designfehler" id="fehlerarten-design">

        </chapter>

        <chapter title="Umgebungsfehler" id="fehlerarten-umgebung">

        </chapter>

        <chapter title="Kommunikationsfehler" id="fehlerarten-kommunikation">

        </chapter>
    </chapter>

    <chapter title="Techniken zur Fehlervermeidung" id="techniken">

        <chapter title="Testen" id="techniken-testen">

        </chapter>

        <chapter title="A/B Testing" id="techniken-abtesting">

        </chapter>

        <chapter title="Programmierstiel" id="techniken-programmierstiel">

        </chapter>

        <chapter title="Pair Programming" id="techniken-pairprogramming">

        </chapter>

        <chapter title="Code Review" id="techniken-codereview">

        </chapter>
    </chapter>

    <chapter title="Behandlung von Laufzeitfehlern" id="laufzeitfehler">

        <chapter title="Fehler mit dem try-catch-finally-Statement abfangen" id="laufzeitfehler-trycatch">

        </chapter>

        <chapter title="Fehler mit dem throw-Statement auslösen" id="laufzeitfehler-throw">

        </chapter>

        <chapter title="Fehler und der Funktionsaufruf-Stack" id="laufzeitfehler-stack">

        </chapter>

        <chapter title="Fehler an den Nutzer weiterleiten oder nicht?" id="laufzeitfehler-weiterleiten">

        </chapter>
    </chapter>

    <chapter title="Den Code debuggen" id="debuggen">

    </chapter>

    <chapter title="Quellen" id="quellen">
        <tip>
            <b>(BUCH)</b>
            978-3-8362-4406-0, "Fit fürs Studium – Informatik", Philipp Fischbeck &amp; Arne Boockmeyer &amp; Stefan Neubert, 2019
        </tip>
        <tip>
            <b>(BUCH)</b>
            978-3836256971, "JavaScript - Das umfassende Handbuch", Philip Ackermann, 2018
        </tip>
    </chapter>
</topic>