<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="OOP (Objektorientierte Programmierung)" id="swe-pk-paradigmen-oop">
    <show-structure for="chapter,procedure" depth="2"/>

    <chapter title="Grundlegendes" id="grundlagen">
        <p>
            Die objektorientierte Programmierung basiert darauf, Elemente der Software, in Anlehnung an die
            Gegebenheiten der realen Welt, als Objekte aufzufassen. Solche Objekte verfügen über Eigenschaften, die sie
            genauer charakterisieren. Ebenso können Objekte bestimmte Tätigkeiten ausführen. Objekte können miteinander
            kommunizieren und in einer bestimmten Beziehung zueinander stehen. Beispielsweise weisen ähnliche Objekte
            einen gleichen Bauplan auf.
        </p>
        <p>
            Der konkrete Umgang mit der Objektorientierung ist von Programmiersprache zu Programmiersprache
            unterschiedlich. Spätestens wenn ein konkretes Programm erstellt wird, wird man sich damit auseinandersetzen
            müssen. Das Grundverständnis von Klassen und ihren Objekten bleibt jedoch stets identisch.
        </p>

        <img src="swe-pk-paradigmen-oop-meinauto.png" alt="OOP - Beispiel"/>

        <chapter title="Objekte" id="grundlagen-objekte">
            <p>
                Objekte sind also konkrete Ausprägungen, eine Instanz, einer Klasse. Instanz könnte man übersetzen mit
                »gehört zur Klasse«: Entsprechend muss ein Objekt instanziiert werden. Dabei können von einer Klasse in
                der Regel beliebig viele Objekte, auch als Instanzen bezeichnet, erstellt werden. Die einzelnen Objekte
                können sich also in den konkreten Werten der Attribute unterscheiden.
            </p>
            <p>
                Zum Beispiel können die Objekte Toyota Avensis und VW Golf erstellt werden, welche beide die Klasse Auto
                verwenden. Sie unterscheiden sich in den Eigenschaften.
            </p>

            <chapter title="Eigenschaften" id="grundlagen-objekte-eigenschaften">
                <p>
                    Die Eigenschaften repräsentieren die Daten des Objekts. Ein Automobil ist je nach Sichtweise ein
                    mehr oder weniger komplexes Objekt, das sich durch folgende <b>Attribute (Eigenschaften)</b>
                    beschreiben lässt:
                </p>

                <list>
                    <li>Hersteller</li>
                    <li>Typ</li>
                    <li>Farbe</li>
                    <li>Zulassungsjahr</li>
                </list>

                <p>
                    Es gibt weitere Attribute, die uns aber bei der Abbildung als Modell für eine Software nicht
                    interessieren. Soll beispielsweise eine Verwaltung für den Fuhrpark eines Unternehmens programmiert
                    werden, so müssen die dafür relevanten Eigenschaften der Fahrzeuge erfasst werden. Dies könnten die
                    eben genannten Attribute sein. Nicht von Interesse für die Software ist dagegen, ob das Auto eine
                    schöne Fußmatte hat und ob im Handschuhfach eine Beleuchtung eingebaut ist.
                </p>

                <chapter title="Attribute" id="grundlagen-objekte-eigenschaften-attribute">
                    <p>
                        Als <b>Attribute</b> werden Variablen bezeichnet, die grundsätzlich nur innerhalb der Klasse
                        verwendet werden können. Sie sind daher als <code>private</code> deklariert. Will man auf die
                        Werte dieser Attribute von außerhalb des Objekts zugreifen, muss man das über Methoden
                        erledigen.
                    </p>
                </chapter>

                <chapter title="Properties" id="grundlagen-objekte-eigenschaften-properties">
                    <p>
                        Moderne Programmiersprachen, wie C#, kennen auch das Konzept der <b>Properties</b>. Über eine
                        Property kann von außen auf das zugeordnete Attribut zugegriffen werden. Die Property ist damit
                        als <code>public</code> deklariert. Der Zugriff kann lesend oder schreibend sein bzw. beide
                        Varianten umfassen.
                    </p>
                </chapter>
            </chapter>

            <chapter title="Methoden" id="grundlagen-objekte-methoden">
                <p>
                    Eine Methode enthält ähnlich wie eine Funktion, Funktionalität. Durch sie werden die Fähigkeiten
                    eines Objektes beschrieben, also welche Funktionen bzw. Aufgaben ein Objekt ausführen kann.
                </p>
                <p>
                    Methoden werden auch dazu verwendet, die Werte bestimmter Attribute zu verändern. Eine Methode
                    Lackieren der Klasse Auto könnte also eine Veränderung der Farbe bewirken. Als Argument müsste die
                    Methode die neue Farbe übermitteln. Aus unserem grauen Toyota könnte also mithilfe der Methode
                    Lackieren ein farbenfrohes blaues Automobil werden. Ebenso dienen Methoden dazu, dass man die Werte
                    von Attributen abfragen kann.
                </p>
                <p>
                    Auch ein Auto verfügt stets über bestimmte Fähigkeiten. Mit Bezug auf die zu entwickelnde Software
                    könnten folgende Methoden von Interesse sein:
                </p>

                <list>
                    <li><code>BehoerdlichZulassen</code>, d. h. Anmeldung bei der zuständigen Behörde, und</li>
                    <li><code>FahrtenbuchAnalysieren</code>.</li>
                </list>

                <p>
                    Natürlich verfügt das reale Objekt über viel mehr Funktionalität. Ein Automobil kann beispielsweise
                    beschleunigen und bremsen. In der Software bilden wir jedoch nur die interessierenden Methoden ab,
                    denn die Software ist ein stark vereinfachtes Modell der Wirklichkeit.
                </p>

                <chapter title="Getter und Setter" id="grundlagen-objekte-methoden-gettersetter">
                    <p>
                        In welcher Form man die Werte von Attributen ändern kann, ist von Programmiersprache zu
                        Programmiersprache etwas unterschiedlich. Historisch und in Anlehnung an die Grundidee der
                        objektorientierten Programmierung kann man von außerhalb eines Objekts nicht auf die Attribute
                        des Objekts direkt zugreifen, sie sind geheim. Dazu verwendet man Methoden. Wie man diese
                        Methoden benennt, spielt grundsätzlich keine Rolle. Zur Vereinfachung dieser Notwendigkeit
                        verwenden viele Sprachen spezielle Methoden, d. h. für das Lesen eine <code>get</code>- und für
                        das Schreiben eine <code>set</code>-Methode. Beispielsweise könnte man mit der Methode
                        <code>setFarbe</code> die Farbe des betreffenden Autoobjekts seinen Wünschen anpassen. Wollte
                        man die aktuelle Farbe wissen, müsste man den Wert über die Methode <code>getFarbe</code>
                        auslesen. Ebenso könnte man – wie im obigen Beispiel angeführt – eine Methode
                        <code>Lackieren</code> erstellen, die auch die Farbe anpasst und vielleicht darüber hinaus noch
                        etwas anderes macht, zum Beispiel eine Schutzversiegelung auf den Lack aufbringt.
                    </p>
                    <p>
                        Da ständig auf die Attribute der Objekte lesend und schreiben zugegriffen werden muss, haben
                        einige Programmiersprachen, zum Beispiel C#, noch mehr Vereinfachungen vorgesehen. Hier
                        definiert man sogenannte Properties. Dabei kann man von außerhalb der Klasse so tun, als ob man
                        direkt das betreffende Attribut liest oder schreibt. Im Hintergrund werden dazu jedoch weiterhin
                        <code>get</code>- und <code>set</code>-Methoden aufgerufen. Um den Entwicklern das Leben jedoch
                        zu erleichtern, werden diese <code>set</code>- und <code>get</code>-Methoden vom Compiler
                        automatisch bei der Erstellung des Programms generiert.
                    </p>
                </chapter>

                <chapter title="Konstruktor" id="grundlagen-objekte-methoden-konstruktor">
                    <p>
                        Der Konstruktor ist eine Methode, die ausgeführt wird, wenn ein Objekt einer Klasse erstellt
                        wird. Sie kann beliebige Parameter übernehmen, mit denen das Objekt instanziiert wird.
                    </p>
                </chapter>

                <chapter title="Destruktor" id="grundlagen-objekte-methoden-destruktor">
                    <p>
                        Die Destruktor-Methode kommt immer dann zum Einsatz, wenn ein Objekt aufgelöst wird.
                    </p>
                </chapter>

                <chapter title="Methoden Überladen" id="grundlagen-objekte-methoden-ueberladen">
                    <p>
                        Überladen bedeutet, eine Methode erhält mehr Parameter als vorgegeben oder Parameter mit
                        unterschiedlichen Datentypen. Zusammengefasst, es werden also Werte übergeben, die die Methode
                        so nicht kennen kann. Überladen ist als Programmiertechnik ausgesprochen praktisch, da eine
                        Methode mit verschiedenen Situationen umgehen kann, für die normalerweise mehrere Methoden
                        notwendig wären.
                    </p>
                </chapter>
            </chapter>

            <chapter title="Garbage Collector" id="grundlagen-objekte-garbagecollector">
                <p>
                    Nachdem ein Objekt einer Klasse durch einen Konstruktor erstellt wurde, wird es im Speicher
                    vorgehalten. Es sollte mindestens so lange existieren, wie es noch benötigt wird. Das ist der Fall,
                    wenn noch auf das Objekt zugegriffen wird. Da einzelne Objekte einen beachtlichen Speicherbedarf
                    haben können, sollten nicht mehr benötigte Objekte wieder gelöscht werden.
                </p>
                <p>
                    Je nach Programmiersprache ist man entweder als Entwickler selbst für das Löschen nicht mehr
                    benötigter Objekte zuständig, oder das System erledigt dies automatisch. Ersteres ist aufwendig und
                    fehleranfällig. Die zweite Variante ist komfortabel und befreit den Entwickler vor lästiger
                    Routinearbeit. Das System der automatischen Speicherfreigabe für nicht mehr benötigte Objekte wird
                    als <b>Garbage-Collection</b> bezeichnet.
                </p>
            </chapter>
        </chapter>

        <chapter title="Klassen" id="grundlagen-klassen">
        </chapter>

        <chapter title="Ereignisse" id="grundlagen-ereignisse">
        </chapter>

        <chapter title="Modellierung von Klassen und Objekten" id="grundlagen-modellierung">
        </chapter>
    </chapter>

    <chapter title="Unterschied zwischen primitiven Datentypen und Referenztypen" id="datentypen-unterschiede">
    </chapter>

    <chapter title="Wesentliche Konzepte der objektorientierten Programmierung" id="konzepte">
        <chapter title="Kapselung" id="konzepte-kapselung">
            <chapter title="Dateneigenschaften und Zugriffseigenschaften" id="konzepte-kapselung-eigenschaften">
            </chapter>
        </chapter>

        <chapter title="Geheimnisprinzip / Sichtbarkeit" id="konzepte-sichtbarkeit">
            <chapter title="Das Geheimnisprinzip" id="konzepte-sichtbarkeit-geheimnisprinzip">
            </chapter>

            <chapter title="Die Sichtbarkeit" id="konzepte-sichtbarkeit-sichtbarkeit">
            </chapter>
        </chapter>

        <chapter title="Vererbung" id="konzepte-vererbung">
        </chapter>

        <chapter title="Abstraktion &amp; Generalisierung / Spezialisierung" id="konzepte-abstraktion">
            <chapter title="Generalisierung / Spezialisierung" id="konzepte-abstraktion-generalisierung">
            </chapter>

            <chapter title="Abstrakte Klassen" id="konzepte-abstraktion-abstrakteklassen">
            </chapter>
        </chapter>

        <chapter title="Polymorphismus" id="konzepte-polymorphismus">
        </chapter>
    </chapter>

    <chapter title="Wiederverwendung" id="wiederverwendung">
        <chapter title="Verwaltung der Bibliotheken" id="wiederverwendung-bibliotheken">
        </chapter>

        <chapter title="Softwarekomponenten" id="wiederverwendung-komponenten">
        </chapter>
    </chapter>

    <chapter title="Quellen" id="quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836244763, "Handbuch für Softwareentwickler", Veikko Krypczyk &amp; Elena Bochkor, 2018
        </tip>
        <tip>
            <b>(BUCH)</b>
            978-3836240826, "PHP 7 und MySQL - Das umfassende Handbuch", Christian Wenz &amp; Tobias Hauser, 2016
        </tip>
        <tip>
            <b>(BUCH)</b>
            978-3836256971, "JavaScript - Das umfassende Handbuch", Philip Ackermann, 2018
        </tip>
    </chapter>
</topic>