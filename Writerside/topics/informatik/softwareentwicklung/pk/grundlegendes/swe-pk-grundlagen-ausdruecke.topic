<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Ausdrücke, Operatoren und Operanden" id="swe-pk-grundlagen-ausdruecke">
    <show-structure for="chapter,procedure" depth="2"/>

    <chapter title="Einführung" id="einfuehrung">
        <p>
            Ein Ausdruck ist eine mathematische Formel, die aus Operanden und Operatoren. Im Unterschied zu Anweisungen 
            haben Ausdrücke immer ein Ergebnis, das durch den Ausdruck zurückgeliefert wird. Ein Ausdruck kann auch teil 
            einer Anweisung sein. Im Beispiel <code>5 * 17</code> wäre das Ergebnis <code>85</code>, Der Operator ist 
            <code>*</code> und die Operanden sind <code>5</code> und <code>17</code>. In der Praxis können Ausdrücke 
            durchaus komplexer sein, mehrere Operanden, verschiedene Operatoren, Funktionsaufrufe etc. enthalten. Als 
            Operanden können sowohl Variablen als auch einfache Werte (sogenannte Literale) verwendet werden. Operatoren 
            verknüpfen innerhalb eines Ausdrucks die einzelnen Operanden, wobei je nach Anzahl der Operanden zwischen 
            folgenden Arten von Operatoren unterschieden wird:
        </p>
        
        <list>
            <li>unärer Operator – ein Operator, der sich auf einen einzigen Operanden bezieht.</li>
            <li>binärer Operator – ein Operator, der sich auf zwei Operanden bezieht.</li>
            <li>ternärer Operator – ein Operator, der sich auf drei Operanden bezieht.</li>
        </list>

        <p>
            Beispielbeschreibung aus JavaScript:
        </p>

        <img src="swe-pk-grundlagen-ausdruecke-anweisung.png" alt="Beispiel einer Anweisung in JavaScript"/>
    </chapter>

    <chapter title="Arithmetische Operatoren" id="arithmetisch">
        <p>
            Arithmetische Operatoren sind Operatoren fürs Arbeiten und Rechnen mit Zahlen, zu denen die Addition, die
            Subtraktion, die Multiplikation, die Division und der Rest-Operator (Modulo), sowie der Exponentialoperator
            über den sich Potenzen berechnen lassen zählen. Hinzu kommen der Inkrement- und Dekrement-Operator, die
            jeweils eins zu einer Zahl addieren (= Inkrement-Operator) bzw. eins von einer Zahl subtrahieren (=
            Dekrement-Operator).
        </p>

        <p><b>Beispiele in JavaScript</b></p>

        <table>
            <tr>
                <td>Rechenart</td>
                <td>Operator</td>
                <td>Beispiel</td>
                <td>Ergebnis von <code>x</code></td>
            </tr>
            <tr>
                <td>Addition</td>
                <td><code>+</code></td>
                <td><code>let x = 20 + 20;</code></td>
                <td><code>40</code></td>
            </tr>
            <tr>
                <td>Subtraktion</td>
                <td><code>-</code></td>
                <td><code>let x = 20 - 5;</code></td>
                <td><code>15</code></td>
            </tr>
            <tr>
                <td>Multiplikation</td>
                <td><code>*</code></td>
                <td><code>let x = 20 * 5;</code></td>
                <td><code>100</code></td>
            </tr>
            <tr>
                <td>Division</td>
                <td><code>/</code></td>
                <td><code>let x = 100 / 5;</code></td>
                <td><code>20</code></td>
            </tr>
            <tr>
                <td>Modulo</td>
                <td><code>%</code></td>
                <td><code>let x = 20 % 6;</code></td>
                <td><code>2</code></td>
            </tr>
            <tr>
                <td>Prozentrechnung</td>
                <td><code>**</code></td>
                <td><code>let x = 5 ** 5;</code></td>
                <td><code>6</code></td>
            </tr>
            <tr>
                <td>Inkrement</td>
                <td><code>++</code></td>
                <td><code>let x = 5; x++;</code></td>
                <td><code>5</code></td>
            </tr>
            <tr>
                <td>Dekrement</td>
                <td><code>--</code></td>
                <td><code>let x = 6; x--;</code></td>
                <td><code>3125</code></td>
            </tr>
        </table>

        <chapter title="Konkatenationsoperator" id="arithmetisch-konkatenation">
            <p>
                Als Konkatenation wird das Zusammenfügen von Zeichenketten bezeichnet. Viele Sprachen verwenden für die
                Konkatenation den <code>+</code>-Operator.
            </p>

            <code-block lang="javascript">
                let salutation = 'Ihr persönlicher Newsletter,'; // => 'Ihr persönlicher Newsletter,'
                let name = 'Max Mustermann';                     // => 'Max Mustermann'
                let message = salutation + ' ' + name;           // => 'Ihr persönlicher Newsletter, Max Mustermann'
            </code-block>
        </chapter>

        <chapter title="Zuweisungsoperatoren" id="arithmetisch-zuweisung">
        </chapter>

        <chapter title="Vergleichsoperatoren" id="arithmetisch-vergleich">
        </chapter>
    </chapter>

    <chapter title="Logische Operatoren" id="logisch">

        <chapter title="Der UND-Operator" id="logisch-und">
        </chapter>

        <chapter title="Der ODER-Operator" id="logisch-oder">
        </chapter>

        <chapter title="Der Negationsoperator" id="logisch-negation">
        </chapter>
    </chapter>

    <chapter title="Zugriffsoperatoren" id="zugriff">
    </chapter>

    <chapter title="Bereichsauflösungsoperatoren" id="bereichsaufloesung">
    </chapter>

    <chapter title="Quellen" id="quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836256971, "JavaScript - Das umfassende Handbuch", Philip Ackermann, 2018
        </tip>
    </chapter>
</topic>