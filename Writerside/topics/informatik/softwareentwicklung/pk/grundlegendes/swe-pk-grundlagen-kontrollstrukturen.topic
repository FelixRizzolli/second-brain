<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Kontrollstrukturen" id="swe-pk-grundlagen-kontrollstrukturen">
    <show-structure for="chapter,procedure" depth="2"/>

    <chapter title="Grundlegendes" id="grundlagen">
        <p>
            Um den Programmfluss zu kontrollieren, benötigt man sogenannte Kontrollstrukturen. Damit kann man die
            Auswahl aus einer Anzahl von Möglichkeiten nach einem bestimmten Kriterium vornehmen (Auswahlstrukturen)
            oder Wiederholungen (Schleifen) veranlassen.
        </p>
    </chapter>

    <chapter title="Auswahlstrukturen" id="auswahl">
        <p>
            Bei den Auswahlstrukturen, auch bedingte Anweisungen und Verzweigungen genannt, geht es um die Auswahl
            zwischen verschiedenen Alternativen.
        </p>

        <chapter title="if-elseif-else-Statement" id="auswahl-if">
            <code-block lang="javascript">
                if (Bedingung1) {
                    // ...Anweisungsblock 1
                } else if (Bedingung2) {
                    // ...Anweisungsblock 2
                } else {
                    // ...Anweisungsblock 3
                }
            </code-block>

            <p>
                Sofern die Bedingung <code>Bedingung1</code> hinter dem Schlüsselwort <code>if</code> erfüllt ist, kommt
                es zur Ausführung von <code>Anweisungsblock 1</code>. Ist die Bedingung nicht erfüllt, so wird die
                Bedingung <code>Bedingung2</code> im hinter dem <code>else if</code>-Schlüsselwort geprüft. Ist diese
                erfüllt, so kommt es zur Ausführung von <code>Anweisungsblock 2</code>. Das
                <code>else if</code>-Statement ist optional und davon können beliebig viele gesetzt werden. Hierbei ist
                aber auf die Reihenfolge zu achten! Sobald eine Bedingung zutrifft werden die nächsten nicht mehr
                geprüft. Das <code>else</code>-Statement ist auch optional und kann nur einmal für eine
                <code>if</code>-Anweisung gesetzt werden. Der Anweisungsblock (im Beispiel
                <code>Anweisungsblock 3</code>) wird ausgeführt, falls alle Bedingungen, jene des
                <code>if</code>-Statements als auch jene der else <code>if</code>-Statements nicht zutrafen.
            </p>
            <p>
                Für die zu prüfende Bedingung gilt lediglich, dass diese vom Typ boolean (<code>true</code> oder
                <code>false</code>) sein muss. Typischerweise kommen die Relationszeichen <code>==</code>,
                <code>!=</code>, <code>&lt;</code> und <code>&gt;</code> zum Einsatz.
            </p>
            <p>
                Die <code>else if</code>-Anweisung ist eigentlich eine Kombination aus <code>if</code> und
                <code>else</code>, die Programmierer erfunden haben, um sich das Leben zu erleichtern. Alternative
                Lösung:
            </p>

            <code-block lang="javascript">
                if (Bedingung) {
                    // ...Anweisungsblock 1
                } else {
                    if (Bedingung) {
                        // ...Anweisungsblock 2
                    } else {
                        // ...Anweisungsblock 3
                    }
                }
            </code-block>
        </chapter>

        <chapter title="Bedingungsoperator bzw. Auswahloperator" id="auswahl-operator">
            <p>
                Für weniger komplexe Situationen können <code>if else</code>-Verzweigungen mithilfe des
                Bedingungsoperators <code>?:</code> ausgedrückt werden. Dieser erwartet drei Operanden: Eine Bedingung
                und zwei Ausdrücke, von denen je nach Ergebnis der Bedingung einer ausgeführt wird. Bedingte Anweisungen
                und Verzweigungen dienen dazu, abhängig von einer oder mehreren Bedingungen einen von mehreren Wegen im
                Programm einzuschlagen und die darin enthaltenen Anweisungen auszuführen. Der Bedingungsoperator dagegen
                dient dazu, einer Variablen abhängig von einer einzelnen Bedingung einen von zwei Werten zuzuweisen.
            </p>
            <p>
                Syntax: <code>Bedingung ? Ausdruck1: Ausdruck2;</code>
            </p>

            <code-block lang="javascript">
                label1.text = checkbox1.checked ? "Rot" : "Grün";
            </code-block>

            <p>
                Ist die Checkbox ausgewählt, dann ist der Rückgabewert <code>Rot</code>, ist das nicht der Fall, dann
                lautet der Rückgabewert <code>Grün</code>. Mit einem <code>if else</code>-Statement würde es wird folgt
                aussehen:
            </p>

            <code-block lang="javascript">
                if (checkbox1.checked == true)
                    label1.text = "Rot";
                else
                    label1.text = "Grün";
            </code-block>
        </chapter>

        <chapter title="Fallunterscheidung: switch-Verzweigung" id="auswahl-switch">
            <p>
                Mithilfe der Fallunterscheidung, der sog. <code>switch</code>-Verzweigung oder auch Mehrfachverzweigung
                genannt, kann ein Ausdruck, zum Beispiel eine Variable, mit mehreren möglichen Werten verglichen werden.
                Die zu unterscheidenden Werte sind in sogenannte <code>case</code>-Blöcke geordnet. Trifft kein
                <code>case</code>-Block zu, werden die Anweisungen nach dem Schlüsselwort <code>default</code> – hier in
                der Bedeutung »für alle anderen Fälle« – ausgeführt. Jeder <code>case</code>-Block einer
                <code>switch</code>-Verzweigung muss mit dem Befehl <code>break</code> abgeschlossen werden. Diese
                Anweisung soll signalisieren, dass die Prüfung abgeschlossen ist, wenn eine Fallkonstellation zutrifft
                und ausgeführt wurde.
            </p>
            <p>
                Die Syntax vom <code>switch-case</code>-Statement ist ein wenig gewöhnungsbedürftig. Sie ist zwar
                eigentlich leicht kürzer als eine <code>if</code>-Fallunterscheidung mit geschweiften Klammern,
                allerdings erfordert switch die <code>break</code>-Anweisung. Schlussendlich bleibt es eine
                Geschmacksfrage, für welche Variante man sich entscheidet.
            </p>
            <p>
                Wenn in einer <code>switch</code>-Fallunterscheidung die <code>break</code>-Anweisung weglassen wird,
                werden alle Anweisungen ab dem Fall, der zutrifft, ausgeführt. Dieses Verhalten kann manchmal gewünscht
                sein, wenn man beispielsweise für mehrere Fälle dieselben Anweisungen ausführen möchte.
            </p>

            <code-block lang="javascript">
                switch (Prüfausdruck) {
                    [case Wert1:]
                        //Anweisungen für Fall 1
                        break;
                    [case Wert2:]
                        //Anweisungen für Fall 2
                        break;
                    [case Wert3:]
                    [case Wert4:]
                    [case Wert5:]
                        //Anweisungen für Fall 3, 4 und 5
                        break;
                    [...]
                    [default:]
                        // Anweisungen für diejenigen Fälle,
                        // in denen keine der vorhergehenden
                        // Konstellationen erfüllt ist.
                        break;
                }
            </code-block>

            <p>
                Möchte man abhängig von booleschen Bedingungen einen von mehreren Wegen im Programm einschlagen, sollten
                bedingte Anweisungen oder Verzweigungen verwendet werden. Mehrfachverzweigungen über die
                <code>switch</code>-Anweisung dagegen sind für das Testen von booleschen Bedingungen in der Regel nicht
                geeignet. Folgende <code>switch</code>-Anweisung würde theoretisch und auch praktisch funktionieren,
                hierbei wird aber die <code>switch</code>-Anweisung zweckentfremdet:
            </p>

            <code-block lang="javascript">
                // Keine Best Practice: boolesche Bedingungen innerhalb einer switch-Anweisung
                let age = prompt('Für welches Alter suchen Sie Filmtipps?');

                switch(true) {
                    case (age >= 18):
                        console.log('Filme mit FSK6, FSK12, FSK16 und FSK18 anzeigen.');
                        break;
                    case (age >= 16):
                        console.log('Filme mit FSK6, FSK12 und FSK16 anzeigen.');
                        break;
                    case (age >= 12):
                        console.log('Filme mit FSK6 und FSK12 anzeigen.');
                        break;
                    case (age >= 6):
                        console.log('Filme mit FSK6 anzeigen.');
                        break;
                }
            </code-block>

            <chapter title="Beispiel" id="auswahl-switch-beispiel">
            </chapter>
        </chapter>
    </chapter>

    <chapter title="Schleifen" id="schleifen">

        <chapter title="Zählschleifen – die for-Schleife" id="schleifen-for">

            <chapter title="Flussdiagramm" id="schleifen-for-flussdiagramm">
            </chapter>

            <chapter title="Arbeiten mit Arrays" id="schleifen-for-arrays">
            </chapter>

            <chapter title="Verschachtelung" id="schleifen-for-verschachtelung">
            </chapter>
        </chapter>

        <chapter title="Kopfgesteuerte Schleifen – die while-Schleife" id="schleifen-while">

            <chapter title="Syntax" id="schleifen-while-syntax">
            </chapter>

            <chapter title="Flussdiagramm" id="schleifen-while-flussdiagramm">
            </chapter>
        </chapter>

        <chapter title="Fußgesteuerte Schleifen – die do-while-Schleife" id="schleifen-dowhile">

            <chapter title="Syntax" id="schleifen-dowhile-syntax">
            </chapter>

            <chapter title="Flussdiagramm" id="schleifen-dowhile-flussdiagramm">
            </chapter>

            <chapter title="Kopfgesteuerte vs. fußgesteuerte Schleifen" id="schleifen-dowhile-unterschiede">
            </chapter>
        </chapter>

        <chapter title="Die foreach-Schleife" id="schleifen-foreach">

            <chapter title="Beispiel in C#" id="schleifen-foreach-beispiel">
            </chapter>
        </chapter>

        <chapter title="Endlosschleifen" id="schleifen-endlosschleife">
        </chapter>

        <chapter title="Schleifen und Schleifeniterationen vorzeitig abbrechen" id="schleifen-abbrechen">

            <chapter title="Flussdiagramm für das Abbrechen einer Zählschleife" id="schleifen-abbrechen-break">
            </chapter>

            <chapter title="Flussdiagramm für das Abbrechen einer Schleifeniteration in einer Zählschleife"
                     id="schleifen-abbrechen-continue">
            </chapter>
        </chapter>
    </chapter>

    <chapter title="Komplexe Bedingungen" id="komplex">
    </chapter>

    <chapter title="Sprunganweisung: goto" id="goto">

        <chapter title="Beispiel in PHP" id="goto-beispiel-php">
        </chapter>
    </chapter>

    <chapter title="Quellen" id="quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836240826, "PHP 7 und MySQL - Das umfassende Handbuch", Christian Wenz &amp; Tobias Hauser, 2016
        </tip>
        <tip>
            <b>(BUCH)</b>
            978-3836244763, "Handbuch für Softwareentwickler", Veikko Krypczyk &amp; Elena Bochkor, 2018
        </tip>
        <tip>
            <b>(BUCH)</b>
            978-3836256971, "JavaScript - Das umfassende Handbuch", Philip Ackermann, 2018
        </tip>
    </chapter>
</topic>