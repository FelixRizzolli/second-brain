<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Kontrollstrukturen" id="swe-pk-grundlagen-kontrollstrukturen">
    <show-structure for="chapter,procedure" depth="2"/>

    <chapter title="Grundlegendes" id="grundlagen">
        <p>
            Um den Programmfluss zu kontrollieren, benötigt man sogenannte Kontrollstrukturen. Damit kann man die
            Auswahl aus einer Anzahl von Möglichkeiten nach einem bestimmten Kriterium vornehmen (Auswahlstrukturen)
            oder Wiederholungen (Schleifen) veranlassen.
        </p>
    </chapter>

    <chapter title="Auswahlstrukturen" id="auswahl">
        <p>
            Bei den Auswahlstrukturen, auch bedingte Anweisungen und Verzweigungen genannt, geht es um die Auswahl
            zwischen verschiedenen Alternativen.
        </p>

        <chapter title="if-elseif-else-Statement" id="auswahl-if">
            <code-block lang="javascript">
                if (Bedingung1) {
                    // ...Anweisungsblock 1
                } else if (Bedingung2) {
                    // ...Anweisungsblock 2
                } else {
                    // ...Anweisungsblock 3
                }
            </code-block>

            <p>
                Sofern die Bedingung <code>Bedingung1</code> hinter dem Schlüsselwort <code>if</code> erfüllt ist, kommt
                es zur Ausführung von <code>Anweisungsblock 1</code>. Ist die Bedingung nicht erfüllt, so wird die
                Bedingung <code>Bedingung2</code> im hinter dem <code>else if</code>-Schlüsselwort geprüft. Ist diese
                erfüllt, so kommt es zur Ausführung von <code>Anweisungsblock 2</code>. Das
                <code>else if</code>-Statement ist optional und davon können beliebig viele gesetzt werden. Hierbei ist
                aber auf die Reihenfolge zu achten! Sobald eine Bedingung zutrifft werden die nächsten nicht mehr
                geprüft. Das <code>else</code>-Statement ist auch optional und kann nur einmal für eine
                <code>if</code>-Anweisung gesetzt werden. Der Anweisungsblock (im Beispiel
                <code>Anweisungsblock 3</code>) wird ausgeführt, falls alle Bedingungen, jene des
                <code>if</code>-Statements als auch jene der else <code>if</code>-Statements nicht zutrafen.
            </p>
            <p>
                Für die zu prüfende Bedingung gilt lediglich, dass diese vom Typ boolean (<code>true</code> oder
                <code>false</code>) sein muss. Typischerweise kommen die Relationszeichen <code>==</code>,
                <code>!=</code>, <code>&lt;</code> und <code>&gt;</code> zum Einsatz.
            </p>

            <note>
                <p>
                    Die <code>else if</code>-Anweisung ist eigentlich eine Kombination aus <code>if</code> und
                    <code>else</code>, die Programmierer erfunden haben, um sich das Leben zu erleichtern. Alternative
                    Lösung:
                </p>

                <code-block lang="javascript">
                    if (Bedingung) {
                        // ...Anweisungsblock 1
                    } else {
                        if (Bedingung) {
                            // ...Anweisungsblock 2
                        } else {
                            // ...Anweisungsblock 3
                        }
                    }
                </code-block>
            </note>
        </chapter>

        <chapter title="Bedingungsoperator bzw. Auswahloperator" id="auswahl-operator">
            <p>
                Für weniger komplexe Situationen können <code>if else</code>-Verzweigungen mithilfe des
                Bedingungsoperators <code>?:</code> ausgedrückt werden. Dieser erwartet drei Operanden: Eine Bedingung
                und zwei Ausdrücke, von denen je nach Ergebnis der Bedingung einer ausgeführt wird. Bedingte Anweisungen
                und Verzweigungen dienen dazu, abhängig von einer oder mehreren Bedingungen einen von mehreren Wegen im
                Programm einzuschlagen und die darin enthaltenen Anweisungen auszuführen. Der Bedingungsoperator dagegen
                dient dazu, einer Variablen abhängig von einer einzelnen Bedingung einen von zwei Werten zuzuweisen.
            </p>
            <p>
                Syntax: <code>Bedingung ? Ausdruck1: Ausdruck2;</code>
            </p>

            <code-block lang="javascript">
                label1.text = checkbox1.checked ? "Rot" : "Grün";
            </code-block>

            <p>
                Ist die Checkbox ausgewählt, dann ist der Rückgabewert <code>Rot</code>, ist das nicht der Fall, dann
                lautet der Rückgabewert <code>Grün</code>. Mit einem <code>if else</code>-Statement würde es wird folgt
                aussehen:
            </p>

            <code-block lang="javascript">
                if (checkbox1.checked == true)
                    label1.text = "Rot";
                else
                    label1.text = "Grün";
            </code-block>
        </chapter>

        <chapter title="Fallunterscheidung: switch-Verzweigung" id="auswahl-switch">
            <p>
                Mithilfe der Fallunterscheidung, der sog. <code>switch</code>-Verzweigung oder auch Mehrfachverzweigung
                genannt, kann ein Ausdruck, zum Beispiel eine Variable, mit mehreren möglichen Werten verglichen werden.
                Die zu unterscheidenden Werte sind in sogenannte <code>case</code>-Blöcke geordnet. Trifft kein
                <code>case</code>-Block zu, werden die Anweisungen nach dem Schlüsselwort <code>default</code> – hier in
                der Bedeutung »für alle anderen Fälle« – ausgeführt. Jeder <code>case</code>-Block einer
                <code>switch</code>-Verzweigung muss mit dem Befehl <code>break</code> abgeschlossen werden. Diese
                Anweisung soll signalisieren, dass die Prüfung abgeschlossen ist, wenn eine Fallkonstellation zutrifft
                und ausgeführt wurde.
            </p>
            <p>
                Die Syntax vom <code>switch-case</code>-Statement ist ein wenig gewöhnungsbedürftig. Sie ist zwar
                eigentlich leicht kürzer als eine <code>if</code>-Fallunterscheidung mit geschweiften Klammern,
                allerdings erfordert switch die <code>break</code>-Anweisung. Schlussendlich bleibt es eine
                Geschmacksfrage, für welche Variante man sich entscheidet.
            </p>
            <p>
                Wenn in einer <code>switch</code>-Fallunterscheidung die <code>break</code>-Anweisung weglassen wird,
                werden alle Anweisungen ab dem Fall, der zutrifft, ausgeführt. Dieses Verhalten kann manchmal gewünscht
                sein, wenn man beispielsweise für mehrere Fälle dieselben Anweisungen ausführen möchte.
            </p>

            <code-block lang="javascript">
                switch (Prüfausdruck) {
                    [case Wert1:]
                        //Anweisungen für Fall 1
                        break;
                    [case Wert2:]
                        //Anweisungen für Fall 2
                        break;
                    [case Wert3:]
                    [case Wert4:]
                    [case Wert5:]
                        //Anweisungen für Fall 3, 4 und 5
                        break;
                    [...]
                    [default:]
                        // Anweisungen für diejenigen Fälle,
                        // in denen keine der vorhergehenden
                        // Konstellationen erfüllt ist.
                        break;
                }
            </code-block>

            <note>
                <p>
                    Möchte man abhängig von booleschen Bedingungen einen von mehreren Wegen im Programm einschlagen,
                    sollten bedingte Anweisungen oder Verzweigungen verwendet werden. Mehrfachverzweigungen über die
                    <code>switch</code>-Anweisung dagegen sind für das Testen von booleschen Bedingungen in der Regel
                    nicht geeignet. Folgende <code>switch</code>-Anweisung würde theoretisch und auch praktisch
                    funktionieren, hierbei wird aber die <code>switch</code>-Anweisung zweckentfremdet:
                </p>

                <code-block lang="javascript">
                    // Keine Best Practice: boolesche Bedingungen innerhalb einer switch-Anweisung
                    let age = prompt('Für welches Alter suchen Sie Filmtipps?');

                    switch(true) {
                        case (age >= 18):
                            console.log('Filme mit FSK6, FSK12, FSK16 und FSK18 anzeigen.');
                            break;
                        case (age >= 16):
                            console.log('Filme mit FSK6, FSK12 und FSK16 anzeigen.');
                            break;
                        case (age >= 12):
                            console.log('Filme mit FSK6 und FSK12 anzeigen.');
                            break;
                        case (age >= 6):
                            console.log('Filme mit FSK6 anzeigen.');
                            break;
                    }
                </code-block>
            </note>

            <chapter title="Beispiel" id="auswahl-switch-beispiel">
                <p>
                    Der Vorteil der <code>switch</code>-Anweisung gegenüber der <code>if elseif else</code>-Verzweigung
                    kann anhand des folgenden Beispiels erläutert werden: Angenommen es wird eine Webanwendung
                    entwickelt, in der irgendeine Art von Testergebnissen ausgegeben werden soll. Abhängig vom
                    Testergebnis sollen dabei unterschiedliche Icons dargestellt werden: Fehlerhafte Tests
                    beispielsweise sollen ein Icon mit Namen <path>error.png</path> verwenden, bestandene Tests ein Icon
                    mit Namen <path>pass.png</path> usw. Das Testergebnis wird innerhalb der Anwendung über die Werte
                    <code>0</code> bis <code>3</code> codiert.
                </p>
                
                <table>
                    <tr>
                        <td>Testergebnis</td>
                        <td>Bedeutung</td>
                        <td>Verwendetes Bild</td>
                    </tr>
                    <tr>
                        <td><code>0</code></td>
                        <td>Test bestanden</td>
                        <td><path>pass.png</path></td>
                    </tr>
                    <tr>
                        <td><code>1</code></td>
                        <td>Infomeldung</td>
                        <td><path>info.png</path></td>
                    </tr>
                    <tr>
                        <td><code>2</code></td>
                        <td>Warnung</td>
                        <td><path>warning.png</path></td>
                    </tr>
                    <tr>
                        <td><code>3</code></td>
                        <td>Test fehlgeschlagen</td>
                        <td><path>error.png</path></td>
                    </tr>
                    <tr>
                        <td><code>4</code></td>
                        <td>unbekanntes Testergebnis</td>
                        <td><path>unknown.png</path></td>
                    </tr>
                    <tr>
                        <td><code>5</code></td>
                        <td>unbekanntes Testergebnis</td>
                        <td><path>unknown.png</path></td>
                    </tr>
                    <tr>
                        <td><code>-1</code></td>
                        <td>unbekanntes Testergebnis</td>
                        <td><path>unknown.png</path></td>
                    </tr>
                </table>

                <p>
                    Jetzt könnte man hingehen und das Testergebnis innerhalb einer
                    <code>if elseif else</code>-Verzweigung testen nach dem Motto »Wenn das Testergebnis den Wert
                    <code>0</code> hat, lade das Bild <path>pass.png</path>, wenn das Testergebnis den Wert
                    <code>1</code> hat, lade Bild <path>info.png</path> usw.«. Der entsprechende Code (in
                    <a href="javascript.topic">JavaScript</a>) würde dann wie folgt aussehen:
                </p>

                <code-block lang="javascript">
                    let testResultElement = document.getElementById('testResult');
                    let testResult = 0;              // Testergebnis, würde normalerweise berechnet
                    let icon = null;                 // Variable, die den Bildnamen enthalten wird

                    if(testResult === 0) {           // Prüfe das Testergebnis. Hat dieses den Wert 0,
                        icon = 'pass.png';           // wird der Bildname "pass.png" verwendet.
                    } else if(testResult === 1) {    // Hat das Testergebnis den Wert 1,
                        icon = 'info.png';           // wird der Bildname "info.png" verwendet.
                    } else if(testResult === 2) {    // Hat das Testergebnis den Wert 2,
                        icon = 'warning.png';        // wird der Bildname "warning.png" verwendet.
                    } else if(testResult === 3) {    // Hat das Testergebnis den Wert 3,
                        icon = 'error.png';          // wird der Bildname "error.png" verwendet.
                    } else {                         // Für alle anderen Werte
                        icon = 'unknown.png';        // wird der Bildname "unknown.png" verwendet.
                    }

                    testResultElement.src = 'img/' + icon;  // Setzen des jeweiligen Bildes
                </code-block>

                <p>
                    Ein Programm, das das Gleiche macht, aber statt einer <code>if elseif else</code>-Verzweigung eine
                    <code>switch</code>-Verzeigung verwendet würde (in <a href="javascript.topic">JavaScript</a>) wie
                    folgt aussehen:
                </p>

                <code-block lang="javascript">
                    let testResultElement = document.getElementById('testResult');
                    let testResult = 0;        // Testergebnis, würde normalerweise berechnet
                    let icon = null;           // Variable, die den Bildnamen enthalten wird

                    switch(testResult) {           // Prüfe das Testergebnis
                        case 0:                    // Hat dieses den Wert 0,
                            icon = 'pass.png';     // wird der Bildname "pass.png" verwendet.
                            break;                 // Abbruch der switch-Anweisung
                        case 1:                    // Hat das Testergebnis den Wert 1,
                            icon = 'info.png';     // wird der Bildname "info.png" verwendet.
                            break;                 // Abbruch der switch-Anweisung
                        case 2:                    // Hat das Testergebnis den Wert 2,
                            icon = 'warning.png';  // wird der Bildname "warning.png" verwendet.
                            break;                 // Abbruch der switch-Anweisung
                        case 3:                    // Hat das Testergebnis den Wert 3,
                            icon = 'error.png';    // wird der Bildname "error.png" verwendet.
                            break;                 // Abbruch der switch-Anweisung
                        default:                   // Für alle anderen Werte
                            icon = 'unknown.png';  // wird der Bildname "unknown.png" verwendet.
                    }

                    testResultElement.src = 'img/' + icon;
                </code-block>
            </chapter>
        </chapter>
    </chapter>

    <chapter title="Schleifen" id="schleifen">
        <p>
            Bei der Anwendung von Schleifen in einem Programm geht es um die Wiederholung von bestimmten Vorgängen.
            Diese Vorgänge können identisch sein oder in Bestandteilen sich von Wiederholung zu Wiederholung nach einem
            bestimmten Muster ändern. Diese Variation wird durch den Schleifendurchlauf selbst bestimmt und
            beispielsweise durch die Schleifenvariablen gesteuert. In der Theorie existieren verschiedene
            Schleifentypen, die auch Eingang in die Programmiersprachen gefunden haben. Es gibt kopfgesteuerte und
            fußgesteuerte Schleifen:
        </p>

        <list>
            <li>
                Wird die Bedingung, ob die Schleife ein weiteres Mal durchlaufen wird, vor dem Schleifendurchlauf
                geprüft, so spricht man von einer abweisenden Aussagenschleife bzw. einer <b>kopfgesteuerten
                Schleife</b>. Ist die Bedingung schon bei der ersten Prüfung nicht erfüllt, so wird die Schleife niemals
                durchlaufen.
            </li>
            <li>
                Dagegen werden nicht abweisende Schleifen bzw. <b>fußgesteuerte Schleifen</b> mindestens einmal
                durchlaufen. Das Abbruch- bzw. Terminationskriterium wird am Ende des Schleifendurchlaufs überprüft.
            </li>
        </list>

        <chapter title="Zählschleifen – die for-Schleife" id="schleifen-for">
            <p>
                Zählschleifen eignen sich immer dann, wenn von Vornhinein klar ist, wie häufig eine bestimmte Anweisung
                wiederholt werden soll. Diese Schleifenform gibt es in nahezu allen Programmiersprachen. Eingeleitet
                wird eine Zählschleife meist über das Schlüsselwort <code>for</code> (weswegen die Zählschleife oft auch
                als <code>for</code>-Schleife bezeichnet wird). Innerhalb des darauf folgenden runden Klammernpaares
                werden drei Dinge definiert:
            </p>

            <list>
                <li>
                    <b>Initialisierung</b>: Hier wird der Code definiert, der vor Ausführung der gesamten Schleife
                    einmal ausgeführt werden soll. In der Regel initialisiert man hier die Zählervariable.
                </li>
                <li>
                    <b>Bedingung</b>: Hier wird der Code hingeschrieben, der vor Ausführung jeder Schleifeniteration
                    überprüft, ob die Schleife weiter ausgeführt werden soll oder nicht. In der Regel überprüft man
                    hier, ob die Zählervariable eine bestimmte Grenze (beispielsweise die Länge eines Arrays) schon
                    erreicht hat.
                </li>
                <li>
                    <b>Inkrementierungsausdruck</b>: Hier wird der Code hingeschrieben, der nach Ausführen jeder
                    Schleifeniteration ausgeführt werden soll. In der Regen zählt man hier die Zählervariable hoch. Je
                    nach Situation in der Praxis kann man die Schleife vor- oder rückwärts durchlaufen, dabei wird ein
                    Dekrementierungsausdruck verwendet.
                </li>
            </list>

            <p>
                Initialisierung, Ausdruck und Inkrementierungsausdruck sind dabei über Semikolons voneinander getrennt.
                Der eigentliche Code, der mehrfach ausgeführt werden soll, wird folglich (meist in geschweiften
                Klammern) in den sogenannten Schleifenkörper, der unmittelbar auf die schließende runde Klammer folgt
                definiert.
            </p>

            <code-block lang="javascript">
                for (
                    Initialisierung;           // wird vor Ausführen der Schleife ausgeführt
                    Bedingung;                 // wird vor Ausführen einer Iteration überprüft
                    Inkrementierungsausdruck;  // wird am Ende einer Iteration ausgeführt
                ) {
                    Schleifenkörper            // wird in jeder Iteration einmal ausgeführt
                }
            </code-block>

            <p>
                Bezüglich der Reihenfolge geschieht also folgendes:
            </p>

            <list style="decimal">
                <li>
                    Zu Beginn der Schleife wird einmal die Initialisierungsanweidung ausgeführt.
                </li>
                <li>
                    Anschließend wird die Bedingung überprüft. Ist diese wahr ...
                </li>
                <li>
                    ... wird der Schleifenkörper ausgeführt und ...
                </li>
                <li>
                    ... anschließend der Inkrementierungsausdruck ausgewertet.
                </li>
                <li>
                    Dann geht es weiter mit Überpüfen der Bedingung, Ausführen des Schleifenkörpers,
                    Inkrementierungsausdruck usw. solange bis die Bedingung nicht mehr erfüllt ist.
                </li>
                <li>
                    Ist dies der Fall, sprich, die Bedingung ergibt false, wird die Schleifenausführung beendet.
                </li>
            </list>

            <chapter title="Flussdiagramm" id="schleifen-for-flussdiagramm">
                <img src="swe-pk-grundlagen-kontrollstrukturen-for-flussdiagramm.png"
                     alt="Flussdiagramm der for-Schleife"/>

                <note>
                    <p><b>Der Variablenname <code>i</code></b></p>

                    <p>
                        Der Name <code>i</code> ist für sich genommen natürlich kein aussagekräftiger Variablenname, im
                        Kontext von Schleifen ist dieser Name für die Zählvariable aber mittlerweile recht gebräuchlich.
                        Übrigens steht <code>i</code> als Abkürzung von Index, wobei diese Bezeichnung dem einen oder
                        anderen vielleicht auch in dieser Form aus der Mathematik, beispielsweise aus Summenformeln,
                        bekannt sein dürfte. Schachtelt man <code>for</code>-Schleifen ineinander, so nimmt man als
                        Zählvariablen dann die Buchstaben <code>i</code>, <code>j</code> usw. Natürlich kann man als
                        Schleifenvariablen auch andere Bezeichnungen verwenden, die aussagekräftiger sind und damit die
                        Lesbarkeit des Quellcodes erhöhen.
                    </p>
                </note>
            </chapter>

            <chapter title="Arbeiten mit Arrays" id="schleifen-for-arrays">
                <p>
                    Greift man innerhalb einer <code>for</code>-Schleife über einen Index auf eine Liste, wie im
                    Beispiel auf ein Array, zu, so besteht die Gefahr, dass ein Zugriff auf die Datenstruktur außerhalb
                    des zulässigen Indexbereichs durchgeführt wird. Das wäre dann der Fall, wenn man beispielsweise
                    definieren würde, dass die Schleife 7-mal durchlaufen werden soll, jedoch im Array nur 4 Elemente
                    gespeichert sind. In diesem Fall würde es zu einem Fehler führen, den man erst zur Laufzeit des
                    Programms feststellen könnte. Dies kann man vermeiden, indem der Grenzwert aus der Datenstruktur
                    selbst bestimmt wird. Werden die Elemente eines Arrays durchlaufen, so könnte man die Anzahl der
                    Elemente des Arrays ermitteln und als Bedingung <code>i &lt; AnzahlDerElemente</code> setzen.
                </p>
            </chapter>

            <chapter title="Verschachtelung" id="schleifen-for-verschachtelung">
                <p>
                    Hinsichtlich der Anweisungen, die in einem Schleifenkörper vorkommen, gibt es keinerlei
                    Einschränkungen. So ist es beispielsweise auch möglich, andere Schleifen innerhalb eines
                    Schleifenkörpers auszuführen. Diese Konstruktionen nennt man dann aufgrund dieser Verschachtelung
                    auch geschachtelte Schleifen bzw. verschachtelte Schleifen. Hier wird jede Schleifeniteration der
                    äußeren Schleife die komplette innere Schleife ausgeführt.
                </p>

                <code-block lang="php">
                    <![CDATA[
                    // Beispiel in PHP
                    for ($i = 0; $i <= 10; $i++) {
                        echo("Reihe $i: ");
                        for ($j = 0; $j <= 10; $j++) {
                            echo($j * $i . " ");
                        }
                        echo("<br />");
                    }
                    ]]>
                </code-block>

                <code-block>
                    Reihe 1: 1 2 3 4 5 6 7 8 9 10
                    Reihe 2: 2 4 6 8 10 12 14 16 18 20
                    Reihe 3: 3 6 9 12 15 18 21 24 27 30
                    Reihe 4: 4 8 12 16 20 24 28 32 36 40
                    Reihe 5: 5 10 15 20 25 30 35 40 45 50
                    Reihe 6: 6 12 18 24 30 36 42 48 54 60
                    Reihe 7: 7 14 21 28 35 42 49 56 63 70
                    Reihe 8: 8 16 24 32 40 48 56 64 72 80
                    Reihe 9: 9 18 28 36 45 54 63 72 81 90
                    Reihe 10: 10 20 30 40 50 60 70 80 90 100
                </code-block>

                <note>
                    <p><b>Zählervariablen bei geschachtelten Schleifen</b></p>

                    <p>
                        Bei geschachtelten Schleifen sollte immer eine neue Zählervariable verwendet werden, damit sich
                        die einzelnen Schleifen nicht gegenseitig in die Quere kommen. Als Konvention hat sich die
                        Verwendung der Namen <code>i</code>, <code>j</code>, <code>k</code>, <code>l</code> usw.
                        durchgesetzt.
                    </p>
                </note>
                <note>
                    <p><b>Maximale Tiefe von geschachtelten Schleifen</b></p>

                    <p>
                        Prinzipiell können Schleifen beliebig »tief« verschachtelt werden – verschachtelte Schleifen
                        können ihrerseits wieder Schleifen enthalten, diese ebenfalls usw. In der Praxis ist es aber
                        recht unüblich, mehr als drei Verschachtelungsebenen zu verwenden, da der hierfür notwendige
                        Code schnell sehr unübersichtlich bzw. schwer verständlich wird.
                    </p>
                </note>
            </chapter>
        </chapter>

        <chapter title="Kopfgesteuerte Schleifen – die while-Schleife" id="schleifen-while">
            <p>
                Die <code>while</code>-Schleife ist eine kopfgesteuerte Schleife und gilt als Mutter der Schleifen.
                Mutter deswegen, weil sie in den meisten Programmiersprachen vorkommt und aus ihr die anderen
                Schleifenarten gebildet werden können. Beide Schleifenarten, d.h. kopfgesteuerte Schleifen und
                fußgesteuerte Schleifen, funktionieren vom Prinzip her gleich: Der Zweck beider Schleifen ist es, eine
                oder mehrere Anweisungen wiederholt auszuführen, und zwar so lange, wie eine gegebene boolesche
                Bedingung erfüllt ist. Der Unterschied der beiden Schleifenarten liegt darin, zu welchem Zeitpunkt die
                boolesche Überprüfung stattfindet.
            </p>
            <p>
                Bei der kopfgesteuerten Schleife wird als Erstes geprüft, ob die boolesche Bedingung erfüllt ist. Ist
                dies der Fall, wird der Code in den geschweiften Klammern (dem Schleifenkörper) ausgeführt. Ist dagegen
                die Bedingung nicht oder nicht mehr erfüllt, wird der Schleifenkörper nicht (mehr) ausgeführt und die
                Ausführung des Programms nach der Schleife fortgesetzt.
            </p>

            <chapter title="Syntax" id="schleifen-while-syntax">
                <code-block lang="javascript">
                    while (Bedingung) {
                        // Schleifenkörper
                    }
                </code-block>
            </chapter>

            <chapter title="Flussdiagramm" id="schleifen-while-flussdiagramm">
                <img src="swe-pk-grundlagen-kontrollstrukturen-while-flussdiagramm.png"
                     alt="Flussdiagramm der while-Schleife"/>
            </chapter>
        </chapter>

        <chapter title="Fußgesteuerte Schleifen – die do-while-Schleife" id="schleifen-dowhile">
            <p>
                Die fußgesteuerte Schleife funktioniert vom Prinzip her ähnlich wie die kopfgesteuerte Schleife,
                allerdings genau entgegengesetzt. Mit anderen Worten: bevor die boolesche Bedingung überprüft wird, wird
                bereits der Schleifenkörper einmal ausgeführt. Eingeleitet wird diese meist über das Schlüsselwort do,
                gefolgt von einem Paar geschweiften Klammern, die den Schleifenkörper umfassen. Nach den schließenden
                Klammern erst folgt das <code>while</code>-Schlüsselwort, gefolgt von der booleschen Bedingung.
            </p>
            <p>
                Die fußgesteuerte Schleife wird aufgrund der verwendeten Schlüsselwörter auch als
                <code>do while</code>-Schleife bezeichnet.
            </p>

            <chapter title="Syntax" id="schleifen-dowhile-syntax">
                <code-block lang="javascript">
                    do {
                        // Schleifenkörper
                    } while (Bedingung);
                </code-block>
            </chapter>

            <chapter title="Flussdiagramm" id="schleifen-dowhile-flussdiagramm">
                <img src="swe-pk-grundlagen-kontrollstrukturen-dowhile-flussdiagramm.png"
                     alt="Flussdiagramm der do-while-Schleife"/>
            </chapter>

            <chapter title="Kopfgesteuerte vs. fußgesteuerte Schleifen" id="schleifen-dowhile-unterschiede">
                <p>
                    In der Praxis wird die <code>while</code>-Schleife öfter als die <code>do while</code>-Schleife
                    verwendet, da hierdurch sichergestellt ist, dass der Schleifenkörper nur dann ausgeführt wird, wenn
                    die entsprechende Bedingung erfüllt ist. Die <code>do while</code>-Schleife sollte in der Regel nur
                    dann verwendet werden, der Schleifenkörper mindestens einmal ausgeführt werden soll.
                </p>
                <p>
                    Wie auch Zählschleifen lassen sich kopfgesteuerte und fußgesteuerte Schleifen verschachteln.
                    Prinzipiell kann auch jeder Schleifentyp in allen anderen Schleifentypen verwendet werden.
                </p>
            </chapter>
        </chapter>

        <chapter title="Die foreach-Schleife" id="schleifen-foreach">
            <p>
                Mit der <code>foreach</code>-Schleife kann nacheinander jedes Element einer Liste durchlaufen werden.
                Natürlich ist es auch möglich, dies mit anderen Schleifenkonstruktionen nachzubilden, zum Beispiel
                mithilfe einer <code>for</code>-Schleife. Mithilfe der <code>foreach</code>-Schleife können jedoch
                einige Konstellationen einfacher und damit fehlerfreier abgebildet werden. Ein besonderes Merkmal dieser
                Schleifenform besteht darin, dass keine separate Schleifenvariable für die Steuerung und die Prüfung der
                Bedingung benötigt wird. Sämtliche Informationen werden automatisch aus der zu durchlaufenden Liste
                entnommen.
            </p>

            <chapter title="Beispiel in C#" id="schleifen-foreach-beispiel">
                <code-block lang="javascript">
                    string[] Laender = { "Deutschland", "Italien", "Spanien", "Portugal" };
                    foreach (string Land in Laender) {
                        textBox.Text = Laender[i];
                    }
                </code-block>
            </chapter>
        </chapter>

        <chapter title="Endlosschleifen" id="schleifen-endlosschleife">
            <p>
                Eine Schleife wiederholt einen Vorgang. Das geschieht so lange, bis eine Bedingung für ein erneutes
                Durchlaufen der Schleife nicht mehr erfüllt ist. Werden für die Prüfung der Abbruchbedingung numerische
                Werte herangezogen, ist darauf zu achten, dass dieser bestimmte Wert auch wirklich jeweils erreicht
                wird. Rechenergebnisse können durch den Computer durch die Kalkulation mithilfe von Näherungswerten
                verfälscht werden. Ein Beispiel: Die Abbruchbedingung lautet <code>a==3</code>. Wenn <code>a</code> das
                Ergebnis einer mathematischen Operation ist und aufgrund von Rundungen vielleicht <code>2,99</code>
                lautet, so wird diese Bedingung nie erfüllt und in der Folge die Schleife endlos durchlaufen. Abhilfe
                kann man zum Beispiel erreichen, wenn man die Prüfung nicht gegen den exakten Wert durchführt, sondern
                eine bestimmte Toleranzgrenze, d.h. eine Fehlerschranke zulässt.
            </p>
        </chapter>

        <chapter title="Schleifen und Schleifeniterationen vorzeitig abbrechen" id="schleifen-abbrechen">
            <p>
                Viele Programmiersprachen bieten ein Schlüsselwort, mit dem eine Schleife vorzeitig abgebrochen werden
                kann. In JavaScript wird das Schlüsselwort <code>break</code> für einen kompletten Schleifenabbruch
                verwendet und das Schlüsselwort <code>continue</code>, um die aktuelle Schleifeniteration abzubrechen
                (und mit der nächsten Schleifeniteration fortzufahren.
            </p>

            <chapter title="Flussdiagramm für das Abbrechen einer Zählschleife" id="schleifen-abbrechen-break">
                <img src="swe-pk-grundlagen-kontrollstrukturen-break-flussdiagramm.png"
                     alt="Flussdiagramm des break-Statements"/>
            </chapter>

            <chapter title="Flussdiagramm für das Abbrechen einer Schleifeniteration in einer Zählschleife"
                     id="schleifen-abbrechen-continue">
                <img src="swe-pk-grundlagen-kontrollstrukturen-continue-flussdiagramm.png"
                     alt="Flussdiagramm des continue-Statements"/>
            </chapter>
        </chapter>
    </chapter>

    <chapter title="Komplexe Bedingungen" id="komplex">
    </chapter>

    <chapter title="Sprunganweisung: goto" id="goto">

        <chapter title="Beispiel in PHP" id="goto-beispiel-php">
        </chapter>
    </chapter>

    <chapter title="Quellen" id="quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836240826, "PHP 7 und MySQL - Das umfassende Handbuch", Christian Wenz &amp; Tobias Hauser, 2016
        </tip>
        <tip>
            <b>(BUCH)</b>
            978-3836244763, "Handbuch für Softwareentwickler", Veikko Krypczyk &amp; Elena Bochkor, 2018
        </tip>
        <tip>
            <b>(BUCH)</b>
            978-3836256971, "JavaScript - Das umfassende Handbuch", Philip Ackermann, 2018
        </tip>
    </chapter>
</topic>