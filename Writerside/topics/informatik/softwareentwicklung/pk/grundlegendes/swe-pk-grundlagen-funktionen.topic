<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Funktionen und Methoden" id="swe-pk-grundlagen-funktionen">
    <show-structure for="chapter,procedure" depth="2"/>

    <chapter title="Einleitung" id="einleitung">
        <p>
            Je umfangreicher die Programme werden und je komplexer die Software ist, desto mehr Quelltext muss verwaltet
            werden. Dazu kommt, dass sich mit der Zeit gewisse Aufgaben wiederholen. Es ist daher nur sinnvoll, den
            Quelltext irgendwie in wiederverwendbare Codebausteine zusammenzufassen. Dies hat zum einen den Vorteil,
            dass man den Überblick im Programm nicht verliert und zum anderen, dass diese Funktionen wiederverwendet
            werden können, statt jedes Mal einzelne Anweisungen erneut hintereinander zu tippen. Eine Funktion lässt
            sich nämlich an unterschiedlichen Stellen innerhalb eines Programms aufrufen.
        </p>
    </chapter>

    <chapter title="Funktionsparameter" id="funktionsparameter">
        <p>
            Mithilfe von Funktionsparametern können Informationen an eine Funktion übergeben werden, die dann innerhalb
            der Funktion zur Verfügung stehen. Um zu definieren, dass eine Funktion Parameter erwartet, werden die Namen
            der Parameter in fast allen Programmiersprachen in den runden Klammern, der sogenannten Parameterliste,
            gelistet. Bei streng typisierten Programmiersprachen muss man bei der Funktionsdeklaration auch die
            Datentypen der einzelnen Parameter definieren.
        </p>

        <code-block lang="javascript" collapsed-title="Funktionsdeklaration mit Parameter in JavaScript"
                    collapsible="true">
            function showMessage(message) {
                condole.log(message);
            }
        </code-block>

        <p>
            Um die Funktion folglich mit einem konkreten Argument aufzurufen, wird dieses beim Funktionsaufruf meist in
            den runden Klammern, der Argumentliste, angegeben. In der Praxis verwendet man die Begriffe Parameter und
            Argument gerne mal als synonym, auch wenn sie eigentlich eine unterschiedliche Bedeutung haben. Unter
            Parameter versteht man das, was innerhalb der Signatur einer Funktion bzw. Methode aufgeführt ist. Die
            Signatur einer Funktion bzw. Methode wiederum setzt sich im Falle von JavaScript aus dem Namen und der
            Anzahl der Parameter zusammen. Unter dem Begriff Argument hingegen versteht man in der Regel das, was
            konkret der jeweiligen Funktion bzw. Methode beim Aufruf als Wert übergeben wird.
        </p>

        <code-block lang="javascript" collapsed-title="Funktionsaufruf mit Argument in JavaScript"
                    collapsible="true">
            showMessage('Moriz: Hallo Max');
            showMessage('Max: Hallo Moriz');
        </code-block>

        <p>
            Mehrere Funktionsparameter werden meist Kommasepariert in der Parameterliste, also innerhalb der runden
            Klammern, gelistet. Um eine Funktion, die mehrere Parameter erwartet, aufzurufen, werden auch die
            entsprechenden Argumente kommasepariert hintereinander aufgeschrieben.
        </p>

        <code-block lang="javascript" collapsed-title="Funktionsaufruf mit Argument in JavaScript"
                    collapsible="true">
            function printPersonInformation(firstName, lastName, age) {
                console.log('Vorname: ' + firstName);
                console.log('Nachname: ' + lastName);
                console.log('Alter: ' + age);
            }

            printPersonInformation('Max', 'Mustermann', 44);
            printPersonInformation('Moritz', 'Mustermann', 55);
        </code-block>
        <code-block lang="javascript" collapsed-title="Ausgabe" collapsible="true">
            Vorname: Max
            Nachname: Mustermann
            Alter: 44
            Vorname: Moritz
            Nachname: Mustermann
            Alter: 55
        </code-block>
    </chapter>

    <chapter title="Rückgabewerte" id="rueckgabewerte">
        <p>
            Genauso wie es möglich ist, über Argumente bzw. Parameter bestimmte Informationen an eine Funktion zu
            übergeben, ist es auch möglich, aus einer Funktion heraus Informationen an den aufgerufenen Code
            zurückzugeben. Diese Information, die eine Funktion zurückgibt, nennt man Rückgabewert. Ein Rückgabewert
            wird innerhalb der einer Funktion meist über das Schlüsselwort <code>return</code>, gefolgt von dem Wert,
            der zurückgegeben werden soll, definiert.
        </p>
    </chapter>

    <chapter title="Funktionen im Detail" id="detail">
        <chapter title="Der Funktionsaufruf-Stack" id="detail-funktionsaufrufstack">
            <p>
                Innerhalb einer Anwendung werden alle Anweisungen der Reihe nach, also von oben nach unten, ausgeführt.
                Trifft das Programm bei der Ausführung nun auf einen Funktionsaufruf, »springt« er in diese Funktion
                hinein und führt alle dort enthaltenen Anweisungen aus. Am Ende der jeweiligen Funktion »springt« der
                Interpreter wieder aus der Funktion heraus und fährt mit der Ausführung der Anweisung fort, die nach dem
                Funktionsaufruf im Programm steht. Liefert die Funktion dabei einen Rückgabewert, kann mit diesem in dem
                aufgerufenen Code weitergearbeitet werden.
            </p>
            <p>
                Intern wird dazu ein sogenannter Funktionsaufruf-Stack (bzw. Methodenaufruf-Stack) verwaltet. Dabei
                handelt es sich um einen »Stapel« von Funktionen, über die nachvollzogen werden kann, welche Funktionen
                welche andere Funktion aufgerufen hat. Also: Jedes Mal, wenn das Programm in eine aufgerufene Funktion
                hineinspringt, werden Informationen zu dieser Funktion auf dem Aufrufstack gelegt. Springt das Programm
                aus der Funktion wider heraus, werden die entsprechenden Informationen wieder von dem Aufrufstack
                entfernt.
            </p>

            <img src="swe-pk-grundlagen-funktionen-funktionsaufrufstack.png" alt="Funktionsaufrufstack"/>

            <code-block lang="javascript" collapsed-title="Funktionsaufruf mit Argument in JavaScript"
                        collapsible="true">
                function doSomething() {
                    doSomethingB();
                }
                function doSomethingB() {
                    doSomethingC();
                }
                function doSomethingC() {
                    doSomethingD();
                }
                function doSomethingD() {

                }
            </code-block>
        </chapter>

        <chapter title="Ausführungskontexte" id="detail-ausfuehrungskontext">
        </chapter>

        <chapter title="Gültigkeitsbereiche" id="detail-gueltigkeitsbereiche">
        </chapter>

        <chapter title="Kette von Gültigkeitsbereichen" id="detail-gueltigkeitsbereiche-kette">
        </chapter>

        <chapter title="Kontextobjekt" id="detail-">
        </chapter>
    </chapter>

    <chapter title="Rekursion" id="rekursion">
    </chapter>

    <chapter title="Quellen" id="quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836256971, "JavaScript - Das umfassende Handbuch", Philip Ackermann, 2018
        </tip>
    </chapter>
</topic>