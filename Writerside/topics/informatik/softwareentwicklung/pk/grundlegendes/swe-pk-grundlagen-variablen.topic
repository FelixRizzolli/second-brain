<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="swe-pk-grundlagen-variablen"
       title="Variablen, Konstanten und Typisierung"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">
    <show-structure depth="2" for="chapter,procedure"/>

    <chapter id="variablen" title="Variablen">
        <p>
            Um mit einem Algorithmus eine Problemstellung zu lösen, ist es in den meisten Fällen notwendig,
            vorübergehend bestimmte Informationen zwischenzuspeichern. Dies geschieht über sogenannte Variablen. Das
            sind nichts anderes als veränderliche (variable) Zwischenspeicher, in denen Werte abgelegt werden können und
            auf die später zugegriffen werden kann.
        </p>
        <p>
            Um eine Variable verwenden zu können, sind zwei Schritte notwendig:
        </p>

        <list>
            <li>
                Die Variablendeklaration – hierbei wird die Variable erstellt, auf die dann im späteren Programmablauf
                zugegriffen werden kann.
            </li>
            <li>
                Die Variableninitialisierung – nachdem eine Variable deklariert wurde, kann ihr ein Wert zugewiesen
                werden. Hierbei spricht man oft auch von einer Wertzuweisung.
            </li>
        </list>

        <chapter id="variablen-reserviert" title="Reservierte Schlüsselwörter">
            <p>
                Die meisten Programmiersprachen haben einige reservierte Schlüsselwörter, die Bestandteil der Sprache
                sind und als Kennzeichner für den Compiler bzw. Interpreter dienen. Würden diese Schlüsselwörter als
                Variablennamen verwendet werden, käme der Compiler/Interpreter durcheinander und würde entsprechend
                einen Fehler melden. Beispiele aus der Programmiersprache JavaScript wären: <code>let</code>,
                <code>var</code>, <code>async</code>, <code>await</code>, <code>break</code>, <code>case</code>,
                <code>class</code>, <code>catch</code>, <code>const</code>, ...
            </p>
        </chapter>

        <chapter id="variablen-standardvariablen" title="Vergebene Variablennamen: Standardvariablen">
            <p>
                Während man Schlüsselwörter aus syntaktischen Gründen erst gar nicht als Variablennamen verwenden kann,
                gibt es in einigen Programmiersprachen noch Namen, die zwar verwendet werden können, aber nicht
                verwendet werden sollten. Die Rede ist von solchen Namen, die bereits für existierende sogenannte
                globale Standardvariablen vergeben sind. In JavaScript wären Beispiele für Standardvariablen:
                <code>alert</code>, <code>closed</code>, <code>frames</code>, <code>open</code>, <code>blur</code>,
                <code>document</code>, <code>location</code>, <code>screen</code>, <code>close</code>,
                <code>focus</code>, <code>navigator</code> und <code>window</code>.
            </p>
        </chapter>

        <chapter id="variablen-erlaubt" title="Erlaubte Zeichen">
            <p>
                Unabhängig von den Schlüsselwörtern und bereits vergebenen Variablennamen können innerhalb von
                Variablennamen auch nur bestimmte Zeichen verwendet werden. Welche verwendet werden dürfen und welche
                nicht, ist abhängig von der Programmiersprache.
            </p>
        </chapter>

        <chapter id="variablen-amenskonventionen" title="Namenskonventionen">
            <p>
                Hier gibt es Informationen zu den Namenskonventionen:
                <a href="swe-pk-richtlinien.topic#namingconventions">
                    Programmierrichtlinien - Namenskonventionen
                </a>
            </p>
        </chapter>
    </chapter>

    <chapter id="konstanten" title="Konstanten">
        <p>
            Der Wert einer Variable kann zu beliebiger Zeit geändert bzw. überschrieben werden. Manchmal möchte man das
            aber verhindern, sprich, man braucht eigentlich so etwas wie eine »Variable«, deren Wert man nicht
            überschreiben kann. Diese »Variablen« werden in der Programmierung als Konstanten bezeichnet, weil sie eben
            nicht variabel, sondern konstant sind: Einmal zugewiesen, bleibt der Wert einer Konstante derselbe. Für
            Konstanten wird meistens die
            <a href="swe-pk-richtlinien.topic#namingconventions-schreibweisen">
                Schreibweise
            </a>
            SCREAMING_SNAKE_CASE oder SCREAMING-KEBAB-CASE verwendet.
        </p>
    </chapter>

    <chapter id="typisierung" title="Typisierung">
        <p>
            Das Typsystem ist eine Komponente, die in Programmiersprachen zum Einsatz kommt, um den Wertebereich von
            Variablen einzuschränken. Programmiersprachen, die über ein Typsystem verfügen, nennt man typisiert. Durch
            die Typisierung soll sichergestellt werden, dass auf Inhalten von Variablen keine Operationen ausgeführt
            werden, die syntaktisch oder semantisch fehlerhaft sind.
        </p>
        <p>
            Ein Typsystem wird durch folgende Bestandteile gebildet:
        </p>

        <list>
            <li>
                Die Typen selbst, die entweder mittels Typdefinition erzeugt oder in der jeweiligen Sprache fest
                integriert (als primitive Datentypen) sind.
            </li>
            <li>
                Die Möglichkeit Programmelemente (wie Variablen, Methodenparameter usw.) mittels Typannotation mit einem
                bestimmten Typ zu deklarieren.
            </li>
            <li>
                Regeln, nach denen die Werte von Ausdrücken einem bestimmten Typ zugeordnet werden.
            </li>
            <li>
                Regeln zur Prüfung der Zuweisungskompatibilität von Typen.
            </li>
            <li>
                Optionale weitere Sprachbestandteile wie typbezogene Operatoren (z.B. <code>instanceof</code> in
                diversen Sprachen) oder eine Reflection API zur Ermittlung und Prüfung von Typinformationen zur
                Laufzeit.
            </li>
        </list>

        <p>
            Typsysteme lassen sich entlang dreier Dimensionen klassifizieren
        </p>

        <list>
            <li>
                <p>
                    <b>
                        starke Typisierung (eng.
                        <emphasis>strong typing</emphasis>
                        ) und schwache Typisierung (eng.
                        <emphasis>weak typing</emphasis>
                        )
                    </b>
                </p>
                <p>
                    Wie streng unterscheidet die Sprache die Typen? Welche Datentypen können ineinander umgewandelt
                    werden? Erlaubt sie implizite Typumwandlungen? Erlaubt sie unsichere Typumwandlungen, bei denen z.B.
                    Werte verloren gehen können?
                </p>
            </li>
            <li>
                <p>
                    <b>
                        dynamische Typisierung (eng.
                        <emphasis>dynamic typing</emphasis>
                        ) und statische Typisierung
                        (eng.
                        <emphasis>static typing</emphasis>
                        )
                    </b>
                </p>
                <p>
                    Typprüfungen können zur Übersetzungszeit oder zur Laufzeit vorgenommen werden. Im ersten Fall
                    spricht man von statischer Typprüfung, im zweiten von dynamischer Typprüfung. Statische Typprüfungen
                    erlauben das Auffinden von Zuweisungsfehlern vor der Laufzeit, während sie bei dynamischer
                    Typisierung erst zur Laufzeit auffallen. Dafür erlaubt Letztere ein mächtiges Verhalten wie die
                    korrekte Verarbeitung eigentlich inkompatibler Typen und Erweiterungen zur Laufzeit.
                </p>
            </li>
            <li>
                <p>
                    <b>
                        explizite Typisierung (eng.
                        <emphasis>explicit typing</emphasis>
                        ) und implizite Typisierung
                        (eng.
                        <emphasis>implicit typing</emphasis>
                        )
                    </b>
                </p>
                <p>
                    Werden die Dateitypen explizit genannt oder per Typableitung (eng. type interface) ermittelt?
                </p>
            </li>
            <li>
                <p>
                    <b>
                        optionale Typisierung (eng.
                        <emphasis>optional typing</emphasis>
                        )
                    </b>
                </p>
                <p>
                    Typ-Annotationen werden zur Unterstützung der Programmierer genutzt, haben aber keine Auswirkungen
                    auf die tatsächliche Umsetzung durch den Compiler zur Laufzeit.
                </p>
            </li>
        </list>

        <p>
            Zu den Aufgaben eines Typsystems gehören:
        </p>

        <list>
            <li>
                Erkennung von Typverletzungen bei der Übersetzung und Ausführung. Die Typinformation kann dabei als eine
                redundante Information aufgefasst werden, die verhindert, dass Variablen Werte zugewiesen werden, welche
                die betreffende Variable niemals annehmen sollte (sogenannte Typinvarianten). Sie verhindert so die
                Ausführung von Operationen auf den Inhalten dieser Variablen, die entweder unmöglich oder aus
                programmlogischen Gründen nicht sinnvoll ist.
            </li>
            <li>
                Typumwandlung (eng.
                <emphasis>type conversion</emphasis>
                ), also Umwandlung bzw. Beförderung und
                Degradierung von Typen (eng. type
                <emphasis>promotion</emphasis>
                ,
                <emphasis>type demotion</emphasis>
                ).
                In vielen objektorientierten Sprachen stehen hierfür die drei Möglichkeiten
                <emphasis>up cast</emphasis>
                ,
                <emphasis>down cast</emphasis>
                und
                <emphasis>cross cast</emphasis>
                zur
                Verfügung.
            </li>
        </list>
    </chapter>

    <chapter id="quellen" title="Quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836240826, "PHP 7 und MySQL - Das umfassende Handbuch", Christian Wenz &amp; Tobias Hauser, 2016
        </tip>
        <tip>
            <b>(BUCH)</b>
            978-3836244763, "Handbuch für Softwareentwickler", Veikko Krypczyk &amp; Elena Bochkor, 2018
        </tip>
        <tip>
            <b>(BUCH)</b>
            978-3836256971, "JavaScript - Das umfassende Handbuch", Philip Ackermann, 2018
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://de.wikipedia.org/wiki/Typisierung_(Informatik)" ignore-vars="true">
                https://de.wikipedia.org/wiki/Typisierung_(Informatik)
            </a>, 2023-03-27 16:00
        </tip>
    </chapter>
</topic>