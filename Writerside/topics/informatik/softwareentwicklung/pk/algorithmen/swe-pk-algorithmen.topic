<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Algorithmen" id="swe-pk-algorithmen">
    <show-structure for="chapter,procedure" depth="2"/>

    <chapter title="Einleitung" id="einleitung">
        <p>
            Das Grundprinzip der Computertechnik lautet EVA <path>Eingabe → Verarbeitung → Ausgabe</path>: eine Software
            dient stets der Verarbeitung von Daten. Dabei werden diese von einem Ausgangsformat in ein Zielformat
            transferiert.
        </p>
        <p>
            Welche Daten man verwendet bzw. in welcher Form man die Zusammenhänge der realen Welt in Form von
            Datenstrukturen verarbeitet, das muss der Programmierer festlegen. Ebenso ist es die Aufgabe des
            Softwareentwicklers, den Weg von den Eingabe- zu den Ausgabedaten zu beschreiben, und zwar in einer Form,
            welche der Computer verarbeiten kann. Diese Form der Datenverarbeitung basiert auf Algorithmen. Beide
            Elemente, also Datenstrukturen und Algorithmen, bilden den Grundstock eines jeden Computerprogramms.
        </p>
    </chapter>

    <chapter title="Algorithmen als Kernelemente des Programms" id="programm">
        <p>
            Ein Algorithmus ist ein präzise festgelegtes Verfahren zur Lösung von Problemen bzw. einer Klasse von
            Problemen. Das Verfahren besteht aus endlich vielen elementaren Lösungsschritten und produziert in endlicher
            Zeit aus den Eingabedaten die gewünschten Ausgabedaten. Es ist möglich den Algorithmus wiederholt
            anzuwenden.
        </p>

        <chapter title="Bedingungen für Algorithmen" id="programm-bedingungen">
            <p>
                Jeder Software-Algorithmus muss ein paar folgende Bedingungen erfüllen, damit er als zulässig gilt:
            </p>

            <list>
                <li>
                    <b>Spezifikation</b>: Es muss <emphasis>genau</emphasis> angegeben sein, welche Eingabedaten
                    erforderlich sind und welche Ausgabedaten der Algorithmus generieren soll.
                </li>
                <li>
                    <b>Durchführbarkeit</b>: Das Verfahren muss <emphasis>vollständig</emphasis> beschrieben sein, d.h.
                    es muss <emphasis>tatsächlich ausführbar</emphasis> sein. Die Schrittfolge des Algorithmus muss
                    durchgängig sein und darf keine Lücken aufweisen.
                </li>
                <li>
                    <b>Terminiertheit</b>: Es muss in der Regel feststehen, wann der Algorithmus beendet ist.
                    Terminiertheit bedeutet, dass der Algorithmus zum Ende kommt, nicht dass er erfolgreich sein muss.
                    Es gibt aber auch Algorithmen, welche kein definiertes Ende haben, d.h. in einer Art Endlosschleife
                    laufen.
                </li>
                <li>
                    <b>Determiniertheit</b>: Das bedeutet, dass man den Algorithmus wiederholt anwenden kann. Dabei sind
                    die Ergebnisse nicht immer vollständig identisch, wenn sich beispielsweise die Eingabeparameter
                    ändern.
                </li>
                <li>
                    <b>Korrektheit</b>: Sind die Eingabedaten korrekt, dann muss der Algorithmus ein korrektes Ergebnis
                    produzieren. Genügen die Eingabedaten der geforderten Spezifikation, dann muss der Algorithmus
                    sicherstellen, dass auch die Ausgabedaten der geforderten Spezifikation genügen.
                </li>
            </list>
        </chapter>

        <chapter title="Wichtige Klassen von Algorithmen" id="programm-klassen">
            <list>
                <li>
                    <b>Suchverfahren</b>: Sequentiell Suche, Binärsuche, paralleles Suchen...
                </li>
                <li>
                    <b>Sortierverfahren</b>: Bubblesort, Insertionsort, Quicksort, Mergesort...
                </li>
                <li>
                    <b>Mathematische und nummerische Algorithmen</b>: Hierzu gehören Verfahren, die die Schrittfolge zur
                    Berechnung bestimmter Sachverhalte angeben.
                </li>
                <li>
                    <b>Algorithmen zur Verarbeitung von Zeichenketten</b>: In diese Klasse gehören die Mustererkennung
                    (Pattern Matching) und die Syntaxanalyse (Parsing).
                </li>
                <li>
                    <b>Optimierungsverfahren</b>: Diese Algorithmen optimieren eine Größe in Hinblick auf ein bestimmtes
                    Ziel. Zum Beispiel wird in einem Computerspiel der kürzeste Weg zum Gegner sehr oft mithilfe des
                    sogenannten A*-Algorithmus gesucht.
                </li>
                <li>
                    <b>Geometrische Algorithmen</b>: Diese Rechenvorschriften helfen dabei, geometrische Grundformen wie
                    Linien oder Splines anhand bestimmter Punkte im zwei-oder dreidimensionalen Raum zu zeichnen.
                </li>
                <li>
                    ...
                </li>
            </list>
        </chapter>

        <chapter title="Komplexität von Algorithmen" id="programm-komplexitaet">

        </chapter>
    </chapter>

    <chapter title="Entwurf von Algorithmen" id="entwurf">

        <chapter title="Vorgehensweise" id="entwurf-vorgehensweise">

            <chapter title="Visualisieren des Ablaufs von Algorithmen" id="entwurf-vorgehensweise-visualisierung">

            </chapter>
        </chapter>
    </chapter>

    <chapter title="Quellen" id="quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836244763, "Handbuch für Softwareentwickler", Veikko Krypczyk &amp; Elena Bochkor, 2018
        </tip>
    </chapter>
</topic>