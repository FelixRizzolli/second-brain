<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="swe-pk-algorithmen"
       title="Algorithmen"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">
    <show-structure depth="2" for="chapter,procedure"/>

    <chapter id="einleitung" title="Einleitung">
        <p>
            Das Grundprinzip der Computertechnik lautet EVA <path>Eingabe → Verarbeitung → Ausgabe</path>: eine Software
            dient stets der Verarbeitung von Daten. Dabei werden diese von einem Ausgangsformat in ein Zielformat
            transferiert.
        </p>
        <p>
            Welche Daten man verwendet bzw. in welcher Form man die Zusammenhänge der realen Welt in Form von
            Datenstrukturen verarbeitet, das muss der Programmierer festlegen. Ebenso ist es die Aufgabe des
            Softwareentwicklers, den Weg von den Eingabe- zu den Ausgabedaten zu beschreiben, und zwar in einer Form,
            welche der Computer verarbeiten kann. Diese Form der Datenverarbeitung basiert auf Algorithmen. Beide
            Elemente, also Datenstrukturen und Algorithmen, bilden den Grundstock eines jeden Computerprogramms.
        </p>
    </chapter>

    <chapter id="programm" title="Algorithmen als Kernelemente des Programms">
        <p>
            Ein Algorithmus ist ein präzise festgelegtes Verfahren zur Lösung von Problemen bzw. einer Klasse von
            Problemen. Das Verfahren besteht aus endlich vielen elementaren Lösungsschritten und produziert in endlicher
            Zeit aus den Eingabedaten die gewünschten Ausgabedaten. Es ist möglich den Algorithmus wiederholt
            anzuwenden.
        </p>

        <chapter id="programm-bedingungen" title="Bedingungen für Algorithmen">
            <p>
                Jeder Software-Algorithmus muss ein paar folgende Bedingungen erfüllen, damit er als zulässig gilt:
            </p>

            <list>
                <li>
                    <b>Spezifikation</b>: Es muss
                    <emphasis>genau</emphasis>
                    angegeben sein, welche Eingabedaten
                    erforderlich sind und welche Ausgabedaten der Algorithmus generieren soll.
                </li>
                <li>
                    <b>Durchführbarkeit</b>: Das Verfahren muss
                    <emphasis>vollständig</emphasis>
                    beschrieben sein, d.h.
                    es muss
                    <emphasis>tatsächlich ausführbar</emphasis>
                    sein. Die Schrittfolge des Algorithmus muss
                    durchgängig sein und darf keine Lücken aufweisen.
                </li>
                <li>
                    <b>Terminiertheit</b>: Es muss in der Regel feststehen, wann der Algorithmus beendet ist.
                    Terminiertheit bedeutet, dass der Algorithmus zum Ende kommt, nicht dass er erfolgreich sein muss.
                    Es gibt aber auch Algorithmen, welche kein definiertes Ende haben, d.h. in einer Art Endlosschleife
                    laufen.
                </li>
                <li>
                    <b>Determiniertheit</b>: Das bedeutet, dass man den Algorithmus wiederholt anwenden kann. Dabei sind
                    die Ergebnisse nicht immer vollständig identisch, wenn sich beispielsweise die Eingabeparameter
                    ändern.
                </li>
                <li>
                    <b>Korrektheit</b>: Sind die Eingabedaten korrekt, dann muss der Algorithmus ein korrektes Ergebnis
                    produzieren. Genügen die Eingabedaten der geforderten Spezifikation, dann muss der Algorithmus
                    sicherstellen, dass auch die Ausgabedaten der geforderten Spezifikation genügen.
                </li>
            </list>
        </chapter>

        <chapter id="programm-klassen" title="Wichtige Klassen von Algorithmen">
            <list>
                <li>
                    <b>Suchverfahren</b>: Sequentiell Suche, Binärsuche, paralleles Suchen...
                </li>
                <li>
                    <b>Sortierverfahren</b>: Bubblesort, Insertionsort, Quicksort, Mergesort...
                </li>
                <li>
                    <b>Mathematische und nummerische Algorithmen</b>: Hierzu gehören Verfahren, die die Schrittfolge zur
                    Berechnung bestimmter Sachverhalte angeben.
                </li>
                <li>
                    <b>Algorithmen zur Verarbeitung von Zeichenketten</b>: In diese Klasse gehören die Mustererkennung
                    (Pattern Matching) und die Syntaxanalyse (Parsing).
                </li>
                <li>
                    <b>Optimierungsverfahren</b>: Diese Algorithmen optimieren eine Größe in Hinblick auf ein bestimmtes
                    Ziel. Zum Beispiel wird in einem Computerspiel der kürzeste Weg zum Gegner sehr oft mithilfe des
                    sogenannten A*-Algorithmus gesucht.
                </li>
                <li>
                    <b>Geometrische Algorithmen</b>: Diese Rechenvorschriften helfen dabei, geometrische Grundformen wie
                    Linien oder Splines anhand bestimmter Punkte im zwei-oder dreidimensionalen Raum zu zeichnen.
                </li>
                <li>
                    ...
                </li>
            </list>
        </chapter>

        <chapter id="programm-komplexitaet" title="Komplexität von Algorithmen">
            <p>
                Deutlich schärfer sind Algorithmen im Hinblick auf ihre Komplexität voneinander abzugrenzen. Meist
                besitzen die Verfahren einen Hauptparameter <code>N</code>, der die Laufzeit des Algorithmus am
                stärksten beeinflusst. <code>N</code> kann zum Beispiel die Größe einer zu sortierenden oder zu
                durchsuchenden Datenmenge oder die Anzahl der Knoten eines Graphen sein. Die Laufzeit des Algorithmus
                wird dann in Abhängigkeit zu diesem Parameter N gemessen. Dabei unterscheidet man u. a. die folgenden
                Klassen:
            </p>

            <list>
                <li>
                    <code>1</code>: Die Laufzeit des Algorithmus ist konstant und damit unabhängig vom Parameter
                    <code>N</code>. Mit anderen Worten: Egal wie groß der Hauptparameter des Problems ist, die Laufzeit
                    des Algorithmus ist davon nicht abhängig.
                </li>
                <li>
                    <code>lg N</code>: Wenn die Laufzeit eines Programms logarithmisch ist, wird das Programm mit größer
                    werdendem <code>N</code> allmählich langsamer. Die Laufzeit vergrößert sich jedoch nicht so stark,
                    wie der Hauptparameter des Problems zunimmt. Ein solcher Algorithmus kann also durchaus sehr große
                    Probleme bearbeiten. Hinweis: Bei der Anwendung des Logarithmus wird stets von der Basis
                    <code>2</code> ausgegangen.
                </li>
                <li>
                    <code>N</code>: Die Laufzeit des Programms ist linear zur Größe des Hauptparameters <code>N</code>.
                    Verdoppelt sich die Menge der zu verarbeitenden Daten (falls die Daten der Hauptparameter sind),
                    dann dauert es auch doppelt so lange, bis ein Ergebnis bestimmt ist.
                </li>
                <li>
                    <code>N lg N</code>: Die Laufzeit des Algorithmus verhält sich linear logarithmisch zur Größe des
                    Hauptparameters <code>N</code>. Wenn <code>N</code> verdoppelt wird, dann wird die Laufzeit mehr als
                    verdoppelt.
                </li>
                <li>
                    <code>N^2</code>: Die Laufzeit verhält sich quadratisch zum Hauptparameter <code>N</code>. Ein
                    typischer Fall ist die Verarbeitung von paarweisen Kombinationen von Datenelementen, zum Beispiel in
                    einer doppelt verschachtelten Schleife.
                </li>
                <li>
                    <code>2^N</code>: Die Laufzeit wächst exponentiell zur Größe des Hauptparameters <code>N</code>,
                    d.h., wenn dieser auch nur geringfügig größer wird, dann muss der Algorithmus ein Vielfaches an
                    Schritten bis zur Lösung durchlaufen.
                </li>
            </list>

            <p>
                Folgendes Beispiel zeigt, wie sich die Laufzeit eines Algorithmus bei einem Wachstum des Parameters
                <code>N</code> in Abhängigkeit von der Klassenzugehörigkeit ändert.
            </p>

            <table style="both">
                <tr>
                    <td>N</td>
                    <td>N</td>
                    <td>lg N</td>
                    <td>N lg N</td>
                    <td>N^2</td>
                    <td>2^N</td>
                </tr>
                <tr>
                    <td>10</td>
                    <td>10</td>
                    <td>3</td>
                    <td>30</td>
                    <td>100</td>
                    <td>2^10</td>
                </tr>
                <tr>
                    <td>100</td>
                    <td>100</td>
                    <td>6</td>
                    <td>600</td>
                    <td>10.000</td>
                    <td>2^100</td>
                </tr>
                <tr>
                    <td>1.000</td>
                    <td>1.000</td>
                    <td>9</td>
                    <td>9.000</td>
                    <td>1.000.000</td>
                    <td>2^1.000</td>
                </tr>
                <tr>
                    <td>10.000</td>
                    <td>10.000</td>
                    <td>13</td>
                    <td>130.000</td>
                    <td>100.000.000</td>
                    <td>2^10.000</td>
                </tr>
                <tr>
                    <td>100.000</td>
                    <td>100.000</td>
                    <td>16</td>
                    <td>1.600.000</td>
                    <td>10^10</td>
                    <td>2^100.000</td>
                </tr>
                <tr>
                    <td>1.000.000</td>
                    <td>1.000.000</td>
                    <td>19</td>
                    <td>19.000.000</td>
                    <td>10^12</td>
                    <td>2^1.000.000</td>
                </tr>
            </table>

            <p>
                Angenommen es besteht ein Problem mit Hauptparameter <code>N = 10.000</code> und es gehört zur
                Komplexitätsklasse <code>N^2</code>, dann sind <code>10^8</code> Rechenschritte zur Lösung des Problems
                notwendig.
            </p>
            <note>
                Es kann also oftmals Sinn ergeben Zeit und Ressourcen in die Komplexitätsreduktion eines Algorithmus zu
                investieren.
            </note>
        </chapter>
    </chapter>

    <chapter id="entwurf" title="Entwurf von Algorithmen">
        <p>
            Einfache Algorithmen kann man direkt niederschreiben, d.h. in der gewählten Programmiersprache codieren. Mit
            der Zeit entwickelt man auch so viel Erfahrung, dass ein vorheriger Entwurf bei vielen Algorithmen nicht
            mehr notwendig ist.
        </p>
        <p>
            Beispiel für komplexere Algorithmen:
        </p>

        <list>
            <li>
                Bei der Programmierung eines Strategiespiels soll die Möglichkeit bestehen, den Computer als Gegner zu
                wählen. Dazu muss ein Algorithmus entwickelt werden, der mit »durchdachten« Spielzügen auf die
                Reaktionen des Spielers antwortet und sich gegebenenfalls automatisch dem Niveau des Spielers anpasst.
            </li>
            <li>
                Für ein Transportunternehmen soll eine Software entwickelt werden, die die Beladung der LKW plant. Dabei
                sind die Größe der Ladefläche, die Abmessungen der zu transportierenden Gegenstände und die Zeitpunkte
                von Ein- und Ausladung zu berücksichtigen.
            </li>
        </list>

        <p>
            Derartige Algorithmen müssen schrittweise entwickelt werden. Dabei muss man oft nicht bei null anfangen,
            sondern kann sich der Erkenntnisse aus anderen Wissensbereichen oder allgemein formulierter Lösungsansätze
            bedienen. Vielleicht hat man auch Glück und kann in dem einen oder anderen Fall auf eine fertige
            Programmbibliothek zurückgreifen. Für die Umsetzung eines Algorithmus in der Zielsprache - aber auch für
            seine bloße Verwendung - muss man diesen verstanden haben.
        </p>

        <chapter id="entwurf-vorgehensweise" title="Vorgehensweise">
            <list style="decimal">
                <li>
                    <b>Spezifizierung der Problemstellung</b>: Die Problemstellung ist fachlich aufzuarbeiten. Der
                    Softwareentwickler muss sich so weit mit dem angegebenen Problem beschäftigen, dass er es
                    vollständig
                    verstanden hat. Je nachdem kann man sich auch bei Experten Hilfe holen.
                </li>
                <li>
                    <b>Ausarbeiten eines Algorithmus</b>: Dies ist der Kern des Ablaufes. Komplexe Algorithmen werden
                    nicht direkt in die Zielsprache übersetzt, sondern man bedient sich auf dem Weg dorthin
                    unterschiedlicher Hilfsmittel. Grafisch kann man den Ablauf eines Algorithmus auf unterschiedliche
                    Weise visualisieren. Eine gebräuchliche Vorstufe der Codierung in einer Programmiersprache ist die
                    Darstellung mithilfe von <a href="swe-pk-pseudocode.topic">Pseudocode</a>.
                </li>
                <li>
                    <b>Analyse des Fehlverhaltens</b>: Insbesondere bei Berechnungen kann es zu Fehlern kommen. Diese
                    treten auch dann auf, wenn der eigentliche Algorithmus richtig arbeitet, aber zum Beispiel
                    Rechenungenauigkeit zu einem nicht gewünschten Verhalten führt.
                </li>
                <li>
                    <b>Analyse des Laufzeitverhaltens</b>: Insbesondere schrittweise Verfahren können einen hohen Bedarf
                    an Rechenzeit verursachen. Ansatzpunkte um dies zu beschleunigen sind beispielsweise das Auslagern
                    eines komplexen Rechenalgorithmus in einen eigenen Thread der Anwendung. Dieses Vorgehen kann bei
                    heutigen Mehrkernprozessoren gegebenenfalls erhebliche Vorteile bieten, wenn die anderen
                    Programmteile nicht auf die Abarbeitung des komplexen Algorithmus warten müssen.
                </li>
                <li>
                    <b>Implementierung</b>: Diese erfolgt in der jeweiligen Programmiersprache.
                </li>
                <li>
                    <b>Tests</b>: Dabei soll die logische Konsistenz überprüft werden. Ein systematisches Vorgehen ist
                    hierbei zu empfehlen.
                </li>
            </list>

            <chapter id="entwurf-vorgehensweise-visualisierung" title="Visualisieren des Ablaufs von Algorithmen">
                <p>
                    Algorithmen weisen oft einen komplizierten Ablauf auf, deren Verständnis durch eine visuelle
                    Darstellung deutlich verbessert werden kann. Dazu können beispielsweise Flussdiagramme,
                    Struktogramme oder Aktivitätsdiagramme dienen.
                </p>
            </chapter>
        </chapter>
    </chapter>

    <chapter id="quellen" title="Quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836244763, "Handbuch für Softwareentwickler", Veikko Krypczyk &amp; Elena Bochkor, 2018
        </tip>
    </chapter>
</topic>