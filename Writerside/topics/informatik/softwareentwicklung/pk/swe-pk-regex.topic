<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="swe-pk-regex"
       title="RegEx - Reguläre Ausdrücke"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">
    <show-structure depth="2" for="chapter,procedure"/>

    <chapter id="einleitung" title="Einleitung">
        <p>
            Reguläre Ausdrücke sind Muster, mit denen Bereiche oder ein ganzer String erkannt werden können (= string
            pattern matching). Diese Muster folgen bestimmten Regeln und verwenden Metazeichen, um bestimmte Muster
            darzustellen. RegEx kann in folgenden Tools/Bereichen eingesetzt werden:
        </p>

        <list>
            <li>
                In fast allen Programmiersprachen
            </li>
            <li>
                Suchmaschinen
            </li>
            <li>
                <p>IDEs und Text-Editoren</p>

                <list>
                    <li>VSCode</li>
                    <li>Notepad++</li>
                </list>
            </li>
            <li>
                Splunk
            </li>
        </list>
    </chapter>

    <chapter id="cheatsheet" title="RegEx Cheatsheet">
        <img alt="RegEx - Cheatsheet" src="swe-pk-regex-cheatsheet.png"/>
    </chapter>

    <chapter id="step1" title="STEP1: Einführung">
        <p>
            RegEx ist die Abkürzung für <b>Regular Expression</b>. RegEx hilft, Text zuzuordnen, zu finden oder zu
            verwalten. Im Beispiel wird nach <code>OK</code> gesucht.
        </p>

        <code-block>
            Understand? OK or NOT
        </code-block>

        <code-block>
            /OK/g
        </code-block>

        <chapter id="step1-erklaerung" title="Was sind reguläre Ausdrücke Regex?">
            <p>
                Reguläre Ausdrücke sind eine Zeichenkette, die ein Suchmuster ausdrückt. Oft als <b>RegEx</b> oder
                <b>RegExp</b> abgekürzt. Sie werden besonders verwendet, um Wörter in Texten zu finden oder zu ersetzen.
                Darüber hinaus können wir testen, ob ein Text den von uns festgelegten Regeln entspricht.
            </p>
            <p>
                Angenommen, in einer Liste mit Dateinamen sollen nur jene Dateien mit der Dateiendung <code>.pdf</code>
                gefunden werden. Hierfür wird der Ausdrucks <code>^\w+\.pdf$</code> verwendet. Die Bedeutung des
                Ausdrucks wird Step by Step erklärt.
            </p>

            <chapter collapsible="true" id="step1-erklaerung-beispiel" title="Beispiel">
                <code-block>
                    readme.md
                    document.pdf
                    image.png
                    music.mp4
                    manual.pdf
                </code-block>

                <code-block>
                    /^\w+\.pdf$/gm
                </code-block>
            </chapter>
        </chapter>

        <chapter id="step1-basicmatcher" title="Basic Matcher">
            <p>
                Das zu findende Zeichen oder Wort wird direkt geschrieben. Es ähnelt einem normalen Suchvorgang. Um
                beispielsweise das Wort <code>curious</code> im Text zu finden, wird dasselbe eingegeben.
            </p>

            <chapter collapsible="true" id="step1-basicmatcher-beispiel" title="Beispiel">
                <code-block>
                    "I have no special talents. I am only passionately curious."

                    ― Albert Einstein
                </code-block>

                <code-block>
                    /curious/gm
                </code-block>
            </chapter>
        </chapter>

        <chapter id="step1-punkt" title="Punkt .: Beliebiges Zeichen">
            <p>
                Der Punkt <code>.</code> ermöglicht die Auswahl eines beliebigen Zeichens, einschließlich Sonderzeichen
                und Leerzeichen.
            </p>

            <chapter collapsible="true" id="step1-punkt-beispiel" title="Beispiel">
                <code-block>
                    abcABC123 .:!?
                </code-block>

                <code-block>
                    /./g
                </code-block>
            </chapter>
        </chapter>

        <chapter id="step1-zeichensaetze" title="Zeichensätze [abc]">
            <p>
                Wenn eines der Zeichen in einem Wort mehrere Zeichen sein können, werden die Zeichen in eckige Klammern
                <code>[]</code> mit allen alternativen Zeichen geschrieben. Zum Beispiel, um einen Ausdruck zu
                schreiben, der alle Wörter im folgenden Beispieltext findet werden die Zeichen <code>a</code>,
                <code>e</code>, <code>i</code>, <code>o</code>, <code>u</code> nebeneinander in eckige Klammern
                <code>[]</code> angegeben.
            </p>

            <chapter collapsible="true" id="step1-zeichensaetze-beispiel" title="Beispiel">
                <code-block>
                    bar ber bir bor bur
                </code-block>

                <code-block>
                    /b[aeiou]r/g
                </code-block>
            </chapter>
        </chapter>

        <chapter id="step1-negiertezeichensaetze" title="Negierte Zeichensätze [^abc]">
            <p>
                Um alle Wörter im folgenden Text außer <code>ber</code> und <code>bor</code> zu finden, wird
                <code>e</code> und <code>o</code> nebeneinander nach dem Caret-Zeichen <code>^</code> in eckigen
                Klammern <code>[]</code> angegeben.
            </p>

            <chapter collapsible="true" id="step1-negiertezeichensaetze-beispiel" title="Beispiel">
                <code-block>
                    bar ber bir bor bur
                </code-block>

                <code-block>
                    /b[^eo]r/g
                </code-block>
            </chapter>
        </chapter>

        <chapter id="step1-buchstabenbereich" title="Buchstabenbereich [a-z]">
            <p>
                Um die Buchstaben im angegebenen Bereich zu finden, werden der Anfangsbuchstabe und der Endbuchstabe in
                eckige Klammern <code>[]</code> mit einem Bindestrich dazwischen <code>-</code> geschrieben. Es wird
                zwischen Groß- und Kleinschreibung unterschieden. Typ der Ausdruck, der alle Kleinbuchstaben zwischen
                <code>e</code> und <code>o</code> auswählt, einschließlich sich selbst.
            </p>

            <chapter collapsible="true" id="step1-buchstabenbereich-beispiel" title="Beispiel">
                <code-block>
                    abcdefghijklmnopqrstuvwxyz
                </code-block>

                <code-block>
                    /[e-o]/g
                </code-block>
            </chapter>
        </chapter>

        <chapter id="step1-nummerkreis" title="Nummernbereich [0-9]">
            <p>
                Um die Zahlen im angegebenen Bereich zu finden, werden die Startnummer und die Endnummer in eckige
                Klammern <code>[]</code> mit einem Bindestrich <code>-</code> dazwischen geschrieben. Schreiben Sie
                einen Ausdruck, der alle auswählt Zahlen zwischen <code>3</code> und <code>6</code>, einschließlich sich
                selbst.
            </p>

            <chapter collapsible="true" id="step1-nummerkreis-beispiel" title="Beispiel">
                <code-block>
                    0123456789
                </code-block>

                <code-block>
                    /[3-6]/g
                </code-block>
            </chapter>
        </chapter>

        <chapter id="step1-uebungen" title="Übungen">
            <chapter id="step1-uebungen-basicmatcher" title="Übung: Basic Matcher">
                <p>
                    Schreiben Sie den Ausdruck, der die Wörter of im Text auswählt.
                </p>

                <code-block>
                    "Every man takes the limits of his own field of vision for the limits of the world."
                    ― Arthur Schopenhauer
                </code-block>

                <code-block collapsed-title="Lösung" collapsible="true">
                    /of/g
                </code-block>
            </chapter>

            <chapter id="step1-uebungen-zeichen" title="Übung: Beliebiges Zeichen">
                <p>
                    Geben Sie den Ausdruck ein, um einzelne Buchstaben, Zahlen, Leerzeichen und Sonderzeichen im Text
                    auszuwählen. Der eingegebene Ausdruck muss mit jedem Zeichen übereinstimmen.
                </p>

                <code-block>
                    Geben Sie den Ausdruck ein, um einzelne Buchstaben, Zahlen, Leerzeichen und Sonderzeichen im
                    Text auszuwählen. Der eingegebene Ausdruck muss mit jedem Zeichen übereinstimmen.
                </code-block>

                <code-block collapsed-title="Lösung" collapsible="true">
                    /./g
                </code-block>
            </chapter>

            <chapter id="step1-uebungen-zeichensaetze" title="Übung: Zeichensätze">
                <p>
                    Schreiben Sie die Phrase, die zu jedem Wort im Text passt. Die einzigen Zeichen, die sich ändern,
                    sind die Anfangsbuchstaben der Wörter.
                </p>

                <code-block>
                    beer deer feer
                </code-block>

                <code-block collapsed-title="Lösung" collapsible="true">
                    /[bdf]eer/g
                </code-block>
            </chapter>

            <chapter id="step1-uebungen-negiertezeichensaetze" title="Übung: Negierte Zeichensätze">
                <p>
                    Schreiben Sie den Ausdruck auf, der mit etwas anderem als den Wörtern <code>beor</code> und
                    <code>beur</code> im Text übereinstimmt. Verwenden Sie dazu den negierten Zeichensatz.
                </p>

                <code-block>
                    bear beor beer beur
                </code-block>

                <code-block collapsed-title="Lösung" collapsible="true">
                    /be[^ou]r/g
                </code-block>
            </chapter>

            <chapter id="step1-uebungen-buchstabenbereich" title="Übung: Buchstabenbereich">
                <p>
                    Schreiben Sie den Ausdruck, der die Buchstaben von <code>g</code> bis <code>k</code> im Text
                    auswählt. Die Buchstaben <code>g</code> und <code>k</code> sollten ebenfalls in diesem Bereich
                    enthalten sein.
                </p>

                <code-block>
                    abcdefghijklmnopqrstuvwxyz
                </code-block>

                <code-block collapsed-title="Lösung" collapsible="true">
                    /[g-k]/g
                </code-block>
            </chapter>

            <chapter id="step1-uebungen-nummerkreis" title="Übung: Nummernkreis">
                <p>
                    Geben Sie einen Ausdruck ein, um Zahlen von <code>2</code> bis <code>7</code> im Text auszuwählen.
                    <code>2</code> und <code>7</code> sollten auch in diesem Bereich enthalten sein.
                </p>

                <code-block>
                    0123456789
                </code-block>

                <code-block collapsed-title="Lösung" collapsible="true">
                    /[2-7]/g
                </code-block>
            </chapter>
        </chapter>
    </chapter>

    <chapter id="step2" title="STEP2: Wiederholungen">
        <p>
            Einige Sonderzeichen werden verwendet, um anzugeben, wie oft ein Zeichen im Text wiederholt wird. Diese
            Sonderzeichen sind das Plus <code>+</code>, das Sternchen <code>*</code> und das Fragezeichen
            <code>?</code>.
        </p>

        <chapter id="step2-asterisk" title="Asterisk *">
            <p>
                Wir setzen ein Sternchen <code>*</code> an das Ende, um anzuzeigen, dass ein Zeichen überhaupt nicht
                oder mehrfach übereinstimmen kann. Geben Sie zum Beispiel an, dass der Buchstabe <code>e</code> niemals
                in der vorkommen sollte Text, oder es kann einmal oder mehrmals nebeneinander vorkommen.
            </p>

            <chapter collapsible="true" id="step2-asterisk-beispiel" title="Beispiel">
                <code-block>
                    br ber beer
                </code-block>

                <code-block>
                    /be*r/g
                </code-block>
            </chapter>
        </chapter>

        <chapter id="step2-plus" title="Pluszeichen +">
            <p>
                Um anzuzeigen, dass ein Zeichen einmal oder mehrmals vorkommen kann, setzen wir ein Pluszeichen
                <code>+</code> am Ende. Geben Sie beispielsweise an, dass der Buchstabe <code>e</code> einmal oder
                mehrmals vorkommen kann der Text.
            </p>

            <chapter collapsible="true" id="step2-plus-beispiel" title="Beispiel">
                <code-block>
                    br ber beer
                </code-block>

                <code-block>
                    /be+r/g
                </code-block>
            </chapter>
        </chapter>

        <chapter id="step2-fragezeichen" title="Fragezeichen ?">
            <p>
                Um anzuzeigen, dass ein Zeichen optional ist, setzen wir ein <code>?</code> Fragezeichen an das Ende.
                Geben Sie beispielsweise an, dass der folgende Buchstabe <code>u</code> optional ist.
            </p>

            <chapter collapsible="true" id="step2-fragezeichen-beispiel" title="Beispiel">
                <code-block>
                    color, colour
                </code-block>

                <code-block>
                    /colou?r/g
                </code-block>
            </chapter>
        </chapter>

        <chapter id="step2-geschweifteklammern1" title="Geschweifte Klammern – 1">
            <p>
                Um eine bestimmte Anzahl von Vorkommen eines Zeichens auszudrücken, schreiben wir geschweifte Klammern
                <code>{n}</code> zusammen mit der Häufigkeit, mit der es am Ende vorkommen soll. Geben Sie zum Beispiel
                Folgendes an Buchstabe <code>e</code> darf nur <code>2</code> mal vorkommen.
            </p>

            <chapter collapsible="true" id="step2-geschweifteklammern1-beispiel" title="Beispiel">
                <code-block>
                    ber beer beeer beeeer
                </code-block>

                <code-block>
                    /be{2}r/g
                </code-block>
            </chapter>
        </chapter>

        <chapter id="step2-geschweifteklammern2" title="Geschweifte Klammern – 2">
            <p>
                Um mindestens eine bestimmte Anzahl von Vorkommen eines Zeichens auszudrücken, schreiben wir das Ende
                des Zeichens mindestens wie oft es vorkommen soll, mit einem Komma <code>,</code> am Ende, und in
                geschweiften Klammern <code>{n, }</code>. Geben Sie zum Beispiel an, dass der folgende Buchstabe
                <code>e</code> mindestens <code>3</code> Mal vorkommen kann.
            </p>

            <chapter collapsible="true" id="step2-geschweifteklammern2-beispiel" title="Beispiel">
                <code-block>
                    ber beer beeer beeeer
                </code-block>

                <code-block>
                    /be{3,}r/g
                </code-block>
            </chapter>
        </chapter>

        <chapter id="step2-geschweifteklammern3" title="Geschweifte Klammern – 3">
            <p>
                Um das Vorkommen eines Zeichens in einem bestimmten Zahlenbereich auszudrücken, schreiben wir
                geschweifte Klammern <code>{x,y}</code> mit dem Intervall, das wir bis zum Ende gehen möchten. Geben Sie
                zum Beispiel an, dass die der folgende Buchstabe <code>e</code> darf nur zwischen <code>1</code> und
                <code>3</code> vorkommen.
            </p>

            <chapter collapsible="true" id="step2-geschweifteklammern3-beispiel" title="Beispiel">
                <code-block>
                    ber beer beeer beeeer
                </code-block>

                <code-block>
                    /be{1,3}r/g
                </code-block>
            </chapter>
        </chapter>

        <chapter id="step2-uebungen" title="Übungen">
            <chapter id="step2-uebungen-asterisk" title="Übung: Asterisk *">
                <p>
                    Verwenden Sie das Sternchen <code>*</code>, um den Ausdruck zu schreiben, der jedes Wort auswählt,
                    geeignet für das Fehlen des Buchstabens <code>e</code> im Text und das Vorhandensein von mehr als
                    einem.
                </p>

                <code-block>
                    dp dep deep
                </code-block>

                <code-block collapsed-title="Lösung" collapsible="true">
                    /de*p/g
                </code-block>
            </chapter>

            <chapter id="step2-uebungen-plus" title="Übung: Pluszeichen +">
                <p>
                    Schreiben Sie den Ausdruck mit dem Pluszeichen <code>+</code>, um Wörter auszuwählen, in denen der
                    Buchstabe <code>e</code> einmal oder mehrmals im Text vorkommt.
                </p>

                <code-block>
                    dp dep deep
                </code-block>

                <code-block collapsed-title="Lösung" collapsible="true">
                    /de+p/g
                </code-block>
            </chapter>

            <chapter id="step2-uebungen-fragezeichen" title="Übung: Fragezeichen ?">
                <p>
                    Schreiben Sie den Ausdruck, der anzeigt, dass der Buchstabe <code>n</code> im Text optional ist,
                    indem Sie das Fragezeichen <code>?</code> verwenden. Somit können sowohl die Wörter <code>a</code>
                    als auch an ausgewählt werden.
                </p>

                <code-block>
                    a, an
                </code-block>

                <code-block collapsed-title="Lösung" collapsible="true">
                    /an?/g
                </code-block>
            </chapter>

            <chapter id="step2-uebungen-geschweifteklammern1" title="Übung: Geschweifte Klammern – 1">
                <p>
                    Schreiben Sie den Ausdruck mit geschweiften Klammern <code>{}</code>, der Texte findet, die
                    <code>4</code> Zahlen nebeneinander enthalten.
                </p>

                <code-block>
                    Release 10/9/2021
                </code-block>

                <code-block collapsed-title="Lösung" collapsible="true">
                    /[0-9]{4}/g
                </code-block>
            </chapter>

            <chapter id="step2-uebungen-geschweifteklammern2" title="Übung: Geschweifte Klammern – 2">
                <p>
                    Schreiben Sie den Ausdruck mit geschweiften Klammern <code>{}</code>, der Texte findet, die
                    mindestens <code>2</code> Zahlen nebeneinander enthalten.
                </p>

                <code-block>
                    Release 10/9/2021
                </code-block>

                <code-block collapsed-title="Lösung" collapsible="true">
                    /[0-9]{2,}/g
                </code-block>
            </chapter>

            <chapter id="step2-uebungen-geschweifteklammern3" title="Übung: Geschweifte Klammern – 3">
                <p>
                    Schreiben Sie den Ausdruck mit geschweiften Klammern <code>{}</code>, der Texte findet, die
                    mindestens <code>1</code> und höchstens <code>4</code> Zahlen nebeneinander enthalten.
                </p>

                <code-block>
                    Release 10/9/2021
                </code-block>

                <code-block collapsed-title="Lösung" collapsible="true">
                    /[0-9]{1,4}/g
                </code-block>
            </chapter>
        </chapter>
    </chapter>

    <chapter id="step3" title="STEP3">
        <chapter id="step3-klammern" title="Klammern (): Gruppierung">
            <p>
                Wir können einen Ausdruck gruppieren und diese Gruppen verwenden, um einige Regeln zu referenzieren oder
                durchzusetzen. Um einen Ausdruck zu gruppieren, schließen wir <code>()</code> in Klammern ein. Fürs
                Erste gruppieren Sie einfach <code>haa</code> unten.
            </p>

            <chapter collapsible="true" id="step3-klammern-beispiel" title="Beispiel">
                <code-block>
                    ha-ha,haa-haa
                </code-block>

                <code-block>
                    /(haa)/g
                </code-block>
            </chapter>
        </chapter>

        <chapter id="step3-verweisen" title="Auf eine Gruppe verweisen">
            <p>
                Die Wörter <code>ha</code> und <code>haa</code> sind unten gruppiert. Die erste Gruppe wird verwendet,
                indem <code>\1</code> geschrieben wird, um ein erneutes Schreiben zu vermeiden. Hier gibt <code>1</code>
                die Reihenfolge der Gruppierung an. Geben Sie ein <code>\2</code> am Ende des Ausdrucks, um auf die
                zweite Gruppe zu verweisen.
            </p>

            <chapter collapsible="true" id="step3-verweisen-beispiel" title="Beispiel">
                <code-block>
                    ha-ha,haa-haa
                </code-block>

                <code-block>
                    /(ha)-\1,(haa)-\2/g
                </code-block>
            </chapter>
        </chapter>

        <chapter id="step3-guppierungohneerfassung" title="Klammern (?:): Gruppierung ohne Erfassung">
            <p>
                Sie können einen Ausdruck gruppieren und sicherstellen, dass er nicht durch Referenzen erfasst wird.
                Unten sehen Sie beispielsweise zwei Gruppen. Die erste Gruppenreferenz, die wir mit <code>\1</code>
                bezeichnen, zeigt jedoch tatsächlich die zweite an Gruppe, da die erste eine nicht einfangende Gruppe
                ist.
            </p>

            <chapter collapsible="true" id="step3-guppierungohneerfassung-beispiel" title="Beispiel">
                <code-block>
                    ha-ha,haa-haa
                </code-block>

                <code-block>
                    /(?:ha)-ha,(haa)-\1/g
                </code-block>
            </chapter>
        </chapter>

        <chapter id="step3-pipe" title="Pipe-Zeichen |">
            <p>
                Damit kann festgelegt werden, dass ein Ausdruck in verschiedenen Ausdrücken enthalten sein kann. Daher
                werden alle möglichen Anweisungen durch das Pipe-Zeichen <code>|</code> getrennt geschrieben. Dies
                unterscheidet sich vom Zeichensatz <code>[abc]</code>, Zeichensätze arbeiten auf Zeichenebene.
                Alternativen befinden sich auf Ausdrucksebene. Beispielsweise würde der folgende Ausdruck sowohl
                <code>cat</code> als auch <code>rat</code> auswählen. Fügen Sie am Ende des Ausdrucks ein weiteres
                Pipe-Zeichen <code>|</code> hinzu und geben Sie dog ein, damit alle Wörter werden ausgewählt.
            </p>

            <chapter collapsible="true" id="step3-pipe-beispiel" title="Beispiel">
                <code-block>
                    cat rat dog
                </code-block>

                <code-block>
                    /(c|r)at|dog/g
                </code-block>
            </chapter>
        </chapter>

        <chapter id="step3-escape" title="Escape-Zeichen \">
            <p>
                Es gibt Sonderzeichen, die wir beim Schreiben von Regex verwenden. <code>{ } [ ] / \ + * . $^ | ?</code>
                Bevor wir diese Zeichen selbst auswählen können, müssen wir ein Escape verwenden Zeichen <code>\</code>.
                Um beispielsweise die Zeichen Punkt <code>.</code> und Sternchen <code>*</code> im Text auszuwählen,
                fügen wir davor ein Escape-Zeichen <code>\</code> ein.
            </p>

            <chapter collapsible="true" id="step3-escape-beispiel" title="Beispiel">
                <code-block>
                    (*) Asterisk.
                </code-block>

                <code-block>
                    /(\*|\.)/g
                </code-block>
            </chapter>
        </chapter>

        <chapter id="step3-caret" title="Caret-Zeichen ^: Auswahl nach Zeilenanfang">
            <p>
                Wir haben <code>[0-9]</code> verwendet, um Zahlen zu finden. Um nur Zahlen am Anfang einer Zeile zu
                finden, stellen Sie diesem Ausdruck das <code>^</code>-Zeichen voran.
            </p>

            <chapter collapsible="true" id="step3-caret-beispiel" title="Beispiel">
                <code-block>
                    Basic Omellette Recipe

                    1. 3 eggs, beaten
                    2. 1 tsp sunflower oil
                    3. 1 tsp butter
                </code-block>

                <code-block>
                    /^[0-9]/gm
                </code-block>
            </chapter>
        </chapter>

        <chapter id="step3-dollar" title="Dollarzeichen $: Auswahl nach Zeilenende">
            <p>
                Lassen Sie uns das <code>$</code>-Zeichen nach dem <code>html</code>-Wert verwenden, um die
                <code>html</code>-Texte nur am Ende der Zeile zu finden.
            </p>

            <chapter collapsible="true" id="step3-dollar-beispiel" title="Beispiel">
                <code-block>
                    https://domain.com/what-is-html.html
                    https://otherdomain.com/html-elements
                    https://website.com/html5-features.html
                </code-block>

                <code-block>
                    /html$/gm
                </code-block>
            </chapter>
        </chapter>

        <chapter id="step3-wort" title="Wortzeichen \w: Buchstabe, Zahl und Unterstrich">
            <p>
                Der Ausdruck <code>\w</code> wird verwendet, um Buchstaben, Zahlen und Unterstriche zu finden. Lassen
                Sie uns den Ausdruck <code>\w</code> verwenden, um Wortzeichen im Text zu finden.
            </p>

            <chapter collapsible="true" id="step3-wort-beispiel" title="Beispiel">
                <code-block>
                    abcABC123 _.:!?
                </code-block>

                <code-block>
                    /\w/g
                </code-block>
            </chapter>
        </chapter>

        <chapter id="step3-ausserwort" title="Außer Wortzeichen \W">
            <p>
                Der Ausdruck <code>\W</code> wird verwendet, um andere Zeichen als Buchstaben, Zahlen und Unterstriche
                zu finden.
            </p>

            <chapter collapsible="true" id="step3-ausserwort-beispiel" title="Beispiel">
                <code-block>
                    abcABC123 _.:!?
                </code-block>

                <code-block>
                    /\W/g
                </code-block>
            </chapter>
        </chapter>

        <chapter id="step3-zahlen" title="Zahlenzeichen \d">
            <p>
                <code>\d</code> wird verwendet, um nur Zahlenzeichen zu finden.
            </p>

            <chapter collapsible="true" id="step3-zahlen-beispiel" title="Beispiel">
                <code-block>
                    abcABC123 _.:!?
                </code-block>

                <code-block>
                    /\d/g
                </code-block>
            </chapter>
        </chapter>

        <chapter id="step3-ausserzahlen" title="Außer Zahlenzeichen \D">
            <p>
                <code>\D</code> wird verwendet, um nicht-numerische Zeichen zu finden.
            </p>

            <chapter collapsible="true" id="step3-ausserzahlen-beispiel" title="Beispiel">
                <code-block>
                    abcABC123 _.:!?
                </code-block>

                <code-block>
                    /\D/g
                </code-block>
            </chapter>
        </chapter>

        <chapter id="step3-leer" title="Leerzeichen \s">
            <p>
                <code>\s</code> wird verwendet, um nur Leerzeichen zu finden.
            </p>

            <chapter collapsible="true" id="step3-leer-beispiel" title="Beispiel">
                <code-block>
                    abcABC123 _.:!?
                </code-block>

                <code-block>
                    /\s/g
                </code-block>
            </chapter>
        </chapter>

        <chapter id="step3-ausserleer" title="Außer Leerzeichen \S">
            <p>
                <code>\S</code> wird verwendet, um Nicht-Leerzeichen zu finden.
            </p>

            <chapter collapsible="true" id="step3-ausserleer-beispiel" title="Beispiel">
                <code-block>
                    abcABC123 _.:!?
                </code-block>

                <code-block>
                    /\S/g
                </code-block>
            </chapter>
        </chapter>
    </chapter>

    <chapter id="step4" title="STEP4: Lookarounds">
        <p>
            Wenn wir möchten, dass der Satz, den wir schreiben, vor oder nach einem anderen Satz steht, müssen wir "look
            around". Machen Sie den nächsten Schritt, um zu lernen, wie man "looks around".
        </p>

        <chapter id="step4-positiver-lookahead" title="Positiver Lookahead: (?=)">
            <p>
                Zum Beispiel möchten wir den Stundenwert im Text auswählen. Um daher nur die numerischen Werte
                auszuwählen, denen <code>PM</code> folgt, müssen wir den positiven Look-Ahead-Ausdruck schreiben
                <code>(?=)</code> nach unserem Ausdruck. Fügen Sie <code>PM</code> nach dem <code>=</code>-Zeichen in
                Klammern ein.
            </p>

            <chapter collapsible="true" id="step4-positiver-lookahead-beispiel" title="Beispiel">
                <code-block>
                    Date: 4 Aug 3PM
                </code-block>

                <code-block>
                    /\d+(?=PM)/g
                </code-block>
            </chapter>
        </chapter>

        <chapter id="step4-negativer-lookahead" title="Negativer Lookahead: (?!)">
            <p>
                Zum Beispiel möchten wir andere Zahlen als den Stundenwert im Text auswählen. Daher müssen wir den
                negativen Look-Ahead-Ausdruck <code>(?!)</code> nach unserem Ausdruck schreiben, um nur auszuwählen die
                numerischen Werte, die kein <code>PM</code> nach sich haben. Fügen Sie <code>PM</code> nach dem
                <code>!</code>-Zeichen in Klammern ein.
            </p>

            <chapter collapsible="true" id="step4-negativer-lookahead-beispiel" title="Beispiel">
                <code-block>
                    Date: 4 Aug 3PM
                </code-block>

                <code-block>
                    /\d+(?!PM)/g
                </code-block>
            </chapter>
        </chapter>

        <chapter id="step4-positiver-lookbehind" title="Positiver Lookbehind: (?&lt;=)">
            <p>
                Zum Beispiel möchten wir den Preiswert im Text auswählen. Daher müssen wir, um nur die Zahlenwerte
                auszuwählen, denen <code>$</code> vorangestellt ist, den positiven Lookbehind-Ausdruck
                <code>(?&lt;=)</code> vor unserem Ausdruck schreiben. Fügen Sie <code>\$</code> nach dem
                <code>=</code>-Zeichen in den Klammern hinzu.
            </p>

            <warning>
                Dieser Ausdruck wird von einigen Browsern nicht unterstützt.
            </warning>

            <chapter collapsible="true" id="step4-positiver-lookbehind-beispiel" title="Beispiel">
                <code-block>
                    Product Code: 1064 Price: $5
                </code-block>

                <code-block>
                    /(?&lt;=\$)\d+/g
                </code-block>
            </chapter>
        </chapter>

        <chapter id="step4-negativer-lookbehind" title="Negativer Lookbehind: (?&lt;!)">
            <p>
                Zum Beispiel möchten wir im Text andere Zahlen als den Preiswert auswählen. Um daher nur numerische
                Werte auszuwählen, denen kein <code>$</code> vorangestellt ist, müssen wir das negative Lookbehind
                schreiben <code>(?&lt;!)</code> vor unserem Ausdruck. Fügen Sie <code>\$</code> nach dem <code>!</code>
                innerhalb der Klammern hinzu.
            </p>

            <warning>
                Dieser Ausdruck wird von einigen Browsern nicht unterstützt.
            </warning>

            <chapter collapsible="true" id="step4-negativer-lookbehind-beispiel" title="Beispiel">
                <code-block>
                    Product Code: 1064 Price: $5
                </code-block>

                <code-block>
                    /(?&lt;!\$)\d+/g
                </code-block>
            </chapter>
        </chapter>
    </chapter>

    <chapter id="step5" title="STEP5: Flaggen">
        <p>
            Flags ändern die Ausgabe des Ausdrucks. Aus diesem Grund werden Flags auch als <code>Modifikatoren</code>
            bezeichnet. Legt fest, ob der eingegebene Ausdruck Text als separate Zeilen behandelt, Groß-/Kleinschreibung
            beachtet oder alle Übereinstimmungen findet. Fahren Sie mit fort nächster Schritt, um die Flaggen zu lernen.
        </p>

        <chapter id="step5-globale-flagge" title="Globale Flagge">
            <p>
                Das <code>global</code>-Flag bewirkt, dass der Ausdruck alle Übereinstimmungen auswählt. Wenn es nicht
                verwendet wird, wird nur die erste Übereinstimmung ausgewählt. Aktivieren Sie jetzt das
                <code>global</code>-Flag, um alle Übereinstimmungen auswählen zu können.
            </p>

            <chapter collapsible="true" id="step5-globale-flagge-beispiel" title="Beispiel">
                <code-block>
                    domain.com, test.com, site.com
                </code-block>

                <code-block>
                    /\w+\.com/g
                </code-block>
            </chapter>
        </chapter>

        <chapter id="step5-mehrzeiliges-flag" title="Mehrzeiliges Flag">
            <p>
                Regex sieht den gesamten Text als eine Zeile. Aber wir verwenden das <code>multiline-</code>Flag, um
                jede Zeile separat zu behandeln. Auf diese Weise schreiben wir die Ausdrücke entsprechend dem Zeilenende
                für jede Zeile separat. Aktivieren Sie nun das <code>multiline</code>-Flag, um alle Übereinstimmungen zu
                finden.
            </p>

            <chapter collapsible="true" id="step5-mehrzeiliges-flag-beispiel" title="Beispiel">
                <code-block>
                    domain.com
                    test.com
                    site.com
                </code-block>

                <code-block>
                    /\w+\.com$/gm
                </code-block>
            </chapter>
        </chapter>

        <chapter id="step5-grosskleinschreibung" title="Groß-/Kleinschreibung beachten">
            <p>
                Um die Groß-/Kleinschreibung des von uns geschriebenen Ausdrucks zu entfernen, müssen wir das Flag
                <emphasis>Groß-/Kleinschreibung ignorieren</emphasis>
                aktivieren.
            </p>

            <chapter collapsible="true" id="step5-grosskleinschreibung-beispiel" title="Beispiel">
                <code-block>
                    DOMAIN.COM
                    TEST.COM
                    SITE.COM
                </code-block>

                <code-block>
                    /\w+\.com$/gmi
                </code-block>
            </chapter>
        </chapter>

        <chapter id="step5-geringer-abgleich" title="Gieriger Abgleich">
            <p>
                RegEx führt standardmäßig einen Greedy-Match durch. Das bedeutet, dass das Matchmaking so lang wie
                möglich sein wird. Sehen Sie sich das Beispiel unten an. Es bezieht sich auf alle Matches, die auf "r"
                enden und beliebig sein können vorangestelltes Zeichen. Aber es hört nicht beim ersten Buchstaben
                <code>r</code> auf.
            </p>

            <chapter collapsible="true" id="step5-geringer-abgleich-beispiel" title="Beispiel">
                <code-block>
                    ber beer beeer beeeer
                </code-block>

                <code-block>
                    /.*r/
                </code-block>
            </chapter>
        </chapter>

        <chapter id="step5-lazy-matching" title="Lazy Matching">
            <p>
                Lazy Matchmaking stoppt im Gegensatz zu Greedy Matching beim ersten Matching. Fügen Sie zum Beispiel im
                Beispiel unten ein "?" nach "*" hinzu, um das erste Match zu finden, das mit dem Buchstaben "r" endet
                und ihm ein beliebiges Zeichen vorangestellt ist. Dies bedeutet, dass dieser Vergleich beim ersten
                Buchstaben <code>r</code> stoppt.
            </p>

            <chapter collapsible="true" id="step5-lazy-matching-beispiel" title="Beispiel">
                <code-block>
                    ber beer beeer beeeer
                </code-block>

                <code-block>
                    /.*?r/
                </code-block>
            </chapter>
        </chapter>
    </chapter>

    <chapter id="quellen" title="Quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836240826, "PHP 7 und MySQL - Das umfassende Handbuch", Christian Wenz &amp; Tobias Hauser, 2016
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://regexlearn.com/de/learn/regex101" ignore-vars="true">
                https://regexlearn.com/de/learn/regex101
            </a>, 2022-12-07 16:30
        </tip>
    </chapter>
</topic>