<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Python" id="python">
    <show-structure for="chapter,procedure" depth="2"/>

    <chapter title="Geschichte und Entstehung" id="geschichte-und-entstehung">
        <p>
            Die Programmiersprache Python wurde Anfang der 1990er-Jahre von dem Niederländer Guido van Rossum am Centrum
            voor Wiskunde en Informatica (CWI) in Amsterdam entwickelt. Ursprünglich war sie als Skriptsprache für das
            verteilte Betriebssystem Amoeba gedacht. Der Name Python lehnt sich nicht etwa an die Schlangenfamilie an,
            sondern ist eine Hommage an die britische Komikertruppe Monty Python.
        </p>
        <p>
            Vor Python hatte van Rossum an der Entwicklung der Programmiersprache ABC mitgewirkt, die mit dem Ziel
            entwickelt wurde, so einfach zu sein, dass sie problemlos einem interessierten Laien ohne
            Programmiererfahrung beigebracht werden kann. Die Erfahrung aus positiver und negativer Kritik an ABC nutzte
            van Rossum für die Entwicklung von Python. Er schuf damit eine Programmiersprache, die mächtig und zugleich
            leicht zu erlernen ist.

        </p>
        <p>
            Mit der Version 3.0, die im Dezember 2008 erschien, wurde die Sprache von Grund auf überarbeitet.
            Vorrangiges Ziel war es, die Sprache zu modernisieren und dabei frühe Designfehler zu beseitigen, die man in
            bisherigen Versionen aufgrund der Abwärtskompatibilität stets in der Sprache behalten musste. Mit dem
            offiziellen Ende der Unterstützung von Python 2 zum Jahresbeginn 2020 wurde die langjährige Übergangsphase
            zwischen den Sprachversionen 2 und 3 beendet.

        </p>
        <p>
            Mittlerweile hat sich Python zu einer der beliebtesten Programmiersprachen entwickelt und nimmt bei
            Popularitätsindizes von Programmiersprachen regelmäßig Spitzenpositionen ein.
        </p>
        <p>
            Seit 2001 existiert die gemeinnützige Python Software Foundation, die die Rechte am Python-Code besitzt und
            Lobbyarbeit für Python betreibt. So organisiert die Python Software Foundation beispielsweise die
            PyCon-Konferenz, die jährlich in den USA stattfindet. Auch in Europa finden  regelmäßig größere und kleinere
            Python-Konferenzen statt.
        </p>
    </chapter>
    <chapter title="Grundlegende Konzepte" id="grundlegende-konzepte">
        <table>
            <tr>
                <td>Konzept</td>
                <td>Beschreibung</td>
            </tr>
            <tr>
                <td><strong>Programmierparadigmen</strong></td>
                <td>
                    Python ist <strong>grundsätzlich imperativ</strong>, bietet aber auch die möglichkeit
                    <strong>objektorientiert</strong> und <strong>funktional</strong> zu programmieren.
                </td>
            </tr>
            <tr>
                <td><strong>Compiler</strong></td>
                <td>
                    Bei Python handelt es sich um eine <strong>interpretierte Programmiersprache</strong>. Ähnlich wie
                    Java oder C# verfügt Python über einen Compiler, der aus dem Quelltext ein Kompilat erzeugt, den
                    sogenannten Byte-Code. Dieser Byte-Code wird dann in einer virtuellen Maschine, dem
                    Python-Interpreter, ausgeführt.
                </td>
            </tr>
            <tr>
                <td><strong>Plattform</strong></td>
                <td>
                    Ein Python-Programm ist in der Regel auf allen Betriebssystemen unmodifiziert lauffähig, die vom
                    Python-Interpreter unterstützt werden. Python ist also <strong>Plattformunabhängig</strong>.
                </td>
            </tr>
            <tr>
                <td><strong>Standardbibliothek</strong></td>
                <td>
                    Ein grundlegendes Konzept von Python ist es daher, es dem Programmierer so einfach wie möglich zu
                    machen, die Standardbibliothek beliebig zu erweitern. Da Python als interpretierte
                    Programmiersprache selbst nur eingeschränkte Möglichkeiten zur maschinennahen Programmierung bietet,
                    können maschinennahe oder zeitkritische Erweiterungen problemlos in C geschrieben werden. Das
                    ermöglicht die Python API.
                </td>
            </tr>
            <tr>
                <td><strong>Open-Source</strong></td>
                <td>
                    Python steht unter der <strong><tooltip term="LIZENZ-PSF">PSF</tooltip>-Lizenz</strong>, die
                    wesentlich weniger restriktiv ist als beispielsweise <tooltip term="LIZENZ-GNU">GNU</tooltip>. So
                    erlaubt es die <tooltip term="LIZENZ-PSF">PSF</tooltip>-Lizenz, den Python-Interpreter
                    lizenzkostenfrei in Anwendungen einzubetten und mit diesen auszuliefern, ohne dass der Code
                    offengelegt werden muss oder Lizenzkosten anfallen. Diese Politik macht Python auch für kommerzielle
                    Anwendungen attraktiv.
                </td>
            </tr>
            <tr>
                <td><strong>Flexibilität</strong></td>
                <td>
                    Python kann als Programmiersprache für kleine und große Applikationen, als serverseitige
                    Programmiersprache im Internet oder als Skriptsprache für eine größere C- oder C++-Anwendung
                    verwendet werden.
                </td>
            </tr>
            <tr>
                <td><strong>Rapid Prototyping</strong></td>
                <td>
                    Python eignet sich gut, in möglichst kurzer Zeit einen lauffähigen <strong>Prototyp als eine Art
                    Machbarkeitsstudie</strong> einer größeren Software zu erstellen, die dann später in einer anderen
                    Programmiersprache implementiert werden soll. Mithilfe eines solchen Prototyps lassen sich Probleme
                    und Designfehler bereits entdecken, bevor die tatsächliche Entwicklung der Software begonnen wird.
                </td>
            </tr>
            <tr>
                <td><strong>Erweiterbarkeit</strong></td>
                <td>
                    Da eine der Stärken von Python die Erweiterbarkeit ist, können Python-Entwickler aus einem reichen
                    Fundus von Drittanbieterbibliotheken schöpfen. So gibt es etwa Anbindungen an dei gängigsten
                    GUI-Toolkits, die das Erstellen von Python-Programmen mit grafischer Benutzeroberfläche ermöglichen.
                </td>
            </tr>
            <tr>
                <td><strong>Data Science und AI</strong></td>
                <td>
                    In den letzten Jahren hat sich Python zur zentralen Programmiersprache in den aufstrebenden
                    Datenwissenschaften und KI-Anwendgungen entwickelt. Python bietet mit den Bibliotheken NumPy,
                    SciPy, matplotlib und pandas ein hervorragendes Ökosystem für das wissenschaftliche Rechnen, die
                    Datenanalyse und -visualisierung. Darüber hinaus haben sich mit scikit-learn, PyTorch, Keras und
                    TensorFlow große Python-Bibliotheken für das maschinelle Lernen und das Deep Learning entwickelt,
                    die Python zur Standardprogrammiersprache in diesem Bereich gemacht haben.
                </td>
            </tr>
        </table>
    </chapter>
    <chapter title="Einsatzbeispiele" id="einsatzbeispiele">
        <p>
            Python erfreut sich großer Bekanntheit und Verbreitung sowohl bei Softwarefirmen und unter Wissenschaftlern
            als auch in der Open-Source-Gemeinschaft. Die Palette der Produkte, die zumindest zum Teil in Python
            geschrieben wurden, reicht von Webanwendungen (z. B. Google Mail, Google Maps, YouTube, Dropbox, reddit)
            über Entwicklungswerkzeuge (z. B. Mercurial, SCons) bis hin zu wissenschaftlichen Plattformen für das
            maschinelle Lernen (z. B. scikit-learn, PyTorch, TensorFlow) und für die Verarbeitung menschlicher
            Sprache (z. B. NLTK).
        </p>
        <p>
            Viele etablierte Anwendungen unterstützen Python als Skriptsprache für Erweiterungen. Beispiele dafür sind
            die Grafik- und Visualisierungsanwendungen Maya, Blender, ParaView, Cinema 4D, Paint Shop Pro und GIMP.
        </p>
    </chapter>
</topic>