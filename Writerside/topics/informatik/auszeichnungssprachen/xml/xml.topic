<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="XML (Extensible Markup Language)" id="xml">
    <show-structure for="chapter,procedure" depth="2"/>

    <chapter title="Was ist XML?" id="xml">
        <p>
            XML (Extensible Markup Language), ist eine Metasprache zur Definition beliebiger Auszeichnungssprachen. 
            Diese Sprachen können Textdokumente, Vektorgrafiken, multimediale Präsentationen, Datenbanken oder andere 
            Arten von strukturierten Daten Beschreiben. XML wurde vom W3C entworfen und standardisiert. Die 
            XML-Spezifikation selbst enthält nur wenige formale Regeln für den Aufbau von Dokumenten. Hält man sich an 
            diese Regeln, erzeugt man ein wohlgeformtes XML-Dokument. Dokumente die auf Formatdefinitionen wie DTD 
            (= Document Type Definition), XLS (= XML Schema) oder RELAX NG basieren sind nicht nur wohlgeformt, sondern 
            auch gültig (oder valide). Der überwiegende Einsatz von XML beruht auf dem Einsatz vorhandener XML-basierter 
            Sprachen wie die Webseiten-Auszeichnungssprache XHTML, das Vektorgrafikformat SVG (= Scalable Vector 
            Graphics) oder die beliebte Handbuch- und Dokumentationssprache DocBook. Auch Anwendungsprogramme wie 
            LibreOffice/OpenOffice.org und neuere Versionen der Microsoft-Office-Programme verwenden XML-basierte 
            Datenformate, hierbei ist die Office-Arbeitsdatei ein ZIP-Archiv, in dem sich verschiedene XML-Dokumente und 
            eventuell weitere Ressourcen wie Bilddateien befinden. Gespeichert werden XML-Dokumente entweder als Datei 
            mit der Endung .xml, wenn es sich um allgemeine XML-Dokumente handelt, oder mit einer speziellen 
            Dateierweiterung, falls ein besonderes XML-Format verwendet wird (SVG <code>.svg</code>; XHTML 
            <code>.html</code> oder <code>.htm</code>).
        </p>

        <chapter title="Klartextbasierte Dokumentformate vs. Binärdateien" id="xml-format">
            <list>
                <li>
                    Sämtliche Konfigurations- und Strukturinformationen sind für Menschen lesbar und können notfalls
                    auch manuell geändert werden.
                </li>
                <li>
                    Die Dokumente lassen sich auf jedem beliebigen Computersystem in einem einfachen Texteditor öffnen
                    und eventuell bearbeiten. Der reine Textinhalt erschließt sich auch Anwendern, die die verwendeten
                    Auszeichnungsbefehle nicht verstehen.
                </li>
                <li>
                    Der Austausch von Dokumenten mit anderen Anwendungen, neunen Versionen einer Anwendung oder
                    Programmiersprachen ist erheblich einfacher als bei Binärformaten.
                </li>
            </list>

            <p>
                Der entscheidende Nachteil gegenüber Binärdateiformaten ist, dass textbasierte Formate mehr
                Speicherplatz benötigen.
            </p>
        </chapter>

        <chapter title="XML im Vergleich zu anderen Auszeichnungssprachen" id="xml-vergleich">
            <p>
                Fast alle textbasierten Auszeichnungssprachen außer XML haben eine spezielle Aufgabe: Beispielsweise
                dient LaTeX dem Erstellen von Vorlagen für den professionellen Satz; PostScript beschreibt dagegen
                fertig formatierte Ausgabeseiten für High-End-Drucker und -Belichter. Darüber hinaus besitzen
                Unix-Serveranwendungen und viele andere Programme jeweils ein eigenes ASCII-basiertes
                Konfigurationsdateiformat. XML ist dagegen eine universelle Sprache. In einem XML-Dokument kann die
                Musik-CD-Sammlung, die Doktorarbeit oder Geschäftsdaten gespeichert werden. XML beschreibt hier aber
                immer nur die Struktur und den Aufbau der Daten. Das Layout der Druck- oder Webversion von Textinhalten
                muss durch eine externe Stil- oder Formatierungssprache wie XSLT beschrieben werden.
            </p>
        </chapter>

        <chapter title="XML HttpRequest" id="xml-httprequest">
            <p>
                Alle modernen Browser haben ein eingebautes XMLHttpRequest-Objekt, um Daten von einem Server 
                anzufordern. Das XMLHttpRequest-Objekt kann verwendet werden, um Daten von einem Webserver anzufordern. 
                Das XMLHttpRequest-Objekt ist ein Traum für Entwickler, denn kann man:
            </p>
            
            <list>
                <li>eine Webseite aktualisieren, ohne die Seite neu zu laden</li>
                <li>Daten von einem Server anfordern - nachdem die Seite geladen wurde</li>
                <li>Daten von einem Server empfangen - nachdem die Seite geladen wurde</li>
                <li>Daten an einen Server senden - im Hintergrund</li>
            </list>
        </chapter>

        <chapter title="XML Parser" id="xml-parser">
            <p>
                Alle gängigen Browser verfügen über einen eingebauten XML-Parser für den Zugriff auf und die Bearbeitung
                von XML. Das XML DOM (Document Object Model) definiert die Eigenschaften und Methoden für den Zugriff
                auf und die Bearbeitung von XML. Bevor jedoch auf ein XML-Dokument zugegriffen werden kann, muss es in
                ein XML-DOM-Objekt geladen werden. Der XML-Parser wandelt den Text in ein XML-DOM-Objekt um.
            </p>
        </chapter>

        <chapter title="XML AJAX" id="xml-ajax">
        </chapter>
    </chapter>

    <chapter title="Terminologie" id="terminologie">
        <code-block lang="xml">
            &lt;?xml version="1.0" encoding="UTF-8"?&gt;
            &lt;bookstore&gt;
                &lt;book&gt;
                    &lt;title&gt;Harry Potter&lt;/title&gt;
                    &lt;author&gt;J K. Rowling&lt;/author&gt;
                    &lt;year&gt;2005&lt;/year&gt;
                    &lt;price&gt;29.99&lt;/price&gt;
                &lt;/book&gt;
                &lt;book&gt;
                    &lt;title lang="en"&gt;Learning XML&lt;/title&gt;
                    &lt;price&gt;39.95&lt;/price&gt;
                &lt;/book&gt;
            &lt;/bookstore&gt;
        </code-block>

        <table style="header-row">
            <tr>
                <td>DE</td>
                <td>EN</td>
                <td>Anmerkung</td>
            </tr>
            <tr>
                <td>Knoten</td>
                <td>node</td>
                <td>
                    <p>
                        In XPath gibt es sieben Arten von Knoten: Element-, Attribut-, Text-, Namespace-, Steuerungs-,
                        Kommentar- und Wurzelknoten. XML-Dokumente werden als Bäume von Knoten behandelt. Das oberste
                        Element des Baums wird als Wurzelelement bezeichnet.
                    </p>

                    <code-block lang="xml">
                        &lt;bookstore&gt; &lt;!-- root element node --&gt;
                    </code-block>
                    <code-block lang="xml">
                        &lt;author&gt;J K. Rowling&lt;/author&gt; &lt;!-- element node --&gt;
                    </code-block>
                    <code-block lang="xml">
                        lang="en" &lt;!-- attribute node --&gt;
                    </code-block>
                </td>
            </tr>
            <tr>
                <td>Atomarer Wert</td>
                <td>atomic value</td>
                <td>
                    <p>
                        Atomare Werte sind Knoten, die weder Kinder noch Eltern haben.
                    </p>

                    <code-block lang="xml">
                        J K. Rowling
                    </code-block>
                    <code-block lang="xml">
                        "en"
                    </code-block>
                </td>
            </tr>
            <tr>
                <td>Element</td>
                <td>item</td>
                <td>
                    Elemente sind atomare Werte oder Knoten.
                </td>
            </tr>
        </table>

        <chapter title="Beziehungen von Knoten" id="terminologie-knoten">
            <table>
                <tr>
                    <td>DE</td>
                    <td>EN</td>
                    <td>Beispiel</td>
                    <td>Anmerkung</td>
                </tr>
                <tr>
                    <td>Elternteil</td>
                    <td>parent</td>
                    <td>
                        Im obigen Beispiel ist das <code>book</code>-Element das Elternteil der Elemente
                        <code>title</code>, <code>author</code>, <code>year</code> und <code>price</code>.
                    </td>
                    <td>
                        Jedes Element und Attribut hat einen Elternteil.
                    </td>
                </tr>
                <tr>
                    <td>Kind</td>
                    <td>child</td>
                    <td>
                        Im obigen Beispiel sind die Elemente <code>title</code>, <code>author</code>, <code>year</code>
                        und <code>price</code> alle untergeordnete Elemente (= Kindelemente) des Elements
                        <code>book</code>.
                    </td>
                    <td>

                    </td>
                </tr>
                <tr>
                    <td>Geschwister</td>
                    <td>siblings</td>
                    <td>
                        Im obigen Beispiel sind die Elemente <code>title</code>, <code>author</code>, <code>year</code>
                        und <code>price</code> alle Geschwister.
                    </td>
                    <td>
                        Elementknoten können null, ein oder mehrere Kinder haben.
                    </td>
                </tr>
                <tr>
                    <td>Vorfahre</td>
                    <td>anecestors</td>
                    <td>
                        Im obigen Beispiel sind die Vorfahren des Elements <code>title</code> das Element
                        <code>book</code> und das Element <code>bookstore</code>.
                    </td>
                    <td>
                        Geschwister sind Knoten, die denselben Elternteil haben.
                    </td>
                </tr>
                <tr>
                    <td>Nachkommen</td>
                    <td>descendants</td>
                    <td>
                        Im obigen Beispiel sind die Elemente <code>book</code>, <code>title</code>, <code>author</code>,
                        <code>year</code> und <code>price</code> die Nachkommen des Elements <code>bookstore</code>.
                    </td>
                    <td>
                        Ein Vorfahre kann ein Elternteil eines Knotens, Elternteil eines Elternteils usw. sein.
                    </td>
                </tr>
            </table>
        </chapter>
    </chapter>

    <chapter title="Der Aufbau von XML-Dokumenten" id="xml-aufbau">
        <p>
            Jedes XML-Dokument besteht aus einer Hierarchie ineinander verschachtelter Steueranweisungen, sie als
            Elemente oder Tags bezeichnet werden, und kann zusätzlich einfachen Text enthalten. Die XML-Tags werden in
            spitze Klammern gesetzt, also zwischen ein <code>&lt;</code>-Zeichen und ein <code>&gt;</code>-Zeichen. Sie
            können ein oder mehrere Attribute in der Form <code>attribut="wert"</code> enthalten. Jedes Tag wird unter
            Angabe seiner Bezeichnung geöffnet. (zum Beispiel <code>&lt;test&gt;</code>) und weiter unten im Dokument
            durch eine Wiederholung mit vorangestelltem Slash (<code>/</code>) wieder geschlossen (etwa
            <code>&lt;/codetest&gt;</code>).
        </p>

        <chapter title="XML Beispiel" id="xml-aufbau-beispiel">
            <code-block lang="xml">
                &lt;?xml version="1.0" encoding="utf-8" standalone="yes"?&gt;
                &lt;comics&gt;
                    &lt;comic language="en-US"&gt;
                        &lt;publisher&gt;Marvel&lt;/publisher&gt;
                        &lt;series&gt;The Amazing Spider-Man&lt;/series&gt;
                        &lt;format&gt;Comic Book&lt;/format&gt;
                        &lt;issue&gt;663&lt;/issue&gt;
                        &lt;title&gt;The Return Of Anti-Venom&lt;/title&gt;
                        &lt;subtitle&gt;Part One: The Ghost of Jean DeWolff&lt;/subtitle&gt;
                        &lt;authors&gt;
                            &lt;author role="Writer"&gt;Dan Slott&lt;/author&gt;
                            &lt;author role="Pencils"&gt;Giuseppe Camuncoli&lt;/author&gt;
                        &lt;/authors&gt;
                        &lt;price currency="USD"&gt;3.99&lt;/price&gt;
                    &lt;/comic&gt;
                    &lt;comic language="en-US"&gt;
                        &lt;publisher&gt;Marvel&lt;/publisher&gt;
                        &lt;series&gt;Ultimate Spider-Man&lt;/series&gt;
                        &lt;format&gt;Trade Paperback&lt;/format&gt;
                        &lt;issue original="1-13"&gt;1&lt;/issue&gt;
                        &lt;title&gt;Ultimate Spider-Man&lt;/title&gt;
                        &lt;subtitle&gt;Ultimate Collection&lt;/subtitle&gt;
                        &lt;authors&gt;
                            &lt;author role="Writer"&gt;Brian Michael Bendis&lt;/author&gt;
                            &lt;author role="Pencils"&gt;Mark Bagley&lt;/author&gt;
                        &lt;/authors&gt;
                        &lt;price currency="USD"&gt;24.99&lt;/price&gt;
                    &lt;/comic&gt;
                    &lt;comic language="en-US"&gt;
                        &lt;publisher&gt;DC Comics&lt;/publisher&gt;
                        &lt;series&gt;Action Comics&lt;/series&gt;
                        &lt;format&gt;Comic Book&lt;/format&gt;
                        &lt;issue&gt;901&lt;/issue&gt;
                        &lt;title&gt;Reign Of The Doomsdays&lt;/title&gt;
                        &lt;subtitle&gt;Part 1&lt;/subtitle&gt;
                        &lt;authors&gt;
                            &lt;author role="Writer"&gt;Paul Cornell&lt;/author&gt;
                            &lt;author role="Artist"&gt;Kenneth Rocafort&lt;/author&gt;
                            &lt;author role="Artist"&gt;Jesus Merino&lt;/author&gt;
                        &lt;/authors&gt;
                        &lt;price currency="USD">2.99&lt;/price&gt;
                    &lt;/comic&gt;
                    &lt;comic language="en-US"&gt;
                        &lt;publisher&gt;Bongo Comics&lt;/publisher&gt;
                        &lt;series&gt;Simpsons Comics&lt;/series&gt;
                        &lt;format&gt;Comic Book&lt;/format&gt;
                        &lt;issue>178&lt;/issue&gt;
                        &lt;title&gt;The Thingama-Bob From Outer Space&lt;/title&gt;
                        &lt;authors&gt;
                            &lt;author role="Writer"&gt;Eric Rogers&lt;/author&gt;
                            &lt;author role="Pencils"&gt;John Costanza&lt;/author&gt;
                        &lt;/authors&gt;
                        &lt;price currency="USD"&gt;2.99&lt;/price&gt;
                    &lt;/comic&gt;
                &lt;/comics&gt;
            </code-block>
        </chapter>

        <chapter title="Die XML-Steueranweisungen und XML-Deklatation" id="xml-aufbau-deklaration">
            <p>
                Eine XML-Steueranweisung (auch PI, Processing Instruction) kann in XML-Dokumenten an beliebiger Stelle
                vorkommen. Es handelt sich um Anweisungen für interpretierende Geräte oder Programme, die mit dem
                Dokument selbst nichts zu tun haben. Eine XML-Steueranweisung hat folgende Syntax:
            </p>

            <code-block lang="xml">
                &lt;?Ziel Daten?&gt;
            </code-block>

            <p>
                Als Ziel muss ein Bezeichner (Name) angegeben werden, für welche Anwendung diese Verarbeitungsanweisung
                wirksam ist. Das Ziel der Verarbeitungsanweisung darf nicht die Zeichenfolge XML sein, da dies die
                XML-Deklaration wäre. Die Daten können alle Zeichen mit Ausnahme der Kombination <code>?&gt;</code>
                enthalten. In den Daten können auch Pseudoattribute eingetragen werden, die ähnlich wie
                Attribut-Werte-Paare aussehen, vom Parser jedoch nicht als solche behandelt werden.
            </p>
            <p>
                Die XML-Deklaration steht am Beginn des Prologes einer XML-Datei. In der XML-Deklaration seht zum
                Beispiel: die verwendete XML-Version (im Beispiel <code>1.0</code>) und der verwendete Zeichensatz im
                Dokument (im Beispiel <code>utf-8</code>):
            </p>

            <code-block lang="xml">
                &lt;?xml version="1.0" encoding="utf-8" standalone="yes"?&gt;
            </code-block>

            <p>
                Das Attribut <code>standalone</code> gibt an, ob sich das Dokument auf ein externes Formatdokument wie
                ein DTD oder ein XML Schema bezieht. Der Wert <code>yes</code> besagt, dass das Dokument selbstständig
                ist und nicht von einer solchen Standardisierung abhängt. Ein solches Dokument muss wohlgeformt sein,
                aber es ist nicht valide, da es keine Spezifikation gibt, gegen die seine Gültigkeit geprüft werden
                könnte.
            </p>
        </chapter>

        <chapter title="XML-Elemente" id="xml-aufbau-elemente">

            <chapter title="Benennung der XML-Elemente" id="xml-aufbau-elemente-benennung">
            </chapter>
        </chapter>

        <chapter title="XML Attribute" id="xml-aufbau-attribute">
        </chapter>

        <chapter title="Entity-Referenzen" id="xml-aufbau-entityreferenzen">
        </chapter>

        <chapter title="CDATA-Abschnitte" id="xml-aufbau-cdata">
        </chapter>

        <chapter title="Kommentare" id="xml-aufbau-kommentare">
        </chapter>
    </chapter>

    <chapter title="Namespaces (Namensräume)" id="namespaces">
    </chapter>

    <chapter title="Wohlgeformtheit" id="wohlgeformtheit">
    </chapter>

    <chapter title="Quellen" id="quellen">
    </chapter>
</topic>