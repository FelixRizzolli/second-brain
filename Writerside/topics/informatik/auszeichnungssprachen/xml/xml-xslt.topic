<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="XML - XSLT (eXtensible Stylesheet Language Transformations)" id="xml-xslt">
    <show-structure for="chapter,procedure" depth="2"/>

    <chapter title="Grundlegendes zu XSL und XSLT" id="grundlagen">
        <p>
            XML beschreibt einzig und allein die Struktur eines Dokumentes. Für das Layout sind separate
            Formatierungsangaben zuständig. XSL (eXtensible Stylesheet Language) ist mehr als nur eine
            Formatierungssprache und besteht aus folgenden Komponenten:
        </p>

        <list>
            <li>
                XSL-Transformations (XSLT) beschreiben die Umwandlung (Transformation) beliebiger XML-Dokumente in
                andere Formate wie <a href="html.topic">HTML</a> oder PDF.
            </li>
            <li>
                <a href="xml-xpath.topic">XPath</a> eine Sprache zur Navigation in XML-Dokumenten.
            </li>
            <li>
                XSL Formatting Objects (XSL-FO) ist eine eigene Sprache zur Definition von Formatierungen und Stilen.
            </li>
            <li>
                <a href="xml-xquery.topic">XQuery</a> ist eine Sprache für Abfragen für XML-Dokumenten.
            </li>
        </list>

        <p>
            Eine Alternative für die Formatierung bieten die am häufigsten für <a href="html.topic">HTML</a>-Dokumente
            eingesetzten <a href="css.topic">Cascading Style Sheets (CSS)</a>. Die empfohlene Formatierungssprache für
            <a href="xml.topic">XML</a> ist aber XSLT. XSLT ist weitaus anspruchsvoller als CSS. Mit XSLT können
            Elemente und Attribute zur Ausgabedatei hinzugefügt oder daraus entfernt werden. Es können auch Elemente neu
            angeordnet und sortiert werden, sowie auch Tests durchgeführt werden, die entscheiden, welche Elemente
            ausgeblendet werden oder angezeigt werden sollen, und vieles mehr.
        </p>

        <chapter title="XSLT" id="grundlagen-xslt">
            <p>
                Ein XSLT-Dokument beschreibt, welche Elemente und Attribute eines XML-Eingabedokuments in welche
                Bestandteile eines Ausgabedokuments umgesetzt werden. Um die einzelnen Komponenten des Eingabedokuments
                zu identifizieren, verwendet XSLT eine Sprache namens <a href="xml-xpath.topic">XPath</a>, die den
                Zugriff auf die Baumstruktur jedes XML-Dokuments ermöglicht. Die Ausdrücke in
                <a href="xml-xpath.topic">XPath</a> zum Auffinden der verschiedenen Knoten des XML-Baums ähneln Pfaden
                im Dateisystem, einschließlich dem <code>/</code> zur Trennung übergeordneter von untergeordneten Knoten
                sowie Konstrukten wie <code>..</code>, um im Baum nach oben zu wandern.
            </p>
        </chapter>
    </chapter>

    <chapter title="XSLT Transformation" id="transformation">
        <p>
            Das root-Element, welches das Dokument als XSL-Stylesheet deklariert, ist
            <code>&lt;xsl:stylesheet&gt;</code> oder <code>&lt;xsl:transform&gt;</code>. Diese beiden Elemente sind
            Synonyme. Um auf XSLT Elemente zugreifen zu können muss dieses Element am Anfang des Dokuments definiert
            werden. Das Argument <code>xmlns:xsl="http://www.w3.org/1999/XSL/Transform"</code> zeigt auf den offiziellen
            W3C XSLT Namespace. Wird dieser Namespace verwendet, so muss auch die Versionsnummer mittels
            <code>version="1.0"</code> mitgeliefert werden.
        </p>

        <code-block lang="xml">
            <![CDATA[
            <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
            ]]>
        </code-block>

        <code-block lang="xml">
            <![CDATA[
            <xsl:transform version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
            ]]>
        </code-block>

        <chapter title="XML in XHTML umwandeln" id="transformation-xml-html">
            <p>
                In folgendem Beispiel können die Daten aus einem XML-Dokument durch die Informationen aus einem
                XSL-Dokument in einem Browser in XHTML transformiert und angezeigt werden.
            </p>

            <code-block lang="xml" collapsible="true" collapsed-title="cdcatalog.xsl">
                <![CDATA[
                <?xml version="1.0" encoding="UTF-8"?>

                <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

                <xsl:template match="/">
                    <html>
                        <body>
                            <h2>My CD Collection</h2>
                            <table border="1">
                                <tr bgcolor="#9acd32">
                                    <th>Title</th>
                                    <th>Artist</th>
                                </tr>
                                <xsl:for-each select="catalog/cd">
                                    <tr>
                                        <td><xsl:value-of select="title"/></td>
                                        <td><xsl:value-of select="artist"/></td>
                                    </tr>
                                </xsl:for-each>
                            </table>
                        </body>
                    </html>
                </xsl:template>

                </xsl:stylesheet>
                ]]>
            </code-block>

            <code-block lang="xml" collapsible="true" collapsed-title="cdcatalog.xml">
                <![CDATA[
                <?xml version="1.0" encoding="UTF-8"?>
                <?xml-stylesheet type="text/xsl" href="cdcatalog.xsl"?>

                <catalog>
                    <cd>
                        <title>Empire Burlesque</title>
                        <artist>Bob Dylan</artist>
                        <country>USA</country>
                        <company>Columbia</company>
                        <price>10.90</price>
                        <year>1985</year>
                    </cd>
                    .
                    .
                </catalog>
                ]]>
            </code-block>

            <p>
                Das Ergebnis kann man sich <a href="https://www.w3schools.com/xml/cdcatalog_with_xsl.xml">hier</a>
                anschauen.
            </p>
        </chapter>
    </chapter>

    <chapter title="XSLT Elemente" id="elemente">
        <code-block lang="xml">
            <![CDATA[
            <?xml version="1.0" encoding="UTF-8"?>
            <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

            <xsl:template match="/">
            <html>
                <body>
                    <h2>My CD Collection</h2>
                    <table border="1">
                        <tr bgcolor="#9acd32">
                            <th>Title</th>
                            <th>Artist</th>
                        </tr>
                        <xsl:for-each select="catalog/cd">
                            <xsl:sort select="artist"/>
                            <tr>
                                <td><xsl:value-of select="title"/></td>
                                <td><xsl:value-of select="artist"/></td>
                            </tr>
                        </xsl:for-each>
                    </table>
                </body>
            </html>
            </xsl:template>

            </xsl:stylesheet>
            ]]>
        </code-block>

        <table>
            <tr>
                <td>Element</td>
                <td>Beschreibung</td>
                <td>Beispiel</td>
            </tr>
            <tr>
                <td><code>&lt;xsl:template&gt;</code></td>
                <td>
                    Das <code>&lt;xsl:template&gt;</code> Element wird zum Erstellen von Vorlagen verwendet. Das
                    <code>match</code>-Attribut wird verwendet, um eine Vorlage mit einem XML-Element zu verknüpfen. Das
                    <code>match</code>-Attribut kann auch verwendet werden, um eine Vorlage für das gesamte XML-Dokument
                    zu definieren. Der Wert des <code>match</code>-Attributs ist ein XPath-Ausdruck (d. h.
                    <code>match="/"</code> definiert das gesamte Dokument).
                </td>
                <td>
                    <code-block lang="xml">
                        <![CDATA[
                        <xsl:template match="expression">
                            <html>
                                ...
                            </html>
                        </xsl:template>
                        ]]>
                    </code-block>
                </td>
            </tr>
            <tr>
                <td><code>&lt;xsl:value-of&gt;</code></td>
                <td>
                    Das <code>&lt;xsl:value-of&gt;</code>-Element kann verwendet werden, um den Wert eines XML-Elements
                    zu extrahieren und ihn dem Ausgabestream der Transformation hinzuzufügen.
                </td>
                <td>
                    <code-block lang="xml">
                        <![CDATA[
                        <xsl:value-of select="expression" />
                        ]]>
                    </code-block>
                </td>
            </tr>
            <tr>
                <td><code>&lt;xsl:for-each&gt;</code></td>
                <td>
                    Das <code>&lt;xsl:for-each&gt;</code>-Element kann verwendet werden, um jedes XML-Element eines
                    angegebenen Knotensatzes auszuwählen. Die Ausgabe der XML-Datei kann auch durch das
                    <code>select</code>-Attribut gefiltert werden.
                </td>
                <td>
                    <code-block lang="xml">
                        <![CDATA[
                        <xsl:for-each select="expression">
                            ...
                        </xsl:for-each>
                        ]]>
                    </code-block>
                </td>
            </tr>
            <tr>
                <td><code>&lt;xsl:sort&gt;</code></td>
                <td>
                    Um die Ausgabe zu sortieren, wird einfach ein <code>&lt;xsl:sort&gt;</code>-Element innerhalb des
                    <code>&lt;xsl:for-each&gt;</code>-Elements in der XSL-Datei hinzugefügt.
                </td>
                <td>
                    <code-block lang="xml">
                        <![CDATA[
                        <xsl:for-each select="expression">
                            <xsl:sort select="expression"/>
                            ...
                        </xsl:for-each>
                        ]]>
                    </code-block>
                </td>
            </tr>
            <tr>
                <td><code>&lt;xsl:if&gt;</code></td>
                <td>
                    Das <code>&lt;xsl:if&gt;</code>-Element wird verwendet, um den Inhalt der XML-Datei einem bedingten
                    Test zu unterziehen. Der Wert des erforderlichen <code>test</code>-Attributs enthält den
                    auszuwertenden Ausdruck.
                </td>
                <td>
                    <code-block lang="xml">
                        <![CDATA[
                        <xsl:if test="expression">
                            ...some output if the expression is true...
                        </xsl:if>
                        ]]>
                    </code-block>
                </td>
            </tr>
            <tr>
                <td><code>&lt;xsl:choose&gt;</code></td>
                <td>
                    Das Element <code>&lt;xsl:choose&gt;</code> wird in Verbindung mit <code>&lt;xsl:when&gt;</code> und
                    <code>&lt;xsl:otherwise&gt;</code> verwendet, um mehrere bedingte Tests auszudrücken.
                </td>
                <td>
                    <code-block lang="xml">
                        <![CDATA[
                        <xsl:choose>
                            <xsl:when test="expression">
                                ... some output ...
                            </xsl:when>
                            <xsl:otherwise>
                                ... some output ....
                            </xsl:otherwise>
                        </xsl:choose>
                        ]]>
                    </code-block>
                </td>
            </tr>
            <tr>
                <td><code>&lt;xsl:apply-templates&gt;</code></td>
                <td>
                    Das <code>&lt;xsl:apply-templates&gt;</code>-Element wendet eine Vorlage auf das aktuelle Element
                    oder auf die untergeordneten Knoten des aktuellen Elements an. Wird dem
                    <code>&lt;xsl:apply-templates&gt;</code>-Element ein <code>select</code>-Attribut hinzugefügt,
                    werden nur die untergeordneten Elemente verarbeitet, die dem Wert des Attributs entsprechen. Mit
                    dem <code>select</code>-Attribut kann angegeben werden, in welcher Reihenfolge die Kindknoten
                    abgearbeitet werden sollen.
                </td>
                <td>
                    <code-block lang="xml">
                        <![CDATA[
                        <?xml version="1.0" encoding="UTF-8"?>
                        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

                        <xsl:template match="/">
                            <html>
                                <body>
                                    <h2>My CD Collection</h2>
                                    <xsl:apply-templates/>
                                </body>
                            </html>
                        </xsl:template>

                        <xsl:template match="cd">
                            <p>
                                <xsl:apply-templates select="title"/>
                                <xsl:apply-templates select="artist"/>
                            </p>
                        </xsl:template>

                        <xsl:template match="title">
                            Title: <span style="color:#ff0000">
                            <xsl:value-of select="."/></span>
                            <br />
                        </xsl:template>

                        <xsl:template match="artist">
                            Artist: <span style="color:#00ff00">
                            <xsl:value-of select="."/></span>
                            <br />
                        </xsl:template>

                        </xsl:stylesheet>
                        ]]>
                    </code-block>
                </td>
            </tr>
        </table>
    </chapter>

    <chapter title="Quellen" id="quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836254663, IT Handbuch für Fachinformatiker, Sascha Kersken, Rheinwerk Verlag GmbH, 2017
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://www.w3schools.com/xml/xml_xslt.asp" ignore-vars="true">
                https://www.w3schools.com/xml/xml_xslt.asp
            </a>, 2023-02-23 19:45
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://www.w3schools.com/xml/xsl_intro.asp" ignore-vars="true">
                https://www.w3schools.com/xml/xsl_intro.asp
            </a>, 2023-02-23 20:00
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://www.w3schools.com/xml/xsl_languages.asp" ignore-vars="true">
                https://www.w3schools.com/xml/xsl_languages.asp
            </a>, 2023-02-23 20:15
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://www.w3schools.com/xml/xsl_transformation.asp" ignore-vars="true">
                https://www.w3schools.com/xml/xsl_transformation.asp
            </a>, 2023-02-24 15:00
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://www.w3schools.com/xml/xsl_templates.asp" ignore-vars="true">
                https://www.w3schools.com/xml/xsl_templates.asp
            </a>, 2023-02-24 16:00
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://www.w3schools.com/xml/xsl_value_of.asp" ignore-vars="true">
                https://www.w3schools.com/xml/xsl_value_of.asp
            </a>, 2023-02-24 16:30
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://www.w3schools.com/xml/xsl_for_each.asp" ignore-vars="true">
                https://www.w3schools.com/xml/xsl_for_each.asp
            </a>, 2023-02-24 16:45
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://www.w3schools.com/xml/xsl_sort.asp" ignore-vars="true">
                https://www.w3schools.com/xml/xsl_sort.asp
            </a>, 2023-02-24 17:00
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://www.w3schools.com/xml/xsl_if.asp" ignore-vars="true">
                https://www.w3schools.com/xml/xsl_if.asp
            </a>, 2023-02-24 17:15
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://www.w3schools.com/xml/xsl_choose.asp" ignore-vars="true">
                https://www.w3schools.com/xml/xsl_choose.asp
            </a>, 2023-02-24 17:30
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://www.w3schools.com/xml/xsl_apply_templates.asp" ignore-vars="true">
                https://www.w3schools.com/xml/xsl_apply_templates.asp
            </a>, 2023-02-24 17:30
        </tip>
    </chapter>
</topic>