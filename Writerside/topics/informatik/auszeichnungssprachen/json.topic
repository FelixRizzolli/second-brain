<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="json"
       title="JSON (JavaScript Object Notation)"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">
    <show-structure depth="2" for="chapter,procedure"/>

    <chapter id="was-ist-json" title="Was ist JSON?">
        <p>
            JSON (JavaScript Object Notation) ist ein programmiersprachenunabhängiges kompaktes Datenformat in einer
            einfach lesbaren Textform für den Datenaustausch zwischen Anwendungen. Es gibt zahlreiche JSON-Parser und
            Generatoren für nahezu alle Programmiersprachen. Dieses Format eignet sich wie das XML-Format immer dann,
            wenn die Daten vom Server geladen werden sollen, um anhand dieser Daten Inhalte auf der Webseite zu
            generieren. JSON ist aber um einiges schlanker als XML und lässt sich vergleichsweise einfach in
            JavaScript-Anwendungen verarbeiten.
        </p>
    </chapter>

    <chapter id="datenstrukturen-und-formatdefinitionen" title="Datenstrukturen und Formatdefinitionen">
        <p>
            Die Daten können beliebig verschachtelt werden, beispielsweise ist eine indizierte Liste (englisch "array")
            von Objekten möglich, welche wiederum arrays oder Objekte enthalten. Als Zeichenkodierung benutzt JSON
            standardmäßig UTF-8. Auch UTF-16 und UTF-32 sind möglich.
        </p>

        <chapter id="json-datentypen" title="JSON Datentypen">
            <p>
                Eine JSON-Datei ist ein großes Objekt, welches aus Eigenschaften besteht. Eine Eigenschaft besteht aus
                einem Schlüssel und einem Wert, getrennt durch einen Doppelpunkt (<code>Schlüssel : Wert</code>). Die
                Schlüssel sollten eindeutig sein, da unterschiedliche Parser mit mehrfach vorkommenden Schlüsseln
                unterschiedlich umgehen.
            </p>

            <list>
                <li>der <b>Schlüssel</b> ist eine
                    <emphasis>Zeichenkette</emphasis>
                    .
                </li>
                <li>der <b>Wert</b> ist ein beliebiges
                    <emphasis>Element</emphasis>
                    .
                </li>
            </list>

            <table style="both">
                <tr>
                    <td>Datentyp</td>
                    <td>Beschreibung</td>
                </tr>
                <tr>
                    <td>Nullwert</td>
                    <td>
                        Der Nullwert wird durch das Schlüsselwort <code>null</code> dargestellt.
                    </td>
                </tr>
                <tr>
                    <td>Boolescher Wert</td>
                    <td>
                        Ein boolescher Wert wird durch die Schlüsselwörter <code>true</code> und <code>false</code>
                        dargestellt. Dies sind <b>keine</b> Zeichenketten. Sie werden daher, wie <code>null</code>,
                        <b>nicht</b> in Anführungszeichen gesetzt.
                    </td>
                </tr>
                <tr>
                    <td>Zahl</td>
                    <td>
                        Eine Zahl ist eine Folge der Ziffern <code>0</code>–<code>9</code>. Diese Folge kann durch ein
                        negatives Vorzeichen <code>-</code> eingeleitet und durch einen Dezimalpunkt <code>.</code>
                        unterbrochen sein. Die Zahl kann durch die Angabe eines Exponenten <code>e</code> oder
                        <code>E</code> ergänzt werden, dem ein optionales Vorz eichen <code>+</code> oder <code>-</code>
                        und
                        eine Folge der Ziffern <code>0</code>–<code>9</code> folgt.
                    </td>
                </tr>
                <tr>
                    <td>Zeichenkette</td>
                    <td>
                        beginnt und endet mit doppelten geraden Anführungszeichen (<code>"</code>). Sie kann
                        Unicode-Zeichen
                        und durch <code>\</code> eingeleitete Escape-Sequenzen enthalten.
                    </td>
                </tr>
                <tr>
                    <td>Array</td>
                    <td>
                        beginnt mit <code>[</code> und endet mit <code>]</code>. Es enthält eine durch Kommata geteilte,
                        indizierte Liste von Elementen gleichen oder verschiedenen Typs. Leere Arrays sind zulässig.
                    </td>
                </tr>
                <tr>
                    <td>Objekt</td>
                    <td>
                        beginnt mit <code>{</code> und endet mit <code>}</code>. Es enthält eine durch Kommata geteilte,
                        ungeordnete Liste von Eigenschaften. Objekte ohne Eigenschaften („leere Objekte“) sind zulässig.
                    </td>
                </tr>
            </table>
        </chapter>

        <chapter id="json-validieren" title="JSON validieren">
            <p>
                Ist man sich nicht ganz sicher sind, ob das JSON, das erstellt wurde, gültig ist, bietet sich eines der
                vielen Onlinetools an, um JSON auf Gültigkeit zu überprüfen, beispielsweise
                <a href="http://jsonlint.com">http://jsonlint.com</a>. Nur für den Fall, dass die Entwicklungsumgebung
                oder der Editor keine solche Funktionalität anbietet.
            </p>
        </chapter>

        <chapter id="einschraenkungen" title="Einschränkungen">
            <p>
                JSON unterstützt nicht alle von JavaScript unterstützten Datentypen. Bei nicht unterstützten Datentypen
                wird folgendermaßen serialisiert:
            </p>

            <list>
                <li>
                    <code>NaN</code>, <code>Infinity</code> und <code>-Infinity</code> werden zu null serialisiert.
                </li>
                <li>
                    <code>Date</code>-Objekte werden in eine Zeichenkette konvertiert, die einer
                    Datumsformatbeschreibung nach ISO-8601 genügt.
                </li>
                <li>
                    <code>Function</code>-, <code>RegExp</code>- und <code>Error</code>-Objekte werden verworfen.
                </li>
            </list>
        </chapter>
    </chapter>

    <chapter id="beispiel" title="Beispiel">
        <code-block lang="json">
            {
            "Herausgeber": "Xema",
            "Nummer": "1234-5678-9012-3456",
            "Deckung": 2e+6,
            "Waehrung": "EURO",
            "Inhaber": {
            "Name": "Mustermann",
            "Vorname": "Max",
            "maennlich": true,
            "Hobbys": [
            "Reiten",
            "Golfen",
            "Lesen"
            ],
            "Alter": 42,
            "Kinder": [],
            "Partner": null
            }
            }
        </code-block>
    </chapter>

    <chapter id="json-schema" title="JSON Schema">
        <p>
            JSON Schema gibt ein JSON-basiertes Format an, um die Struktur von JSON-Daten für die Validierung,
            Dokumentation und Interaktionssteuerung zu definieren. Es enthält einen Vertrag für die JSON-Daten, die für
            eine bestimmte Anwendung erforderlich sind, und wie diese Daten geändert werden können. Das JSON Schema
            basiert auf den Konzepten des XML Schemas, ist jedoch JSON-basiert. Wie in XSD können dieselben
            Serialisierungs- und Deserialisierungsprogramme sowohl für das Schema als auch für die Daten verwendet
            werden. Es ist selbstbeschreibend und in einem Internet-Entwurf der Internet Engineering Task Force
            festgelegt. Für verschiedene Programmiersprachen stehen mehrere Validatoren mit jeweils unterschiedlichen
            Konformitätsstufen zur Verfügung.
        </p>

        <chapter id="json-schema-beispiel" title="Beispiel">
            <code-block lang="json">
                {
                "$schema": "http://json-schema.org/draft/2019-09/schema",
                "title": "Politiker",
                "type": "object",
                "required": [
                "Vorname",
                "Nachname",
                "Geburtsdatum",
                "Nationalitaet"
                ],
                "properties": {
                "Vorname": {
                "type": "string"
                },
                "Nachname": {
                "type": "string"
                },
                "Geburtsdatum": {
                "type": "date"
                },
                "Nationalitaet": {
                "type": "string"
                },
                "Partei": {
                "type": "object",
                "properties": {
                "Name": {
                "type": "string"
                },
                }
                },
                "Hauptsitz": {
                "type": "string"
                },
                "Gründungsdatum": {
                "type": "date"
                },
                "Gründungsort": {
                "type": "string"
                },
                "Amt": {
                "type": "string"
                }
                }
                }
            </code-block>
        </chapter>
    </chapter>

    <chapter id="quellen" title="Quellen">
        <tip>
            <b>(BUCH)</b>
            978-3-8362-5697-1, JavaScript, Philip Ackermann, Rheinwerk Verlag GmbH, 2019
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://de.wikipedia.org/wiki/JavaScript_Object_Notation" ignore-vars="true">
                https://de.wikipedia.org/wiki/JavaScript_Object_Notation
            </a>, Datum 2022-08-20 Uhrzeit 07:45
        </tip>
    </chapter>
</topic>