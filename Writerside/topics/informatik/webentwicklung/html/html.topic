<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="html"
       title="HTML (Hypertext Markup Language)"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">
    <show-structure depth="2" for="chapter,procedure"/>
    <link-summary rel="description"/>

    <chapter id="introduction" title="Einführung">
        <p id="description">
            HTML, kurz für Hypertext Markup Language, ist die zentrale Sprache des World Wide Web. Sie strukturiert
            Inhalte auf Webseiten und ermöglicht die Einbettung von Texten, Bildern, Links und anderen Medien. HTML ist
            eine textbasierte Auszeichnungssprache, die von jedem Webbrowser dargestellt werden kann und damit die
            Grundlage des Internets bildet. HTML-Dokumente können mit beliebigen Texteditoren bearbeitet werden und
            enthalten neben dargestellten Daten auch Metainformationen.
        </p>

        <p>
            Man hört oft, dass Websites mit "HTML-Befehlen" programmiert werden. Das ist jedoch falsch, da HTML keine
            Programmiersprache ist. Programmiersprachen nutzen Befehle, um Aufgaben zu lösen, während HTML Marken oder
            Tags verwendet, um Inhalte zu strukturieren. Daher sollte man korrekt sagen, dass HTML geschrieben und nicht
            programmiert wird.
        </p>

        <chapter id="html_css_und_java_script" title="HTML, CSS und JavaScript">
            <p>
                HTML, CSS und JavaScript sind die Hauptbestandteile der Webentwicklung und haben jeweils spezifische
                Funktionen:
            </p>

            <list>
                <li>
                    <a href="#description"><b>HTML</b> (Hypertext Markup Language)</a> dient zur Strukturierung und
                    semantischen Auszeichnung von Inhalten auf Webseiten. Es definiert, was die Inhalte sind, wie z. B.
                    Überschriften, Absätze und Tabellen, indem es Tags verwendet. HTML ist nur für die logische Struktur
                    zuständig und sollte ausschließlich dafür genutzt werden.
                </li>
                <li>
                    <a href="css.topic"><b>CSS</b> (Cascading Style Sheets)</a> wird verwendet, um das Layout und das
                    Design von HTML-Dokumenten zu gestalten. Es trennt die visuelle Darstellung vom Inhalt, was eine
                    saubere und konsistente Gestaltung ermöglicht. CSS ermöglicht es, das Aussehen von Texten, Farben,
                    Abständen und Positionierungen zu definieren. Durch diese Trennung können Änderungen am Design
                    einfach durch eine zentrale CSS-Datei vorgenommen werden, ohne den HTML-Code zu ändern.
                </li>
                <li>
                    <a href="javascript.topic"><b>JavaScript</b></a> ist eine clientseitige Skriptsprache, die verwendet
                    wird, um Interaktivität und Dynamik in Webseiten zu bringen. Es erweitert die statischen
                    Möglichkeiten von HTML, indem es Benutzerinteraktionen, Datenauswertung und dynamische Veränderungen
                    ermöglicht. JavaScript arbeitet eng mit dem Document Object Model (DOM) zusammen, einer
                    plattformunabhängigen Schnittstelle zwischen JavaScript und HTML, um den Inhalt zu manipulieren.
                </li>
            </list>

            <p>
                Diese drei Technologien arbeiten zusammen, um moderne, interaktive und ansprechende Webanwendungen zu
                erstellen. HTML strukturiert die Inhalte, CSS gestaltet sie und JavaScript bringt Leben und
                Interaktivität hinein.
            </p>
        </chapter>

        <chapter id="living-standard" title="HTML Living Standard">
            <p>
                HTML hat eine faszinierende Evolution hinter sich. Ursprünglich wurde es als Standard vom World Wide Web
                Consortium (W3C) verwaltet, was gelegentlich zu Spannungen mit den Browserherstellern führte. Während
                das Web wuchs und sich zu einer Plattform für Webanwendungen entwickelte, wollte das W3C XHTML, einen
                neuen XML-basierten Standard, einführen. Allerdings bevorzugten die Browserhersteller, HTML
                weiterzuentwickeln.
            </p>

            <p>
                Im Zuge dessen gründeten Apple, Opera und Mozilla die WHATWG, der später auch Google und Microsoft
                beitraten, um unabhängig vom W3C an HTML zu arbeiten. Schließlich entstand in Zusammenarbeit zwischen
                W3C und WHATWG HTML5. Doch während das W3C an der Versionierung festhielt, bevorzugte die WHATWG die
                Idee eines "Living Standards", also eines lebendigen Standards ohne feste Versionsnummer.
            </p>

            <p>
                Seit dem 28. Mai 2019 ist HTML nun ein solcher Living Standard. Das bedeutet, dass es kontinuierlich
                weiterentwickelt wird und es wohl nie ein HTML6 geben wird. Die kontinuierliche Weiterentwicklung
                gewährleistet, dass HTML immer auf dem neuesten Stand bleibt und sich den aktuellen Anforderungen des
                Webs anpasst.
            </p>

            <tip>
                Der HTML Living Standard: <a href="https://html.spec.whatwg.org/"/>
            </tip>

            <tip>
                Entwicklungsgeschichte von HTML: <a href="https://pmueller.de/eine-kurze-geschichte-von-html5/"/>
            </tip>
        </chapter>
    </chapter>

    <chapter id="basics" title="Grundlegendes">
        <chapter id="basis" title="Das HTML Grundgerüst">
            <p>
                HTML strukturiert Inhalte ähnlich wie andere Medien. So wie in einem Buch oder einer Zeitung gibt es
                Überschriften, Absätze, Bilder, Tabellen und Zwischenüberschriften in verschiedenen Hierarchieebenen.
                Diese Elemente helfen, den Inhalt klar und logisch zu organisieren, wodurch er für die Benutzer leicht
                verständlich und zugänglich wird.
            </p>

            <!-- @formatter:off -->
            <code-block lang="html">
                <![CDATA[
                    <!DOCTYPE html>
                    <html lang="de">
                        <head>
                            <meta charset="UTF-8">
                            <meta name="viewport" content="width=device-width, initial-scale=1.0">
                            <title>Fenstertitel</title>
                        </head>
                        <body>
                            <h1>Die Hauptüberschrift</h1>
                            <p>Hier steht ein gewöhnlicher Absatztext.</p>
                            <h2>Eine Zwischenüberschrift</h2>
                            <p>Ein weiterer Absatz mit Text.</p>
                        </body>
                    </html>
                ]]>
            </code-block>
            <!-- @formatter:on -->

            <p>
                Das Grundgerüst eines HTML-Dokuments besteht grob aus drei Teilen:
            </p>

            <list type="bullet">
                <li>
                    Der HTML-Dokumenttyp gibt die verwendete HTML-Version an.
                </li>
                <li>
                    Der Kopfbereich enthält gewöhnlich die nicht darstellbaren Informationen zum Dokument.
                </li>
                <li>
                    Der Dokumentkörper enthält den darstellbaren Inhalt für den Webbrowser.
                </li>
            </list>

            <chapter id="doctype" title="Der HTML-Dokumenttyp <!doctype>">

            </chapter>

            <chapter id="tag-html" title="Das Wurzelelement &lt;html&gt;">
                <p>
                    Nach <code>&lt;!doctype html&gt;</code> folgt das Wurzelelement <code>html</code>, das den
                    Webbrowser darüber informiert, dass hier eine HTML-codierte Seite vorliegt. Das Wurzelelement
                    (manchmal auch Stammelement genannt) umschließt alle anderen Elemente zwischen dem Start-Tag
                    <code>&lt;html&gt;</code> und dem Ende-Tag <code>&lt;/html&gt;</code>
                </p>

                <p>
                    Es empfiehlt sich in der Praxis, auch gleich das Attribut der Sprache der Website zu deklarieren
                    (z.B. <code>lang="de"</code> für Deutsch). Ein Validator wird hier bei fehlender Sprache eine
                    Warnmeldung ausgeben. Diese Angabe ist auch hauptsächlich für Nutzer mit Screenreadern wichtig, da
                    diese so die Sprache der Website erkennen und korrekt aussprechen können.
                </p>

                <note>
                    <p>
                        <b>
                            Angabe der Sprache
                        </b>
                    </p>

                    <p>
                        Das <code>lang</code>-Attribut ist ein globales HTML-Attribut, das die Sprache des Inhalts eines
                        Elements festlegt. Es kann in fast allen HTML-Elementen verwendet werden und hilft Screenreadern
                        und Suchmaschinen, den Inhalt korrekt zu interpretieren. Der Webbrowser nutzt diese Angabe zur
                        richtigen Darstellung von Sonderzeichen. Sprachcodes können primäre und optionale Subcodes
                        enthalten, wie z.B. <code>lang="en-UK"</code> für britisches Englisch.
                    </p>
                </note>
            </chapter>

            <chapter id="tag-head" title="Der Kopfteil &lt;head&gt;">
                <p>
                    Im Kopfbereich eines HTML-Dokuments, zwischen <code>&lt;head&gt;</code> und
                    <code>&lt;/head&gt;</code>, werden verschiedene Elemente definiert. Diese Elemente sind
                    größtenteils nicht direkt sichtbar im Webbrowser, mit Ausnahme des <code>title</code>-Elements. Dazu
                    gehören das Einfügen von Skripten, Angaben zu Stylesheets und verschiedene Metaangaben über das
                    Dokument selbst. Informationen im Kopfbereich werden vom Webbrowser und Suchmaschinen verwendet. Ein
                    valides HTML-Dokument erfordert zudem einen Titel im <code>title</code>-Element im Kopfbereich.
                </p>

                <tip>
                    Mehr zu den Kopfdaten: <a href="html-kopfdaten.topic"/>
                </tip>
            </chapter>

            <chapter id="tag-body" title="Der sichtbare Bereich &lt;body&gt;">
                <p>
                    Der darstellbare Dokumentkörper wird in HTML zwischen <code>&lt;body&gt;</code> und
                    <code>&lt;/body&gt;</code> angegeben. Alles, was darin enthalten ist – wie z.B. Text, Hyperlinks,
                    Bilder und Tabellen –, wird im Webbrowser angezeigt. Das <code>body</code>-Element ist somit im
                    Gegensatz zum <code>head</code>-Element der darstellbare Bereich (auch Viewport genannt) eines
                    HTML-Dokuments.
                </p>
            </chapter>
        </chapter>

        <chapter id="syntax" title="Syntax und Aufbau von HTML">
            <chapter id="nodes" title="Knoten, Tags, Elemente und Attribute">
                <list>
                    <li>
                        <b>Knoten:</b> Grundbestandteile eines HTML-Dokuments. Es gibt verschiedene Arten von Knoten,
                        z.B. Elementknoten, Textknoten und Attributknoten. Ein Elementknoten könnte ein
                        <code>&lt;div&gt;</code>-Element sein, ein Textknoten wäre der Text innerhalb eines Elements.
                    </li>
                    <li>
                        <b>Tags:</b> Tags markieren den Anfang und das Ende von HTML-Elementen. Der Anfangstag
                        (Start-Tag) und der Endtag (End-Tag) umschließen den Inhalt des Elements. Zum Beispiel:
                        <code>&lt;p&gt;</code>Dies ist ein Absatz<code>&lt;/p&gt;</code>.
                    </li>
                    <li>
                        <b>Elemente:</b> Elemente bestehen aus einem Start-Tag, dem Inhalt und einem End-Tag. Im
                        Beispiel <code>&lt;p&gt;Dies ist ein Absatz&lt;/p&gt;</code> ist <code>&lt;p&gt;</code> der
                        Start-Tag, <code>Dies ist ein Absatz</code> der Inhalt, und <code>&lt;/p&gt;</code> der End-Tag.
                    </li>
                    <li>
                        <b>Attribute:</b> Attribute liefern zusätzliche Informationen über ein Element und werden im
                        Start-Tag eingefügt. Zum Beispiel:
                        <code>&lt;img src="bild.jpg" alt="Beschreibung des Bildes"&gt;</code>. Hier sind
                        <code>src</code> und <code>alt</code> Attribute des <code>img</code>-Elements.
                    </li>
                </list>

                <note>
                    <p>
                        <b>
                            Groß- und Kleinschreibung von HTML-Tags
                        </b>
                    </p>

                    <p>
                        HTML-Tags sind nicht case-sensitive, d.h. sie können in Groß- oder Kleinschreibung geschrieben
                        werden. Das bedeutet, dass <code>&lt;P&gt;</code> und <code>&lt;p&gt;</code> dasselbe Element
                        darstellen. Es ist jedoch eine bewährte Praxis, HTML-Tags in Kleinbuchstaben zu schreiben, um
                        den Code konsistent zu halten und die Lesbarkeit zu verbessern.
                    </p>
                </note>
            </chapter>

            <chapter id="verschachteln" title="Verschachteln">
                <p>
                    Verschachtelung bedeutet, dass HTML-Elemente innerhalb anderer HTML-Elemente platziert werden. Dies
                    ermöglicht eine hierarchische Struktur des Dokuments. Zum Beispiel kann ein Absatz
                    (<code>&lt;p&gt;</code>) in einer Div-Box (<code>&lt;div&gt;</code>) verschachtelt werden:
                </p>

                <!-- @formatter:off -->
                <code-block lang="html">
                    <![CDATA[
                        <div>
                            <p>Dies ist ein Absatz innerhalb einer Div-Box</p>
                            <ul>
                                <li>Listeneintrag 1</li>
                                <li>Listeneintrag 2</li>
                            </ul>
                        </div>
                    ]]>
                </code-block>
                <!-- @formatter:on -->

                <p>
                    In diesem Beispiel ist der Absatz <code>&lt;p&gt;</code> und die Liste <code>&lt;ul&gt;</code>
                    innerhalb des <code>&lt;div&gt;</code>-Elements verschachtelt. Jede HTML-Struktur muss korrekt
                    geöffnet und geschlossen werden, um eine gültige Dokumentstruktur zu gewährleisten.
                </p>
            </chapter>

            <chapter id="alleinstehende-tags" title="Alleinestehende Tags">
                <p>
                    Alleinestehende Tags sind HTML-Tags, die keine End-Tags benötigen und keinen Inhalt haben. Beispiele
                    sind <code>&lt;br&gt;</code> für einen Zeilenumbruch und <code>&lt;img&gt;</code> für ein Bild.
                    Früher wurde oft ein Schrägstrich am Ende des Tags verwendet, z.B. <code>&lt;br /&gt;</code>, aber
                    dieser ist heutzutage nicht mehr erforderlich.
                </p>

                <!-- @formatter:off -->
                <code-block lang="html">
                    <![CDATA[
                        <p>Hier ist ein Zeilenumbruch<br>und hier ist ein Bild:</p>
                        <img src="bild.jpg" alt="Beschreibung des Bildes">
                    ]]>
                </code-block>
                <!-- @formatter:on -->
            </chapter>

            <chapter id="dom" title="DOM (Document Object Model)">
                <p>
                    Das DOM ist eine Programmierschnittstelle für HTML-Dokumente. Es stellt das Dokument als
                    Baumstruktur dar, wobei jeder Knoten im Baum ein Teil des Dokuments ist, wie z.B. ein Element,
                    Attribut oder Text. Das DOM ermöglicht es Entwicklern mittels Scriptsprachen wie JavaScript,
                    HTML-Dokumente dynamisch zu ändern, zu manipulieren und darauf zuzugreifen.
                </p>
            </chapter>
        </chapter>

        <chapter id="kommentare" title="Kommentare">
            <p>
                Alles was zwischen <code>&lt;!--</code> und <code>--&gt;</code> steht, wird vom Webbrowser ignoriert und
                nicht angezeigt. Kommentare sind nützlich, um den Code zu dokumentieren, Notizen zu hinterlassen oder
                Codeabschnitte zu deaktivieren. Sie helfen auch dabei, den Code zu strukturieren und zu verstehen. Es
                ist wichtig, Kommentare sparsam und sinnvoll zu verwenden, um den Code übersichtlich zu halten.
            </p>

            <warning>
                Kommentare sind durchaus sinnvoll, um Anmerkungen an bestimmten Stellen im HTML-Code oder Angaben zum
                Erstellungsdatum oder sonstigen Credits hinzuzufügen. Auch wenn die Kommentare nicht im Webbrowser
                angezeigt werden, bleiben sie jedoch im Quelltext erhalten. Es sollte bedacht werden, dass jeder
                Besucher den Quelltext einsehen und somit auch die Kommentare lesen kann.
            </warning>
        </chapter>

        <chapter id="dateiendung" title="Dateiendung .html oder .htm">
            <p>
                Ob <path>seite.htm</path> oder <path>seite.html</path> als Dateiendung verwendet wird, ist dem
                Webbrowser egal. Dass es zwei Namen gibt, hat historische Gründe, die auf die DOS-Welt zurückgehen, in
                der Dateinamen nur nach der 8+3-Regel benannt werden durften: 8 Zeichen für den Dateinamen und 3 Zeichen
                für die Dateiendung. Es bleibt einem selbst überlassen, welche Version verwendet wird, aber es wird
                empfohlen, sich für eine Version zu entscheiden und diese beizubehalten.
            </p>
        </chapter>

        <chapter id="naming-conventions" title="Namenskonventionen und Referenzierung">
            <chapter id="naming-conventions-files" title="Dateinamen">
                <p>
                    Beim Vergeben von Dateinamen für HTML-Dokumente sollte man sich an folgende Richtlinien und
                    Empfehlungen halten:
                </p>

                <list type="bullet">
                    <li>
                        <p>
                            <b>Empfohlen:</b> Es sollten nur <i>Kleinbuchstaben</i> (a–z), <i>Ziffern</i> (0–9),
                            <i>Bindestrich</i> und <i>Unterstrich</i> verwendet werden. Der Punkt sollte nur zur
                            Abtrennung der Dateiendung verwendet werden. Maximal 256 Zeichen für den Dateinamen
                            verwenden.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>Weniger zu empfehlen:</b> <i>Umlaute</i> vermeiden, da sie nicht auf allen Systemen
                            reibungslos funktionieren und auf vielen Tastaturen weltweit nicht vorhanden sind.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>Gar nicht zu empfehlen:</b> <i>Großschreibung</i> vermeiden, da einige Systeme zwischen
                            Groß- und Kleinschreibung unterscheiden. Keine <i>Leerzeichen</i> verwenden; stattdessen
                            Unterstrich oder Bindestrich nutzen.
                        </p>
                    </li>
                </list>

                <note>
                    <p>
                        <b>
                            Dateinamen und SEO
                        </b>
                    </p>

                    <p>
                        Dateinamen sollten aussagekräftig und suchmaschinenfreundlich sein. Sie sollten das Thema der
                        Seite widerspiegeln und relevante Schlüsselwörter enthalten. Suchmaschinen nutzen Dateinamen als
                        Indikator für den Inhalt der Seite, daher ist es wichtig, sie sorgfältig zu wählen.
                    </p>
                </note>
            </chapter>

            <chapter id="naming-conventions-paths" title="Verzeichnisstrukturen">
                <p>
                    Sinnvolle Verzeichnisnamen und -strukturen verwenden. Dies kann sich positiv auf das
                    Suchmaschinenranking auswirken. Beispiel für eine positive Struktur:
                </p>

                <list type="bullet">
                    <li>
                        <path>/smartphones</path>
                    </li>
                    <li>
                        <path>/smartphones/apple</path>
                    </li>
                    <li>
                        <path>/smartphones/android</path>
                    </li>
                    <li>
                        <path>/apps/apple</path>
                    </li>
                    <li>
                        <path>/apps/android</path>
                    </li>
                </list>

                <p>
                    Eine thematische Verzeichnisstruktur kombiniert mit einem guten Dateinamen kann zu einer URL wie
                    folgt führen: <path>domain.de/smartphones/android/samsung-xyz-kaufen.html</path>
                </p>

                <p>
                    Verzeichnisnamen, die für Besucher oder Suchmaschinen nicht informativ sind, sollten
                    vermieden werden. Zum Beispiel:
                </p>

                <list type="bullet">
                    <li>
                        <path>/html</path>
                    </li>
                    <li>
                        <path>/html/seiten</path>
                    </li>
                    <li>
                        <path>/inhalt</path>
                    </li>
                    <li>
                        <path>/inhalt/seiten</path>
                    </li>
                </list>
            </chapter>
        </chapter>

        <chapter id="validation" title="HTML Validieren">
            <p>
                HTML-Validierung ist der Prozess, bei dem ein HTML-Dokument auf die Einhaltung der Syntaxregeln und
                Standards überprüft wird. Ein valides HTML-Dokument ist ein Dokument, das den Regeln der
                HTML-Spezifikation entspricht und korrekt strukturiert ist.
            </p>

            <p>
                Eine Webseite oder einen HTML-Code zu validieren hat viele Vorteile:
            </p>

            <list type="bullet">
                <li>
                    <b>Anzeige in jedem Browser:</b> Fehler im HTML-Code können Darstellungsprobleme verursachen,
                    insbesondere auf mobilen Geräten.
                </li>
                <li>
                    <b>Suchmaschinenoptimierung:</b> Suchmaschinen finden und indizieren die Website besser.
                </li>
                <li>
                    <b>Barrierefreiheit:</b> Korrekte HTML-Auszeichnung hilft Menschen mit Einschränkungen, die Webseite
                    zu nutzen.
                </li>
                <li>
                    <b>Wichtig für Einsteiger:</b> HTML-Validierung bietet Feedback und hilft, sauberen Code zu
                    schreiben.
                </li>
                <li>
                    <b>Qualitätssicherung:</b> Sorgt dafür, dass die Webseite auch in zukünftigen Browserversionen
                    funktioniert.
                </li>
                <li>
                    <b>Professionelles Auftreten:</b> Zeigt, dass man Wert auf ordentliche Arbeit legt.
                </li>
            </list>

            <p>
                HTML kann auf verschiedene Arten validiert werden. Man kann Websites wie
                <b><a href="https://validator.w3.org">validator.w3.org</a></b> nutzen, um den HTML-Code online zu
                überprüfen. Außerdem gibt es <b>Browser-Erweiterungen</b>, die direkt im Browser validieren, und
                sogenannte <b>Favelets</b>, die sich als Lesezeichen im Browser speichern lassen und den HTML-Code
                überprüfen. <b>HTML-Editoren</b> bieten oft auch integrierte Validierungsfunktionen an.
            </p>
        </chapter>
    </chapter>

    <chapter id="overview" title="Übersicht der HTML-Elemente">
        <chapter id="root" title="root">
            <table id="root-overview-table" style="header-row">
                <tr>
                    <td>Element</td>
                    <td>Beschreibung</td>
                </tr>
                <tr>
                    <td>
                        <a href="#tag-html">
                            <code>&lt;html&gt;</code>
                        </a>
                    </td>
                    <td>
                        Das Wurzelelement, das den gesamten Inhalt einer HTML-Seite umschließt.
                    </td>
                </tr>
            </table>
        </chapter>

        <chapter id="metadata" title="Kopfdaten">
            <include element-id="-description" from="html-kopfdaten.topic">
                <var name="id_prefix" value="kopfdaten"></var>
            </include>
            <include element-id="-overview-table" from="html-kopfdaten.topic">
                <var name="id_prefix" value="kopfdaten"></var>
            </include>
        </chapter>

        <chapter id="view" title="Body">
            <table id="view-overview-table" style="header-row">
                <tr>
                    <td>Element</td>
                    <td>Beschreibung</td>
                </tr>
                <tr>
                    <td>
                        <a href="#tag-body">
                            <code>&lt;body&gt;</code>
                        </a>
                    </td>
                    <td>
                        Der sichtbare Bereich (auch Viewport genannt) des HTML-Dokuments, der den Inhalt für den
                        Webbrowser enthält.
                    </td>
                </tr>
            </table>
        </chapter>

        <chapter id="strukturierung" title="Strukturierung">
            <include element-id="-description" from="html-strukturierung.topic">
                <var name="id_prefix" value="strukturierung"></var>
            </include>
            <include element-id="-overview-table" from="html-strukturierung.topic">
                <var name="id_prefix" value="strukturierung"></var>
            </include>
        </chapter>

        <chapter id="textstrukturierung" title="Textstrukturierung">
            <include element-id="-description" from="html-textstrukturierung.topic">
                <var name="id_prefix" value="textstrukturierung"></var>
            </include>
            <include element-id="-overview-table" from="html-textstrukturierung.topic">
                <var name="id_prefix" value="textstrukturierung"></var>
            </include>
        </chapter>

        <chapter id="textauszeichnung" title="Textauszeichnung">
            <include element-id="-description" from="html-textauszeichnung.topic">
                <var name="id_prefix" value="textauszeichnung"></var>
            </include>
            <include element-id="-overview-table" from="html-textauszeichnung.topic">
                <var name="id_prefix" value="textauszeichnung"></var>
            </include>
        </chapter>

        <chapter id="image-and-multimedia" title="Grafiken und Multimedia">
            <include element-id="-description" from="html-image-and-multimedia.topic">
                <var name="id_prefix" value="image-and-multimedia"></var>
            </include>
            <include element-id="-overview-table" from="html-image-and-multimedia.topic">
                <var name="id_prefix" value="image-and-multimedia"></var>
            </include>
        </chapter>

        <chapter id="embedded" title="Eingebettete Inhalte">
            <include element-id="-description" from="html-embedded.topic">
                <var name="id_prefix" value="embedded"></var>
            </include>
            <include element-id="-overview-table" from="html-embedded.topic">
                <var name="id_prefix" value="embedded"></var>
            </include>
        </chapter>

        <chapter id="svg-and-mathml" title="SVG und MathML">
            <include element-id="-description" from="html-svg-and-mathml.topic">
                <var name="id_prefix" value="svg-and-mathml"></var>
            </include>
            <include element-id="-overview-table" from="html-svg-and-mathml.topic">
                <var name="id_prefix" value="svg-and-mathml"></var>
            </include>
        </chapter>

        <chapter id="scripts" title="Scripts">
            <include element-id="-description" from="html-scripts.topic">
                <var name="id_prefix" value="scripts"></var>
            </include>
            <include element-id="-overview-table" from="html-scripts.topic">
                <var name="id_prefix" value="scripts"></var>
            </include>
        </chapter>

        <chapter id="table" title="Tabellen">
            <include element-id="-description" from="html-tabellen.topic">
                <var name="id_prefix" value="table"></var>
            </include>
            <include element-id="-overview-table" from="html-tabellen.topic">
                <var name="id_prefix" value="table"></var>
            </include>
        </chapter>

        <chapter id="form" title="Formulare">
            <include element-id="-description" from="html-form.topic">
                <var name="id_prefix" value="form"></var>
            </include>
            <include element-id="-overview-table" from="html-form.topic">
                <var name="id_prefix" value="form"></var>
            </include>
        </chapter>

        <chapter id="interactive-elements" title="Interaktive Elemente">
        </chapter>

        <chapter id="web-components" title="Web Components">
            <table id="web-components-overview-table" style="header-row">
                <tr>
                    <td>Element</td>
                    <td>Beschreibung</td>
                </tr>
                <tr>
                    <td>
                        <code>&lt;slot&gt;</code>
                    </td>
                    <td>
                        <p>
                            Das <code>&lt;slot&gt;</code>-Element wird in HTML verwendet, um Platzhalter in einem Web
                            Component Template zu definieren. Es ermöglicht die Verwendung von "Slots" innerhalb von
                            benutzerdefinierten HTML-Elementen, sodass Inhalte von außen in diese Slots eingefügt werden
                            können. Dies bietet eine flexible Möglichkeit, Inhalte dynamisch und modular zu gestalten.
                        </p>

                        <tip>
                            Mehr dazu: <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot"/>
                        </tip>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>&lt;template&gt;</code>
                    </td>
                    <td>
                        <p>
                            Das <code>&lt;template&gt;</code>-Element in HTML dient dazu, Inhalte zu definieren, die
                            nicht sofort beim Laden der Seite gerendert werden. Es ermöglicht Entwicklern,
                            wiederverwendbare Vorlagen für dynamische Inhalte zu erstellen. Diese Vorlagen können später
                            über JavaScript geklont und in das Dokument eingefügt werden.
                        </p>

                        <tip>
                            Mehr dazu: <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template"/>
                        </tip>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>&lt;summary&gt;</code>
                    </td>
                    <td>
                        <p>
                            Das <code>&lt;summary&gt;</code>-Element wird zusammen mit dem
                            <code>&lt;details&gt;</code>-Element verwendet, um einen zusammenklappbaren Bereich in einem
                            HTML-Dokument zu erstellen. Das <code>&lt;summary&gt;</code>-Element dient als Überschrift
                            oder Beschriftung, die der Benutzer anklicken kann, um den verborgenen Inhalt im
                            <code>&lt;details&gt;</code>-Element anzuzeigen oder zu verbergen.
                        </p>

                        <tip>
                            Mehr dazu: <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary"/>
                        </tip>
                    </td>
                </tr>
            </table>
        </chapter>
    </chapter>

    <chapter id="quellen" title="Quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836297288, "HTML und CSS - Das umfassende Handbuch", Jürgen Wolf, 2023
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element"/>, 2024-10-21 19:00
        </tip>
    </chapter>
</topic>