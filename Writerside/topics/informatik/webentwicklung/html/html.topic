<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="html"
       title="HTML (Hypertext Markup Language)"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">
    <show-structure depth="2" for="chapter,procedure"/>
    <link-summary rel="description"/>

    <chapter id="introduction" title="Einführung">
        <p id="description">
            HTML, kurz für Hypertext Markup Language, ist die zentrale Sprache des World Wide Web. Sie strukturiert
            Inhalte auf Webseiten und ermöglicht die Einbettung von Texten, Bildern, Links und anderen Medien. HTML ist
            eine textbasierte Auszeichnungssprache, die von jedem Webbrowser dargestellt werden kann und damit die
            Grundlage des Internets bildet. HTML-Dokumente können mit beliebigen Texteditoren bearbeitet werden und
            enthalten neben dargestellten Daten auch Metainformationen.
        </p>

        <p>
            Man hört oft, dass Websites mit "HTML-Befehlen" programmiert werden. Das ist jedoch falsch, da HTML keine
            Programmiersprache ist. Programmiersprachen nutzen Befehle, um Aufgaben zu lösen, während HTML Marken oder
            Tags verwendet, um Inhalte zu strukturieren. Daher sollte man korrekt sagen, dass HTML geschrieben und nicht
            programmiert wird.
        </p>

        <chapter id="html_css_und_java_script" title="HTML, CSS und JavaScript">
            <p>
                HTML, CSS und JavaScript sind die Hauptbestandteile der Webentwicklung und haben jeweils spezifische
                Funktionen:
            </p>

            <list>
                <li>
                    <a href="#description"><b>HTML</b> (Hypertext Markup Language)</a> dient zur Strukturierung und
                    semantischen Auszeichnung von Inhalten auf Webseiten. Es definiert, was die Inhalte sind, wie z. B.
                    Überschriften, Absätze und Tabellen, indem es Tags verwendet. HTML ist nur für die logische Struktur
                    zuständig und sollte ausschließlich dafür genutzt werden.
                </li>
                <li>
                    <a href="css.topic"><b>CSS</b> (Cascading Style Sheets)</a> wird verwendet, um das Layout und das
                    Design von HTML-Dokumenten zu gestalten. Es trennt die visuelle Darstellung vom Inhalt, was eine
                    saubere und konsistente Gestaltung ermöglicht. CSS ermöglicht es, das Aussehen von Texten, Farben,
                    Abständen und Positionierungen zu definieren. Durch diese Trennung können Änderungen am Design
                    einfach durch eine zentrale CSS-Datei vorgenommen werden, ohne den HTML-Code zu ändern.
                </li>
                <li>
                    <a href="javascript.topic"><b>JavaScript</b></a> ist eine clientseitige Skriptsprache, die verwendet
                    wird, um Interaktivität und Dynamik in Webseiten zu bringen. Es erweitert die statischen
                    Möglichkeiten von HTML, indem es Benutzerinteraktionen, Datenauswertung und dynamische Veränderungen
                    ermöglicht. JavaScript arbeitet eng mit dem Document Object Model (DOM) zusammen, einer
                    plattformunabhängigen Schnittstelle zwischen JavaScript und HTML, um den Inhalt zu manipulieren.
                </li>
            </list>

            <p>
                Diese drei Technologien arbeiten zusammen, um moderne, interaktive und ansprechende Webanwendungen zu
                erstellen. HTML strukturiert die Inhalte, CSS gestaltet sie und JavaScript bringt Leben und
                Interaktivität hinein.
            </p>
        </chapter>

        <chapter id="living-standard" title="HTML Living Standard">
            <p>
                HTML hat eine faszinierende Evolution hinter sich. Ursprünglich wurde es als Standard vom World Wide Web
                Consortium (W3C) verwaltet, was gelegentlich zu Spannungen mit den Browserherstellern führte. Während
                das Web wuchs und sich zu einer Plattform für Webanwendungen entwickelte, wollte das W3C XHTML, einen
                neuen XML-basierten Standard, einführen. Allerdings bevorzugten die Browserhersteller, HTML
                weiterzuentwickeln.
            </p>

            <p>
                Im Zuge dessen gründeten Apple, Opera und Mozilla die WHATWG, der später auch Google und Microsoft
                beitraten, um unabhängig vom W3C an HTML zu arbeiten. Schließlich entstand in Zusammenarbeit zwischen
                W3C und WHATWG HTML5. Doch während das W3C an der Versionierung festhielt, bevorzugte die WHATWG die
                Idee eines "Living Standards", also eines lebendigen Standards ohne feste Versionsnummer.
            </p>

            <p>
                Seit dem 28. Mai 2019 ist HTML nun ein solcher Living Standard. Das bedeutet, dass es kontinuierlich
                weiterentwickelt wird und es wohl nie ein HTML6 geben wird. Die kontinuierliche Weiterentwicklung
                gewährleistet, dass HTML immer auf dem neuesten Stand bleibt und sich den aktuellen Anforderungen des
                Webs anpasst.
            </p>

            <tip>
                Der HTML Living Standard: <a href="https://html.spec.whatwg.org/"/>
            </tip>

            <tip>
                Entwicklungsgeschichte von HTML: <a href="https://pmueller.de/eine-kurze-geschichte-von-html5/"/>
            </tip>
        </chapter>
    </chapter>

    <chapter id="basics" title="Grundlegendes">
        <chapter id="basis" title="Das HTML Grundgerüst">
            <p>
                HTML strukturiert Inhalte ähnlich wie andere Medien. So wie in einem Buch oder einer Zeitung gibt es
                Überschriften, Absätze, Bilder, Tabellen und Zwischenüberschriften in verschiedenen Hierarchieebenen.
                Diese Elemente helfen, den Inhalt klar und logisch zu organisieren, wodurch er für die Benutzer leicht
                verständlich und zugänglich wird.
            </p>

            <!-- @formatter:off -->
            <code-block lang="html">
                <![CDATA[
                    <!DOCTYPE html>
                    <html lang="de">
                        <head>
                            <meta charset="UTF-8">
                            <meta name="viewport" content="width=device-width, initial-scale=1.0">
                            <title>Fenstertitel</title>
                        </head>
                        <body>
                            <h1>Die Hauptüberschrift</h1>
                            <p>Hier steht ein gewöhnlicher Absatztext.</p>
                            <h2>Eine Zwischenüberschrift</h2>
                            <p>Ein weiterer Absatz mit Text.</p>
                        </body>
                    </html>
                ]]>
            </code-block>
            <!-- @formatter:on -->

            <p>
                Das Grundgerüst eines HTML-Dokuments besteht grob aus drei Teilen:
            </p>

            <list type="bullet">
                <li>
                    Der HTML-Dokumenttyp gibt die verwendete HTML-Version an.
                </li>
                <li>
                    Der Kopfbereich enthält gewöhnlich die nicht darstellbaren Informationen zum Dokument.
                </li>
                <li>
                    Der Dokumentkörper enthält den darstellbaren Inhalt für den Webbrowser.
                </li>
            </list>

            <chapter id="doctype" title="Der HTML-Dokumenttyp <!doctype>">

            </chapter>

            <chapter id="tag-html" title="Das Wurzelelement &lt;html&gt;">
                <p>
                    Nach <code>&lt;!doctype html&gt;</code> folgt das Wurzelelement <code>html</code>, das den
                    Webbrowser darüber informiert, dass hier eine HTML-codierte Seite vorliegt. Das Wurzelelement
                    (manchmal auch Stammelement genannt) umschließt alle anderen Elemente zwischen dem Start-Tag
                    <code>&lt;html&gt;</code> und dem Ende-Tag <code>&lt;/html&gt;</code>
                </p>

                <p>
                    Es empfiehlt sich in der Praxis, auch gleich das Attribut der Sprache der Website zu deklarieren
                    (z.B. <code>lang="de"</code> für Deutsch). Ein Validator wird hier bei fehlender Sprache eine
                    Warnmeldung ausgeben. Diese Angabe ist auch hauptsächlich für Nutzer mit Screenreadern wichtig, da
                    diese so die Sprache der Website erkennen und korrekt aussprechen können.
                </p>

                <note>
                    <p>
                        <b>
                            Angabe der Sprache
                        </b>
                    </p>

                    <p>
                        Das <code>lang</code>-Attribut ist ein globales HTML-Attribut, das die Sprache des Inhalts eines
                        Elements festlegt. Es kann in fast allen HTML-Elementen verwendet werden und hilft Screenreadern
                        und Suchmaschinen, den Inhalt korrekt zu interpretieren. Der Webbrowser nutzt diese Angabe zur
                        richtigen Darstellung von Sonderzeichen. Sprachcodes können primäre und optionale Subcodes
                        enthalten, wie z.B. <code>lang="en-UK"</code> für britisches Englisch.
                    </p>
                </note>
            </chapter>

            <chapter id="tag-head" title="Der Kopfteil &lt;head&gt;">
                <p>
                    Im Kopfbereich eines HTML-Dokuments, zwischen <code>&lt;head&gt;</code> und
                    <code>&lt;/head&gt;</code>, werden verschiedene Elemente definiert. Diese Elemente sind
                    größtenteils nicht direkt sichtbar im Webbrowser, mit Ausnahme des <code>title</code>-Elements. Dazu
                    gehören das Einfügen von Skripten, Angaben zu Stylesheets und verschiedene Metaangaben über das
                    Dokument selbst. Informationen im Kopfbereich werden vom Webbrowser und Suchmaschinen verwendet. Ein
                    valides HTML-Dokument erfordert zudem einen Titel im <code>title</code>-Element im Kopfbereich.
                </p>

                <tip>
                    Mehr zu den Kopfdaten: <a href="html-kopfdaten.topic"/>
                </tip>
            </chapter>

            <chapter id="tag-body" title="Der sichtbare Bereich &lt;body&gt;">
                <p>
                    Der darstellbare Dokumentkörper wird in HTML zwischen <code>&lt;body&gt;</code> und
                    <code>&lt;/body&gt;</code> angegeben. Alles, was darin enthalten ist – wie z.B. Text, Hyperlinks,
                    Bilder und Tabellen –, wird im Webbrowser angezeigt. Das <code>body</code>-Element ist somit im
                    Gegensatz zum <code>head</code>-Element der darstellbare Bereich (auch Viewport genannt) eines
                    HTML-Dokuments.
                </p>
            </chapter>
        </chapter>

        <chapter id="syntax" title="Syntax und Aufbau von HTML">
            <chapter id="nodes" title="Knoten, Tags, Elemente und Attribute">
                <list>
                    <li>
                        <b>Knoten:</b> Grundbestandteile eines HTML-Dokuments. Es gibt verschiedene Arten von Knoten,
                        z.B. Elementknoten, Textknoten und Attributknoten. Ein Elementknoten könnte ein
                        <code>&lt;div&gt;</code>-Element sein, ein Textknoten wäre der Text innerhalb eines Elements.
                    </li>
                    <li>
                        <b>Tags:</b> Tags markieren den Anfang und das Ende von HTML-Elementen. Der Anfangstag
                        (Start-Tag) und der Endtag (End-Tag) umschließen den Inhalt des Elements. Zum Beispiel:
                        <code>&lt;p&gt;</code>Dies ist ein Absatz<code>&lt;/p&gt;</code>.
                    </li>
                    <li>
                        <b>Elemente:</b> Elemente bestehen aus einem Start-Tag, dem Inhalt und einem End-Tag. Im
                        Beispiel <code>&lt;p&gt;Dies ist ein Absatz&lt;/p&gt;</code> ist <code>&lt;p&gt;</code> der
                        Start-Tag, <code>Dies ist ein Absatz</code> der Inhalt, und <code>&lt;/p&gt;</code> der End-Tag.
                    </li>
                    <li>
                        <b>Attribute:</b> Attribute liefern zusätzliche Informationen über ein Element und werden im
                        Start-Tag eingefügt. Zum Beispiel:
                        <code>&lt;img src="bild.jpg" alt="Beschreibung des Bildes"&gt;</code>. Hier sind
                        <code>src</code> und <code>alt</code> Attribute des <code>img</code>-Elements.
                    </li>
                </list>

                <note>
                    <p>
                        <b>
                            Groß- und Kleinschreibung von HTML-Tags
                        </b>
                    </p>

                    <p>
                        HTML-Tags sind nicht case-sensitive, d.h. sie können in Groß- oder Kleinschreibung geschrieben
                        werden. Das bedeutet, dass <code>&lt;P&gt;</code> und <code>&lt;p&gt;</code> dasselbe Element
                        darstellen. Es ist jedoch eine bewährte Praxis, HTML-Tags in Kleinbuchstaben zu schreiben, um
                        den Code konsistent zu halten und die Lesbarkeit zu verbessern.
                    </p>
                </note>
            </chapter>

            <chapter id="verschachteln" title="Verschachteln">
                <p>
                    Verschachtelung bedeutet, dass HTML-Elemente innerhalb anderer HTML-Elemente platziert werden. Dies
                    ermöglicht eine hierarchische Struktur des Dokuments. Zum Beispiel kann ein Absatz
                    (<code>&lt;p&gt;</code>) in einer Div-Box (<code>&lt;div&gt;</code>) verschachtelt werden:
                </p>

                <!-- @formatter:off -->
                <code-block lang="html">
                    <![CDATA[
                        <div>
                            <p>Dies ist ein Absatz innerhalb einer Div-Box</p>
                            <ul>
                                <li>Listeneintrag 1</li>
                                <li>Listeneintrag 2</li>
                            </ul>
                        </div>
                    ]]>
                </code-block>
                <!-- @formatter:on -->

                <p>
                    In diesem Beispiel ist der Absatz <code>&lt;p&gt;</code> und die Liste <code>&lt;ul&gt;</code>
                    innerhalb des <code>&lt;div&gt;</code>-Elements verschachtelt. Jede HTML-Struktur muss korrekt
                    geöffnet und geschlossen werden, um eine gültige Dokumentstruktur zu gewährleisten.
                </p>
            </chapter>

            <chapter id="alleinstehende-tags" title="Alleinestehende Tags">
                <p>
                    Alleinestehende Tags sind HTML-Tags, die keine End-Tags benötigen und keinen Inhalt haben. Beispiele
                    sind <code>&lt;br&gt;</code> für einen Zeilenumbruch und <code>&lt;img&gt;</code> für ein Bild.
                    Früher wurde oft ein Schrägstrich am Ende des Tags verwendet, z.B. <code>&lt;br /&gt;</code>, aber
                    dieser ist heutzutage nicht mehr erforderlich.
                </p>

                <!-- @formatter:off -->
                <code-block lang="html">
                    <![CDATA[
                        <p>Hier ist ein Zeilenumbruch<br>und hier ist ein Bild:</p>
                        <img src="bild.jpg" alt="Beschreibung des Bildes">
                    ]]>
                </code-block>
                <!-- @formatter:on -->
            </chapter>

            <chapter id="dom" title="DOM (Document Object Model)">
                <p>
                    Das DOM ist eine Programmierschnittstelle für HTML-Dokumente. Es stellt das Dokument als
                    Baumstruktur dar, wobei jeder Knoten im Baum ein Teil des Dokuments ist, wie z.B. ein Element,
                    Attribut oder Text. Das DOM ermöglicht es Entwicklern mittels Scriptsprachen wie JavaScript,
                    HTML-Dokumente dynamisch zu ändern, zu manipulieren und darauf zuzugreifen.
                </p>
            </chapter>
        </chapter>

        <chapter id="kommentare" title="Kommentare">
            <p>
                Alles was zwischen <code>&lt;!--</code> und <code>--&gt;</code> steht, wird vom Webbrowser ignoriert und
                nicht angezeigt. Kommentare sind nützlich, um den Code zu dokumentieren, Notizen zu hinterlassen oder
                Codeabschnitte zu deaktivieren. Sie helfen auch dabei, den Code zu strukturieren und zu verstehen. Es
                ist wichtig, Kommentare sparsam und sinnvoll zu verwenden, um den Code übersichtlich zu halten.
            </p>

            <warning>
                Kommentare sind durchaus sinnvoll, um Anmerkungen an bestimmten Stellen im HTML-Code oder Angaben zum
                Erstellungsdatum oder sonstigen Credits hinzuzufügen. Auch wenn die Kommentare nicht im Webbrowser
                angezeigt werden, bleiben sie jedoch im Quelltext erhalten. Es sollte bedacht werden, dass jeder
                Besucher den Quelltext einsehen und somit auch die Kommentare lesen kann.
            </warning>
        </chapter>

        <chapter id="dateiendung" title="Dateiendung .html oder .htm">
            <p>
                Ob <path>seite.htm</path> oder <path>seite.html</path> als Dateiendung verwendet wird, ist dem
                Webbrowser egal. Dass es zwei Namen gibt, hat historische Gründe, die auf die DOS-Welt zurückgehen, in
                der Dateinamen nur nach der 8+3-Regel benannt werden durften: 8 Zeichen für den Dateinamen und 3 Zeichen
                für die Dateiendung. Es bleibt einem selbst überlassen, welche Version verwendet wird, aber es wird
                empfohlen, sich für eine Version zu entscheiden und diese beizubehalten.
            </p>
        </chapter>

        <chapter id="naming-conventions" title="Namenskonventionen und Referenzierung">
            <chapter id="naming-conventions-files" title="Dateinamen">
                <p>
                    Beim Vergeben von Dateinamen für HTML-Dokumente sollte man sich an folgende Richtlinien und
                    Empfehlungen halten:
                </p>

                <list type="bullet">
                    <li>
                        <p>
                            <b>Empfohlen:</b> Es sollten nur <i>Kleinbuchstaben</i> (a–z), <i>Ziffern</i> (0–9),
                            <i>Bindestrich</i> und <i>Unterstrich</i> verwendet werden. Der Punkt sollte nur zur
                            Abtrennung der Dateiendung verwendet werden. Maximal 256 Zeichen für den Dateinamen
                            verwenden.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>Weniger zu empfehlen:</b> <i>Umlaute</i> vermeiden, da sie nicht auf allen Systemen
                            reibungslos funktionieren und auf vielen Tastaturen weltweit nicht vorhanden sind.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>Gar nicht zu empfehlen:</b> <i>Großschreibung</i> vermeiden, da einige Systeme zwischen
                            Groß- und Kleinschreibung unterscheiden. Keine <i>Leerzeichen</i> verwenden; stattdessen
                            Unterstrich oder Bindestrich nutzen.
                        </p>
                    </li>
                </list>

                <note>
                    <p>
                        <b>
                            Dateinamen und SEO
                        </b>
                    </p>

                    <p>
                        Dateinamen sollten aussagekräftig und suchmaschinenfreundlich sein. Sie sollten das Thema der
                        Seite widerspiegeln und relevante Schlüsselwörter enthalten. Suchmaschinen nutzen Dateinamen als
                        Indikator für den Inhalt der Seite, daher ist es wichtig, sie sorgfältig zu wählen.
                    </p>
                </note>
            </chapter>

            <chapter id="naming-conventions-paths" title="Verzeichnisstrukturen">
                <p>
                    Sinnvolle Verzeichnisnamen und -strukturen verwenden. Dies kann sich positiv auf das
                    Suchmaschinenranking auswirken. Beispiel für eine positive Struktur:
                </p>

                <list type="bullet">
                    <li>
                        <path>/smartphones</path>
                    </li>
                    <li>
                        <path>/smartphones/apple</path>
                    </li>
                    <li>
                        <path>/smartphones/android</path>
                    </li>
                    <li>
                        <path>/apps/apple</path>
                    </li>
                    <li>
                        <path>/apps/android</path>
                    </li>
                </list>

                <p>
                    Eine thematische Verzeichnisstruktur kombiniert mit einem guten Dateinamen kann zu einer URL wie
                    folgt führen: <path>domain.de/smartphones/android/samsung-xyz-kaufen.html</path>
                </p>

                <p>
                    Verzeichnisnamen, die für Besucher oder Suchmaschinen nicht informativ sind, sollten
                    vermieden werden. Zum Beispiel:
                </p>

                <list type="bullet">
                    <li>
                        <path>/html</path>
                    </li>
                    <li>
                        <path>/html/seiten</path>
                    </li>
                    <li>
                        <path>/inhalt</path>
                    </li>
                    <li>
                        <path>/inhalt/seiten</path>
                    </li>
                </list>
            </chapter>
        </chapter>

        <chapter id="validation" title="HTML Validieren">
            <p>
                HTML-Validierung ist der Prozess, bei dem ein HTML-Dokument auf die Einhaltung der Syntaxregeln und
                Standards überprüft wird. Ein valides HTML-Dokument ist ein Dokument, das den Regeln der
                HTML-Spezifikation entspricht und korrekt strukturiert ist.
            </p>

            <p>
                Eine Webseite oder einen HTML-Code zu validieren hat viele Vorteile:
            </p>

            <list type="bullet">
                <li>
                    <b>Anzeige in jedem Browser:</b> Fehler im HTML-Code können Darstellungsprobleme verursachen,
                    insbesondere auf mobilen Geräten.
                </li>
                <li>
                    <b>Suchmaschinenoptimierung:</b> Suchmaschinen finden und indizieren die Website besser.
                </li>
                <li>
                    <b>Barrierefreiheit:</b> Korrekte HTML-Auszeichnung hilft Menschen mit Einschränkungen, die Webseite
                    zu nutzen.
                </li>
                <li>
                    <b>Wichtig für Einsteiger:</b> HTML-Validierung bietet Feedback und hilft, sauberen Code zu
                    schreiben.
                </li>
                <li>
                    <b>Qualitätssicherung:</b> Sorgt dafür, dass die Webseite auch in zukünftigen Browserversionen
                    funktioniert.
                </li>
                <li>
                    <b>Professionelles Auftreten:</b> Zeigt, dass man Wert auf ordentliche Arbeit legt.
                </li>
            </list>

            <p>
                HTML kann auf verschiedene Arten validiert werden. Man kann Websites wie
                <b><a href="https://validator.w3.org">validator.w3.org</a></b> nutzen, um den HTML-Code online zu
                überprüfen. Außerdem gibt es <b>Browser-Erweiterungen</b>, die direkt im Browser validieren, und
                sogenannte <b>Favelets</b>, die sich als Lesezeichen im Browser speichern lassen und den HTML-Code
                überprüfen. <b>HTML-Editoren</b> bieten oft auch integrierte Validierungsfunktionen an.
            </p>
        </chapter>

        <chapter id="semantic" title="Semantik">
            <p>
                Semantik in HTML bezieht sich auf die Verwendung von HTML-Tags, die die Bedeutung und Struktur des
                Inhalts vermitteln. Diese Tags helfen sowohl Browsern als auch Entwicklern, die Rolle und Wichtigkeit
                verschiedener Teile einer Webseite zu verstehen.
            </p>

            <chapter id="semantic-meaning" title="Bedeutung von Semantik in HTML">
                <list type="decimal">
                    <li>
                        <p>
                            <b>
                                Verbesserte Zugänglichkeit
                            </b>
                        </p>

                        <p>
                            Semantische Tags erleichtern es Screenreadern und anderen unterstützenden Technologien, den
                            Inhalt zu interpretieren und zu navigieren, was die Benutzererfahrung für Menschen mit
                            Behinderungen verbessert.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>
                                Bessere SEO
                            </b>
                        </p>

                        <p>
                            Suchmaschinen verwenden semantische Tags, um den Inhalt und Kontext einer Webseite zu
                            verstehen, was das Suchmaschinenranking der Seite verbessern kann.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>
                                Erhöhte Lesbarkeit
                            </b>
                        </p>

                        <p>
                            Semantische Tags bieten eine klare Struktur, wodurch der HTML-Code für Entwickler lesbarer
                            und wartbarer wird.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>
                                Konsistente Gestaltung
                            </b>
                        </p>

                        <p>
                            Durch die Verwendung semantischer Tags kann CSS diese Tags effektiver ansprechen, was zu
                            einer konsistenteren Gestaltung führt.
                        </p>
                    </li>
                </list>
            </chapter>

            <chapter id="semantic-examples" title="Beispiele für semantische HTML-Tags">
                <list>
                    <li>
                        <a href="html-strukturierung.topic#tag-article"><code>&lt;article&gt;</code></a>: Repräsentiert
                        einen eigenständigen Inhalt, der unabhängig verteilt oder wiederverwendet werden kann.
                    </li>
                    <li>
                        <a href="html-strukturierung.topic#tag-aside"><code>&lt;aside&gt;</code></a>: Enthält Inhalte,
                        die in Bezug auf den umgebenden Inhalt nebensächlich sind, wie Seitenleisten oder Hinweisboxen.
                    </li>
                    <li>
                        <a href="html-strukturierung.topic#tag-footer"><code>&lt;footer&gt;</code></a>: Definiert den
                        Fußbereich eines Abschnitts oder einer Seite, typischerweise mit Informationen über den Autor,
                        Copyright oder Links zu verwandten Dokumenten.
                    </li>
                    <li>
                        <a href="html-strukturierung.topic#tag-header"><code>&lt;header&gt;</code></a>: Repräsentiert
                        einführende Inhalte oder eine Gruppe von Navigationslinks.
                    </li>
                    <li>
                        <a href="html-strukturierung.topic#tag-nav"><code>&lt;nav&gt;</code></a>: Enthält
                        Navigationslinks.
                    </li>
                    <li>
                        <a href="html-strukturierung.topic#tag-section"><code>&lt;section&gt;</code></a>: Definiert
                        einen Abschnitt in einem Dokument, typischerweise mit einer Überschrift.
                    </li>
                </list>

                <p>
                    Die Verwendung dieser semantischen Elemente hilft, eine gut strukturierte, zugängliche und
                    SEO-freundliche Webseite zu erstellen.
                </p>
            </chapter>
        </chapter>

        <chapter id="wai-aria"
                 title="WAI-ARIA (Web Accessibility Initiative - Accessible Rich Internet Applications Suite)">
            <p>
                WAI-ARIA ist eine Spezifikation des W3C, die die Zugänglichkeit von Webanwendungen für Menschen mit
                Behinderungen verbessert. Es bietet eine Möglichkeit, die <b>Semantik von HTML-Elementen zu
                erweitern</b> und zusätzliche Informationen über die Interaktion und Struktur einer Webseite
                bereitzustellen.
            </p>

            <chapter id="wai-aria-role" title="Rollen">
                <p>
                    WAI-ARIA definierte eine Reihe von Rollen, Zuständen und Eigenschaften, um Informationen
                    darüber bereitzustellen, wie Websites für Benutzer mit Behinderungen zu bedienen sind. Die
                    Spezifikation ermöglicht es, Elementen auf der Website bestimmte Rollen zuzuweisen, um zu
                    beschreiben, welche Art von Interaktion für ein Element möglich ist, wie es verwendet werden kann
                    und welche Informationen es darstellt.
                </p>

                <p>
                    Die <code>role</code>-Eigenschaft wird verwendet, um die Rolle eines Elements zu definieren. Sie
                    kann auf jedes HTML-Element angewendet werden, um seine Funktion und Bedeutung zu beschreiben.
                    Beispielsweise kann ein <code>&lt;div&gt;</code>-Element die Rolle eines
                    <code>article</code>-Elements annehmen, indem ihm die <code>role="article"</code>-Eigenschaft
                    zugewiesen wird.
                </p>

                <note>
                    Es ist jedoch zu beachten, dass jedes HTML-Element nur eine Rolle haben kann und es in der Praxis
                    selten wirklich sinnvoll ist, die eingebaute Rolle eines HTML-Elements mit dem Attribut <code>
                    role</code> zu überschreiben. Das <code>ul</code>-Element hat z.B. die Rolle list, bei der ein
                    Screenreader zur Orientierung vorliest, wie viele Elemente enthalten sind. Da das
                    <code>ul</code>-Element jedoch auch häufig innerhalb einer Navigation verwendet wird, kann es
                    sinnvoll sein, die Standardrolle mit <code>&lt;ul role="navigation"&gt;</code> zu überschreiben,
                    damit der Screenreader nicht ausliest, wie viele Elemente enthalten sind.
                </note>

                <p>
                    Hier sind einige Beispiele für Rollen, die in WAI-ARIA definiert sind:
                </p>

                <table style="header-row">
                    <tr>
                        <td>Landmarks-Rolle</td>
                        <td>HTML-Element</td>
                    </tr>
                    <tr>
                        <td><code>banner</code></td>
                        <td><code>&lt;header&gt;</code></td>
                    </tr>
                    <tr>
                        <td><code>complementary</code></td>
                        <td><code>&lt;aside&gt;</code></td>
                    </tr>
                    <tr>
                        <td><code>contentinfo</code></td>
                        <td><code>&lt;footer&gt;</code></td>
                    </tr>
                    <tr>
                        <td><code>form</code></td>
                        <td><code>&lt;form&gt;</code></td>
                    </tr>
                    <tr>
                        <td><code>main</code></td>
                        <td><code>&lt;main&gt;</code></td>
                    </tr>
                    <tr>
                        <td><code>navigation</code></td>
                        <td><code>&lt;nav&gt;</code></td>
                    </tr>
                    <tr>
                        <td><code>region</code></td>
                        <td><code>&lt;section&gt;</code></td>
                    </tr>
                    <tr>
                        <td><code>search</code></td>
                        <td><code>&lt;search&gt;</code></td>
                    </tr>
                </table>

                <tip>
                    <p>
                        Weitere Informationen zu WAI-ARIA: <a href="https://www.w3.org/WAI/standards-guidelines/aria/"/>
                    </p>
                    <p>
                        WAI-ARIA Standard 1.2 (2023-06-06): <a href="https://www.w3.org/TR/wai-aria-1.2/"/>
                    </p>
                </tip>

                <p>
                    Neben den Landmarks-Rollen gibt es noch andere Kategorien von Rollen wie abstrakte Rollen,
                    Widget-Rollen, Dokumentstruktur-Rollen, Live-Region-Rollen und Fenster-Rollen.
                </p>

                <p>
                    Es gelten folgende Empfehlungen in Bezug auf die Verwendung von WAI-ARIA Rollen:
                </p>

                <list type="bullet">
                    <li>
                        <b>Das semantische HTML bevorzugen:</b> native HTML-Elemente haben eine eingebaute
                        Standardrolle, somit empfiehlt es sich immer zuerst das native HTML-Element mit dessen
                        semantischer Bedeutung zu verwenden.
                    </li>
                    <li>
                        <b>Das <code>role</code>-Attribut soll für nicht semantische HTML-Elemente verwendet werden:</b>
                        wird z.B. das bedeutungslose <code>&lt;div&gt;</code>-Element eingesetzt, um damit mit
                        <code>role="button"</code> einen button nachzubauen, obwohl es mit <code>&lt;button>&gt;</code>
                        ein semantisches HTML-Element dafür gibt, dann ist dies nicht empfehlenswert. Ein
                        <code>button</code>-Element kann auch mit der Tastatur angesprungen werden. Bei einem
                        <code>&lt;div role="button"&gt;</code> müsste man sich darum selbst kümmern. Das kann ziemlich
                        aufwendig und fehleranfällig werden.
                    </li>
                </list>
            </chapter>

            <chapter id="wai-aria-state-attributes" title="Zustand und Attribute">
                <p>
                    WAI-ARIA definiert auch eine Reihe von Zuständen und Attributen, die verwendet werden können, um
                    zusätzliche Informationen über die Interaktion und den Zustand eines Elements bereitzustellen. Diese
                    Attribute können dynamisch aktualisiert werden, um den Benutzern Feedback über den Status eines
                    Elements zu geben.
                </p>

                <p>
                    Hier sind einige Beispiele für Zustände und Attribute, die in WAI-ARIA definiert sind:
                </p>

                <table style="header-row">
                    <tr>
                        <td>Zustand/Attribut</td>
                        <td>Beschreibung</td>
                    </tr>
                    <tr>
                        <td><code>aria-checked</code></td>
                        <td>Definiert, ob ein Element ausgewählt ist oder nicht.</td>
                    </tr>
                    <tr>
                        <td><code>aria-disabled</code></td>
                        <td>Definiert, ob ein Element deaktiviert ist oder nicht.</td>
                    </tr>
                    <tr>
                        <td><code>aria-expanded</code></td>
                        <td>Definiert, ob ein Element erweitert ist oder nicht.</td>
                    </tr>
                    <tr>
                        <td><code>aria-hidden</code></td>
                        <td>Definiert, ob ein Element sichtbar ist oder nicht.</td>
                    </tr>
                    <tr>
                        <td><code>aria-label</code></td>
                        <td>Definiert einen Text, der einem Element zugeordnet ist.</td>
                    </tr>
                    <tr>
                        <td><code>aria-pressed</code></td>
                        <td>Definiert, ob ein Element gedrückt ist oder nicht.</td>
                    </tr>
                    <tr>
                        <td><code>aria-selected</code></td>
                        <td>Definiert, ob ein Element ausgewählt ist oder nicht.</td>
                    </tr>
                </table>

                <tip>
                    Es gibt noch viele weitere Zustände und Attribute für HTML-Elemente. Einen guten Überblick über
                    sie bietet die Webseite <a href="https://wiki.selfhtml.org/wiki/HTML/Attribute/aria-*"/>.
                </tip>
            </chapter>

            <chapter id="wai-aria-description" title="Beschreibung">
                <p>
                    Zusätzlich zur Verwendung semantischer HTML-Elemente mit ihren eingebauten Rollen kann die
                    Zugänglichkeit einer Website erheblich vereinfachen, wenn bei der Beschriftung auch zugängliche
                    Namen verwendet werden. Dies ist besonders wichtig, wenn ein Element nicht durch den Textinhalt oder
                    den sichtbaren Text beschrieben wird. Zum Beispiel:
                </p>

                <!-- @formatter:off -->
                <code-block lang="html">
                    <![CDATA[
                        <a href="https://www.rheinwerk-verlag.de/">Zum Rheinwerk Verlag</a>
                    ]]>
                </code-block>
                <!-- @formatter:on -->

                <p>
                    Mit diesem einfachen Textinhalt »Zum Rheinwerk Verlag« kann der Benutzer eines Screenreaders viel
                    mehr anfangen als mit »Hier klicken«.
                </p>

                <p>
                    Dasselbe gilt beispielsweise für Bilder, bei denen immer das <code>alt</code>-Attribut mit dem
                    alternativen Text verwendet sollte:
                </p>

                <!-- @formatter:off -->
                <code-block lang="html">
                    <![CDATA[
                        <img src="cover.png" alt="Cover vom Buch HTML und CSS">
                    ]]>
                </code-block>
                <!-- @formatter:on -->

                <p>
                    Bei allein stehenden Formularelementen wie z.B. Checkboxen oder Radiobuttons wird empfohlen,
                    diese mit dem <code>label</code>-Element zu verknüpfen. Die Verknüpfung findet über das
                    <code>for</code>-Attribut in <code>&lt;label&gt;</code> und dem <code>id</code>-Attribut in
                    <code>&lt;input&gt;</code> statt. Zusätzlich wird innerhalb vom <code>label</code>-Element ein
                    zugänglicher Name verwendet. Zum Beispiel:
                </p>

                <!-- @formatter:off -->
                <code-block lang="html">
                    <![CDATA[
                        <label for="red">Rote Farbe</label>
                        <input type="checkbox" id="red">
                    ]]>
                </code-block>
                <!-- @formatter:on -->

                <p>
                    Wurden alle Möglichkeiten eines HTML-Elements und seiner Attribute ausgeschöpft, gibt es natürlich
                    auch die Möglichkeit, mit dem <code>aria-label</code> einen zugänglichen Namen zu verwenden, z.B.
                    bei einem Button:
                </p>

                <!-- @formatter:off -->
                <code-block lang="html">
                    <![CDATA[
                        <button aria-label="Lauter">+</button>
                    ]]>
                </code-block>
                <!-- @formatter:on -->
            </chapter>
        </chapter>

        <chapter id="charset" title="Zeichencodierung">
            <p>
                Hier ein paar wichtige Punkte zur Zeichencodierung in HTML, um sicherzustellen, dass der Text korrekt
                dargestellt wird:
            </p>

            <list type="bullet">
                <li>
                    Im Kopfbereich des HTML-Dokuments sollte das <code>&lt;meta charset="UTF-8"&gt;</code>-Element
                    angegeben werden. Gibt es keinen speziellen Grund, sollte immer der Wert <code>UTF-8</code> für das
                    Attribut <code>charset</code> verwendet werden.
                </li>
                <li>
                    Auch im Code-Editor sollte die Zeichenkodierung auf <code>UTF-8</code> eingestellt sein, damit das
                    Dokument korrekt mit dem UTF-8-Encoding gespeichert wird.
                </li>
            </list>

            <note>
                <p>
                    <b>
                        UTF-8
                    </b>
                </p>

                <p>
                    Mit dem Unicode-Zeichenvorrat lassen sich alle von Menschen erstellten Schriftzeichen abbilden.
                    UTF-8 ist die 8-Bit-Codierung von Unicode, die auch mit der ASCII-Codierung abwärtskompatibel ist.
                    Dabei kann ein Zeichen zwischen ein und vier 8-Bit-Wörter enthalten. UTF-8 ist mittlerweile ein
                    einheitlicher Standard. So verwenden viele Betriebssysteme standardmäßig UTF-8, und auch in der
                    Webentwicklung mit HTML wird UTF-8 zur Darstellung sprachspezifischer Zeichen eingesetzt und ersetzt
                    dort auch die Verwendung von HTML-Entitäten
                </p>
            </note>

            <note>
                <p>
                    <b>
                        Emojis
                    </b>
                </p>

                <p>
                    Dank Unicode können auch Sonderzeichen oder Emojis verwendet werden. Diese können vom Emoji-Picker
                    des Betriebssystems oder von Webseiten wie <a href="https://emojipedia.org/">emojipedia.org</a>
                    kopiert/verwendet werden. Funktioniert das direkte Einfügen nicht, kann auch die numerische
                    Interpretation des Zeichens verwendet werden, z.B. <code>&amp;#128512;</code> für das Emoji 😀. Die
                    darstellung der Emojis ist jedoch abhängig vom Betriebssystem und Browser und das Ergebnis kann
                    hier erheblich abweichen.
                </p>

                <p>
                    Emojis sind für sehbehinderte Menschen nicht zugänglich, weshalb sich hier die WAI-ARIA-Attribute
                    <code>role</code> und <code>aria-label</code> eignen. Als <code>role</code> wird <code>img</code>
                    für eine Grafik verwendet und als <code>aria-label</code> nur das, was auf dem Emoji zu sehen ist.
                </p>

                <!-- @formatter:off -->
                <code-block lang="html">
                    <![CDATA[
                        <p>Dank Unicode ist auch die verwendung von
                            <span role="img" aria-label="Lachendes Gesicht">🙂</span> und
                            <span role="img" aria-label="Augezwinkerndes Gesicht">😉</span> möglich.
                        </p>
                    ]]>
                </code-block>
                <!-- @formatter:on -->
            </note>
        </chapter>

        <chapter id="entities" title="Zeichenentitäten">
            <!-- TODO: Buch HTML & CSS Kapitel 4 -->
        </chapter>
    </chapter>

    <chapter id="overview" title="Übersicht der HTML-Elemente">
        <chapter id="root" title="root">
            <table id="root-overview-table" style="header-row">
                <tr>
                    <td>Element</td>
                    <td>Beschreibung</td>
                </tr>
                <tr>
                    <td>
                        <a href="#tag-html">
                            <code>&lt;html&gt;</code>
                        </a>
                    </td>
                    <td>
                        Das Wurzelelement, das den gesamten Inhalt einer HTML-Seite umschließt.
                    </td>
                </tr>
            </table>
        </chapter>

        <chapter id="metadata" title="Kopfdaten">
            <include element-id="-description" from="html-kopfdaten.topic">
                <var name="id_prefix" value="kopfdaten"></var>
            </include>
            <include element-id="-overview-table" from="html-kopfdaten.topic">
                <var name="id_prefix" value="kopfdaten"></var>
            </include>
        </chapter>

        <chapter id="view" title="Body">
            <table id="view-overview-table" style="header-row">
                <tr>
                    <td>Element</td>
                    <td>Beschreibung</td>
                </tr>
                <tr>
                    <td>
                        <a href="#tag-body">
                            <code>&lt;body&gt;</code>
                        </a>
                    </td>
                    <td>
                        Der sichtbare Bereich (auch Viewport genannt) des HTML-Dokuments, der den Inhalt für den
                        Webbrowser enthält.
                    </td>
                </tr>
            </table>
        </chapter>

        <chapter id="strukturierung" title="Strukturierung">
            <include element-id="-description" from="html-strukturierung.topic">
                <var name="id_prefix" value="strukturierung"></var>
            </include>
            <include element-id="-overview-table" from="html-strukturierung.topic">
                <var name="id_prefix" value="strukturierung"></var>
            </include>
        </chapter>

        <chapter id="textstrukturierung" title="Textstrukturierung">
            <include element-id="-description" from="html-textstrukturierung.topic">
                <var name="id_prefix" value="textstrukturierung"></var>
            </include>
            <include element-id="-overview-table" from="html-textstrukturierung.topic">
                <var name="id_prefix" value="textstrukturierung"></var>
            </include>
        </chapter>

        <chapter id="textauszeichnung" title="Textauszeichnung">
            <include element-id="-description" from="html-textauszeichnung.topic">
                <var name="id_prefix" value="textauszeichnung"></var>
            </include>
            <include element-id="-overview-table" from="html-textauszeichnung.topic">
                <var name="id_prefix" value="textauszeichnung"></var>
            </include>
        </chapter>

        <chapter id="image-and-multimedia" title="Grafiken und Multimedia">
            <include element-id="-description" from="html-image-and-multimedia.topic">
                <var name="id_prefix" value="image-and-multimedia"></var>
            </include>
            <include element-id="-overview-table" from="html-image-and-multimedia.topic">
                <var name="id_prefix" value="image-and-multimedia"></var>
            </include>
        </chapter>

        <chapter id="embedded" title="Eingebettete Inhalte">
            <include element-id="-description" from="html-embedded.topic">
                <var name="id_prefix" value="embedded"></var>
            </include>
            <include element-id="-overview-table" from="html-embedded.topic">
                <var name="id_prefix" value="embedded"></var>
            </include>
        </chapter>

        <chapter id="svg-and-mathml" title="SVG und MathML">
            <include element-id="-description" from="html-svg-and-mathml.topic">
                <var name="id_prefix" value="svg-and-mathml"></var>
            </include>
            <include element-id="-overview-table" from="html-svg-and-mathml.topic">
                <var name="id_prefix" value="svg-and-mathml"></var>
            </include>
        </chapter>

        <chapter id="scripts" title="Scripts">
            <include element-id="-description" from="html-scripts.topic">
                <var name="id_prefix" value="scripts"></var>
            </include>
            <include element-id="-overview-table" from="html-scripts.topic">
                <var name="id_prefix" value="scripts"></var>
            </include>
        </chapter>

        <chapter id="table" title="Tabellen">
            <include element-id="-description" from="html-tabellen.topic">
                <var name="id_prefix" value="table"></var>
            </include>
            <include element-id="-overview-table" from="html-tabellen.topic">
                <var name="id_prefix" value="table"></var>
            </include>
        </chapter>

        <chapter id="form" title="Formulare">
            <include element-id="-description" from="html-form.topic">
                <var name="id_prefix" value="form"></var>
            </include>
            <include element-id="-overview-table" from="html-form.topic">
                <var name="id_prefix" value="form"></var>
            </include>
        </chapter>

        <chapter id="interactive-elements" title="Interaktive Elemente">
            <include element-id="-description" from="html-interactive-elements.topic">
                <var name="id_prefix" value="interactive-elements"></var>
            </include>
            <include element-id="-overview-table" from="html-interactive-elements.topic">
                <var name="id_prefix" value="interactive-elements"></var>
            </include>
        </chapter>

        <chapter id="web-components" title="Web Components">
            <table id="web-components-overview-table" style="header-row">
                <tr>
                    <td>Element</td>
                    <td>Beschreibung</td>
                </tr>
                <tr>
                    <td>
                        <code>&lt;slot&gt;</code>
                    </td>
                    <td>
                        <p>
                            Das <code>&lt;slot&gt;</code>-Element wird in HTML verwendet, um Platzhalter in einem Web
                            Component Template zu definieren. Es ermöglicht die Verwendung von "Slots" innerhalb von
                            benutzerdefinierten HTML-Elementen, sodass Inhalte von außen in diese Slots eingefügt werden
                            können. Dies bietet eine flexible Möglichkeit, Inhalte dynamisch und modular zu gestalten.
                        </p>

                        <tip>
                            Mehr dazu: <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot"/>
                        </tip>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>&lt;template&gt;</code>
                    </td>
                    <td>
                        <p>
                            Das <code>&lt;template&gt;</code>-Element in HTML dient dazu, Inhalte zu definieren, die
                            nicht sofort beim Laden der Seite gerendert werden. Es ermöglicht Entwicklern,
                            wiederverwendbare Vorlagen für dynamische Inhalte zu erstellen. Diese Vorlagen können später
                            über JavaScript geklont und in das Dokument eingefügt werden.
                        </p>

                        <tip>
                            Mehr dazu: <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template"/>
                        </tip>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>&lt;summary&gt;</code>
                    </td>
                    <td>
                        <p>
                            Das <code>&lt;summary&gt;</code>-Element wird zusammen mit dem
                            <code>&lt;details&gt;</code>-Element verwendet, um einen zusammenklappbaren Bereich in einem
                            HTML-Dokument zu erstellen. Das <code>&lt;summary&gt;</code>-Element dient als Überschrift
                            oder Beschriftung, die der Benutzer anklicken kann, um den verborgenen Inhalt im
                            <code>&lt;details&gt;</code>-Element anzuzeigen oder zu verbergen.
                        </p>

                        <tip>
                            Mehr dazu: <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary"/>
                        </tip>
                    </td>
                </tr>
            </table>
        </chapter>
    </chapter>

    <chapter id="quellen" title="Quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836297288, "HTML und CSS - Das umfassende Handbuch", Jürgen Wolf, 2023
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element"/>, 2024-10-21 19:00
        </tip>
    </chapter>
</topic>