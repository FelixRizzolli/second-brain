<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="html-form"
       title="Formulare"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">
    <var name="id_prefix"></var>
    <show-structure depth="2" for="chapter,procedure"/>
    <link-summary rel="%id_prefix%-description"/>

    <chapter id="introduction" title="Einleitung">
        <p id="%id_prefix%-description">
            Gängige Anwendungen von HTML-Formulare sind z.B. Kontaktformulare, Umfragen, die Anmeldung auf einer
            Website oder für einen Newsletter, Bestellformulare, Suchfunktionen, Hinzufügen und Hochladen von Daten und
            vieles mehr. Für solche Interaktionen bietet HTML verschiedene Eingabefelder wie Texteingabefelder,
            Dropdown-Listen, Radioschaltflächen und einfache Schaltflächen an.
        </p>
    </chapter>

    <chapter id="overview" title="Übersicht der HTML-Elemente">
        <table id="%id_prefix%-overview-table" style="header-row">
            <tr>
                <td>Element</td>
                <td>Beschreibung</td>
            </tr>
            <tr>
                <td>
                    <a href="html-form.topic#tag-form">
                        <code>&lt;form&gt;</code>
                    </a>
                </td>
                <td>
                    Einen Bereich für Formulare definieren.
                </td>
            </tr>
            <tr>
                <td>
                    <a href="html-form.topic#tag-fieldset-legend">
                        <code>&lt;fieldset&gt;</code>
                    </a>
                </td>
                <td>
                    Formularelemente gruppieren
                </td>
            </tr>
            <tr>
                <td>
                    <a href="html-form.topic#tag-fieldset-legend">
                        <code>&lt;legend&gt;</code>
                    </a>
                </td>
                <td>
                    Eine überschrift für ein <code>fieldset</code>-Element definieren.
                </td>
            </tr>
            <tr>
                <td>
                    <a href="html-form.topic#tag-input">
                        <code>&lt;input&gt;</code>
                    </a>
                </td>
                <td>
                    Dieses Element wird zur Abfrage von Daten vom Benutzer verwendet. Hierfür stehen viele
                    verschiedene Typen zur Verfügung.
                </td>
            </tr>
            <tr>
                <td>
                    <a href="html-form.topic#tag-textarea">
                        <code>&lt;textarea&gt;</code>
                    </a>
                </td>
                <td>
                    Das Element definiert einen Bereich für die Eingabe von mehrzeiligem Text.
                </td>
            </tr>
            <tr>
                <td>
                    <a href="html-form.topic#tag-label">
                        <code>&lt;label&gt;</code>
                    </a>
                </td>
                <td>
                    Ein Textlabel zu Formularelementen wie Eingabefeldern, Radioschaltflächen und Checkboxen hinzufügen
                    und verknüpfen.
                </td>
            </tr>
            <tr>
                <td>
                    <a href="html-form.topic#tag-datalist">
                        <code>&lt;datalist&gt;</code>
                    </a>
                </td>
                <td>
                    Eine Liste mit <code>option</code>-Werten, die als Vorschlagliste verwendet werden kann.
                </td>
            </tr>
            <tr>
                <td>
                    <a href="html-form.topic#tag-select">
                        <code>&lt;select&gt;</code>
                    </a>
                </td>
                <td>
                    Eine Auswahlliste. Ein Eintrag der Auswahlliste wird mit dem <code>option</code>-Element definiert.
                </td>
            </tr>
            <tr>
                <td>
                    <a href="html-form.topic#tag-optgroup">
                        <code>&lt;optgroup&gt;</code>
                    </a>
                </td>
                <td>
                    Damit können <code>option</code>-Elemente einer Auswahlliste gruppiert werden.
                </td>
            </tr>
            <tr>
                <td>
                    <a href="html-form.topic#tag-option">
                        <code>&lt;option&gt;</code>
                    </a>
                </td>
                <td>
                    Das Element definiert einen Eintrag einer Auswahl- bzw. Dropdown-Liste.
                </td>
            </tr>
            <tr>
                <td>
                    <a href="html-form.topic#tag-output">
                        <code>&lt;output&gt;</code>
                    </a>
                </td>
                <td>
                    Damit wird ein Bereich zur Ausgabe von Werten definiert. Prakisch das Gegenstück zum
                    <code>input</code>-Element.
                </td>
            </tr>
            <tr>
                <td>
                    <a href="html-form.topic#tag-progress">
                        <code>&lt;progress&gt;</code>
                    </a>
                </td>
                <td>
                    Damit wird ein Bereich zur visuellen Darstellung eines Fortschritts definiert.
                </td>
            </tr>
            <tr>
                <td>
                    <a href="html-form.topic#tag-meter">
                        <code>&lt;meter&gt;</code>
                    </a>
                </td>
                <td>
                    Damit visualisiert man die Größe eines Wertes innerhalb eines bekannten Bereichs.
                </td>
            </tr>
            <tr>
                <td>
                    <a href="html-form.topic#tag-button">
                        <code>&lt;button&gt;</code>
                    </a>
                </td>
                <td>
                    Eine anklickbare Schaltfläche zum Auslösen von Aktionen.
                </td>
            </tr>
        </table>
    </chapter>

    <chapter id="tag-description" title="Genauere Beschreibung">
        <chapter id="tag-form" title="Das form-Element">
            <p>
                Das <code>form</code>-Element wird verwendet, um einen Bereich für Formulare zu definieren.
            </p>

            <!-- @formatter:off -->
            <code-block lang="html">
                <![CDATA[
                    <form  action="/php/feedback.php" method="post">
                        <!--Formularelemente für das Feedback-->
                    </form>
                ]]>
            </code-block>
            <!-- @formatter:on -->

            <deflist>
                <def title="action">
                    <p>
                        Hiermit wird die URL angegeben, die beim Absenden des Formulars aufgerufen wird und an die, die
                        eingegebenen Daten übertragen werden sollen.
                    </p>

                    <note>
                        Dieses Attribut muss nicht unbedingt im <code>form</code>-Element enthalten sein. Es kann auch
                        in einem <code>button</code>- oder <code>input</code>-Element enthalten sein. Wenn es fehlt,
                        wird die aktuelle Seite aufgerufen.
                    </note>
                </def>
                <def title="method">
                    <p>
                        Hiermit wird die HTTP-Request-Methode angegeben, die definiert, wie die Daten übertragen werden.
                        Die Standardeinstellung lautet <code>method="get"</code>, womit der Webbrowser die Daten als
                        Parameter an das Ende der URL hängt.
                    </p>

                    <list>
                        <li>
                            <code>GET</code> (Standard) - die Daten werden als Parameter an das Ende der URL gehängt.
                            Nicht geeignet für sensible und/oder umfangreiche Daten.
                        </li>
                        <li>
                            <code>POST</code> - die Daten werden im Body der Anfrage übertragen.
                        </li>
                        <li>
                            <code>DIALOG</code> - das Dialogfenster schließt sich nach dem Absenden des Formulars und
                            die Daten werden als <code>returnValue</code> des Dialogs zurückgegeben.
                        </li>
                    </list>

                    <note>
                        Die Methode muss nicht unbedingt im <code>form</code>-Element enthalten sein. Sie kann auch in
                        einem <code>button</code>- oder <code>input</code>-Element enthalten sein.
                    </note>
                </def>
                <def title="enctype">
                    <list type="bullet">
                        <li>
                            <code>application/x-www-form-urlencoded</code>: (Standardwert) Hiermit werden die Zeichen,
                            die eine besondere Bedeutung haben, in Prozentzeichen und zwei Hexadezimalzahlen maskiert
                            (Prozentcodierung oder auch URL-Codierung).
                        </li>
                        <li>
                            <code>multipart/form-data</code>: sollte verwendet werden, wenn Dateien hochgeladen werden.
                        </li>
                        <li>
                            <code>text/plain</code>: ist nützlich, wenn die Daten in einem einfachen Textformat
                            übertragen werden sollen. Sollte somit nur fürs Debugging verwendet werden.
                        </li>
                    </list>
                </def>
                <def title="accept-charset">
                    <p>
                        Hiermit wird die Zeichencodierung angegeben, die für das Absenden des Formulars verwendet werden
                        soll. Mit dem Wert <code>UTF-8</code> wird die Zeichencodierung auf UTF-8 erzwungen.
                    </p>
                </def>
                <def title="target">
                    <p>
                        Hiermit kann das Zielfenster angegeben werden. Es können die bekannten Werte
                        <code>_blank</code>, <code>_self</code>, <code>_parent</code> und <code>_top</code> verwendet
                        werden oder der name eines Fensters, welches mit JavaScript erzeugt wurde.
                    </p>
                </def>
            </deflist>

            <tip>
                Mehr zum <code>form</code>-Element hier:
                <a href="https://developer.mozilla.org/de/docs/Web/HTML/Element/form">MDN Web Docs</a>
            </tip>
        </chapter>

        <chapter id="tag-fieldset-legend" title="Das fieldset- und legend-Element">
            <p>
                Mit dem <code>fieldset</code>-Element können Formularelemente gruppiert werden. Das
                <code>legend</code>-Element wird verwendet, um eine Überschrift für das <code>fieldset</code>-Element
                zu definieren. Viele Webbrowser rahmen diesen Bereich z.B. mit einer Linie ein, um diese Gruppe optisch
                zu verdeutlichen.
            </p>

            <!-- @formatter:off -->
            <code-block lang="html">
                <![CDATA[
                    <form>
                        <fieldset>
                            <legend>
                                <h2> Geben Sie die nötigen Daten hier ein </h2>
                            </legend>
                            <label for="name">Name</label>
                            <input type="text" id="name" placeholder="Name"><br>
                            <label for="mail">E-Mail</label>
                            <input type="email" id="mail" placeholder="E-Mail"><br>
                            <label for="datum">Geburtsdatum</label>
                            <input type="date" id="datum"><br><br>
                            <button type="submit">Absenden</button>
                            <button type="reset">Zurücksetzen</button>
                        </fieldset>
                    </form>
                ]]>
            </code-block>
            <!-- @formatter:on -->

            <tip>
                Mehr zum <code>fieldset</code>-Element hier:
                <a href="https://developer.mozilla.org/de/docs/Web/HTML/Element/fieldset">MDN Web Docs</a>
            </tip>

            <tip>
                Mehr zum <code>legend</code>-Element hier:
                <a href="https://developer.mozilla.org/de/docs/Web/HTML/Element/legend">MDN Web Docs</a>
            </tip>
        </chapter>

        <chapter id="tag-input" title="Das input-Element">
            <p>
                Das <code>input</code>-Element wird verwendet, um Daten vom Benutzer abzufragen. Es gibt viele
                verschiedene Typen, die mit dem <code>type</code>-Attribut definiert werden. Hier sind einige Beispiele:
            </p>

            <list type="bullet">
                <li>
                    <p>
                        <code>type="text"</code>
                    </p>

                    <p>
                        Ein einfaches Texteingabefeld.
                    </p>

                    <!-- @formatter:off -->
                    <code-block collapsed-title="Beispiel" collapsible="true" lang="html">
                        <![CDATA[
                            <input type="text" name="einName" size="30" maxlength="40">
                        ]]>
                    </code-block>
                    <!-- @formatter:on -->
                </li>
                <li>
                    <p>
                        <code>type="password"</code>
                    </p>

                    <p>
                        Ein Passwortfeld, bei dem die Eingabe durch Sternchen oder Punkte verdeckt wird. Hierbei muss
                        einem klar sein, dass der Wert nicht verschlüsselt wird, sondern dies lediglich zum Schutz vor
                        Mitlesern des Bildschirms dienen soll. Das eingegebene Passwort selbst wird via
                        HTTP-Protokoll ohne Verschlüsselung im Klartext über das Internet übertragen. Für eine
                        verschlüsselte Kommunikation zwischen Webbrowser und Webserver muss das HTTPS-Protokoll
                        verwendet werden.
                    </p>

                    <!-- @formatter:off -->
                    <code-block collapsed-title="Beispiel" collapsible="true" lang="html">
                        <![CDATA[
                            <input name="pw" type="password" size="10" maxlength="10">
                        ]]>
                    </code-block>
                    <!-- @formatter:on -->
                </li>
                <li>
                    <p>
                        <code>type="radio"</code>
                    </p>

                    <p>
                        Hiermit wird eine Radioschaltfläche erstellt, bei der nur eine Option ausgewählt werden kann.
                        Alle Radioschaltflächen, die zu einer Gruppe gehören, müssen denselben wert im
                        <code>name</code>-Feld haben. Der Wert des <code>value</code>-Attributs bestimmt den Wert, der
                        an den Server gesendet wird, wenn die Schaltfläche ausgewählt ist. Mit dem
                        <code>checked</code>-Attribut kann eine Schaltfläche standardmäßig ausgewählt werden.
                    </p>

                    <!-- @formatter:off -->
                    <code-block collapsed-title="Beispiel" collapsible="true" lang="html">
                        <![CDATA[
                            <p>
                                Bitte Zimmer auswählen:
                            </p>
                            <p>
                                <input type="radio" name="zimmer" value="budget">Günstig<br>
                                <input type="radio" name="zimmer" value="standard" checked>Standardzimmer<br>
                                <input type="radio" name="zimmer" value="luxus">Luxuszimmer
                            </p>
                        ]]>
                    </code-block>
                    <!-- @formatter:on -->
                </li>
                <li>
                    <p>
                        <code>type="checkbox"</code>
                    </p>

                    <p>
                        Hiermit wird eine Checkbox erstellt, die ausgewählt oder nicht ausgewählt werden kann. Der Wert
                        des <code>value</code>-Attributs bestimmt den Wert, der an den Server gesendet wird, wenn die
                        Checkbox ausgewählt ist. Mit dem <code>checked</code>-Attribut kann eine Checkbox standardmäßig
                        ausgewählt werden.
                    </p>

                    <!-- @formatter:off -->
                    <code-block collapsed-title="Beispiel" collapsible="true" lang="html">
                        <![CDATA[
                            <p>
                                Bitte Verpflegung auswählen:
                            </p>
                            <p>
                                <input type="checkbox" name="essen" id="brunch" value="brunch">
                                <label for="brunch">Umfassendes Frühstück</label><br>
                                <input type="checkbox" name="essen" id="mittagessen" value="mittagessen">
                                <label for="mittagessen">Reichhaltiges Mittagessen</label><br>
                                <input type="checkbox" name="essen" id="abendessen" value="abendessen">
                                <label for="abendessen">Üppiges Abendessen</label>
                            </p>
                        ]]>
                    </code-block>
                    <!-- @formatter:on -->
                </li>
                <li>
                    <p>
                        <code>type="reset"</code>
                    </p>

                    <p>
                        Erzeugt eine Schaltfläche bzw. einen Button, welcher alle Formularelemente auf ihre
                        Standardwerte zurücksetzt. Alternativ kann auch ein
                        <a href="html-form.topic#tag-button"><code>button</code>-Element</a> verwendet werden.
                    </p>

                    <!-- @formatter:off -->
                    <code-block collapsed-title="Beispiel" collapsible="true" lang="html">
                        <![CDATA[
                            <input type="reset" value="Abbrechen">
                        ]]>
                    </code-block>
                    <!-- @formatter:on -->
                </li>
                <li>
                    <p>
                        <code>type="submit"</code>
                    </p>

                    <p>
                        Erzeugt eine Schaltfläche bzw. einen Button, welcher das Formular absendet. Alternativ kann
                        auch ein <a href="html-form.topic#tag-button"><code>button</code>-Element</a> verwendet werden.
                    </p>

                    <!-- @formatter:off -->
                    <code-block collapsed-title="Beispiel" collapsible="true" lang="html">
                        <![CDATA[
                            <input type="submit" value="Absenden">
                        ]]>
                    </code-block>
                    <!-- @formatter:on -->
                </li>
                <li>
                    <p>
                        <code>type="button"</code>
                    </p>

                    <p>
                        Erzeugt eine Schaltfläche bzw. einen Button. Alternativ kann auch ein
                        <a href="html-form.topic#tag-button"><code>button</code>-Element</a> verwendet werden.
                    </p>

                    <!-- @formatter:off -->
                    <code-block collapsed-title="Beispiel" collapsible="true" lang="html">
                        <![CDATA[
                            <input type="button" value="Anklickbarer Button">
                        ]]>
                    </code-block>
                    <!-- @formatter:on -->
                </li>
                <li>
                    <p>
                        <code>type="hidden"</code>
                    </p>

                    <p>
                        Ein verstecktes Eingabefeld, das nicht sichtbar ist, aber dennoch Daten an den Server sendet.
                        Dies ist nützlich, um Werte bzw. Daten, die mit einem JavaScript-Skript berechnet oder
                        hinzugefügt wurden, beim Absenden mitzuschicken. Im <code>value</code>-Attribut wird der Wert
                        des Feldes festgelegt.
                    </p>

                    <!-- @formatter:off -->
                    <code-block collapsed-title="Beispiel" collapsible="true" lang="html">
                        <![CDATA[
                            <input type="hidden" name="mwst" value="7">
                        ]]>
                    </code-block>
                    <!-- @formatter:on -->
                </li>
                <li>
                    <p>
                        <code>type="email"</code>
                    </p>

                    <p>
                        Ein Eingabefeld für E-Mail-Adressen. Der Browser überprüft, ob die Eingabe ein gültiges Format
                        für eine E-Mail-Adresse hat. Mit den CSS-Pseudoklassen <code>:valid</code> und
                        <code>:invalid</code> kann das Eingabefeld entsprechend gestylt werden. Mit dem HTML-Attribut
                        <code>required</code> kann festgelegt werden, dass das Feld ausgefüllt werden muss. Mit dem
                        HTML-Attribut <code>multiple</code> kann festgelegt werden, dass mehrere E-Mail-Adressen in das
                        Feld eingegeben werden können. Einzelne E-Mail-Adressen müssen durch ein Komma getrennt werden.
                    </p>

                    <!-- @formatter:off -->
                    <code-block collapsed-title="Beispiel" collapsible="true" lang="html">
                        <![CDATA[
                            <style>
                                input:invalid { background: red; }
                                input:valid { background: ivory; }
                            </style>
                            <!-- ... -->
                            <input type="email" name="email" required>
                        ]]>
                    </code-block>
                    <!-- @formatter:on -->
                </li>
                <li>
                    <p>
                        <code>type="tel"</code>
                    </p>

                    <p>
                        Ein Eingabefeld für Telefonnummern. Allerdings wird hier weder ein besonderes Format empfohlen,
                        noch findet eine Validierung statt. Es wird lediglich das Tastaturlayout auf Zahlen umgestellt.
                        Wird eine Validierung benötigt, sollte dies mit einem regulären Ausdruck im <code>pattern</code>
                        Attribut gemacht werden.
                    </p>

                    <!-- @formatter:off -->
                    <code-block collapsed-title="Beispiel" collapsible="true" lang="html">
                        <![CDATA[
                            <input type="tel" name="telefon" pattern="[0-9]{3}-[0-9]{3}-[0-9]{4}">
                        ]]>
                    </code-block>
                    <!-- @formatter:on -->
                </li>
                <li>
                    <p>
                        <code>type="number"</code>
                    </p>

                    <p>
                        Ein Eingabefeld für Zahlen. Der Browser überprüft, ob die Eingabe eine Zahl ist oder nicht.
                        Viele Webbrowser zeigen dieses Feld mit einem Drehfeld (Spinbox) an. Mit den Attributen
                        <code>min</code> und <code>max</code> kann ein Wertebereich festgelegt werden. Mit dem Attribut
                        <code>step</code> kann festgelegt werden, in welchen Schritten die Zahl erhöht oder verringert
                        werden kann.
                    </p>

                    <!-- @formatter:off -->
                    <code-block collapsed-title="Beispiel" collapsible="true" lang="html">
                        <![CDATA[
                            <input type="number" name="anzahl" min="1" max="10" step="1">
                        ]]>
                    </code-block>
                    <!-- @formatter:on -->
                </li>
                <li>
                    <p>
                        <code>type="url"</code>
                    </p>

                    <p>
                        Ein Eingabefeld für URLs. Der Browser überprüft, ob die Eingabe ein gültiges Format für eine URL
                        hat. Manche Browser listen hie die zuletzt besuchten URLs auf.
                    </p>

                    <!-- @formatter:off -->
                    <code-block collapsed-title="Beispiel" collapsible="true" lang="html">
                        <![CDATA[
                            <input type="url" name="website">
                        ]]>
                    </code-block>
                    <!-- @formatter:on -->
                </li>
                <li>
                    <p>
                        <code>type="file"</code>
                    </p>

                    <p>
                        Ein Eingabefeld für Dateien. Der Browser erzeugt in der Regel eine Schaltfläche, die beim
                        Anklicken den lokalen Dateiauswahl-Dialog öffnet. Mit dem <code>accept</code>-Attribut kann
                        festgelegt werden, welche Dateitypen akzeptiert werden sollen. Mit dem
                        <code>multiple</code>-Attribut kann festgelegt werden, dass mehrere Dateien hochgeladen werden
                        können.
                    </p>

                    <warning>
                        Möchte man nicht nur den Dateinamen der hochgeladenen Datei, sondern auch den Inhalt der Datei
                        übertragen, muss das Formular mit dem <code>enctype="multipart/form-data"</code>-Attribut
                        versehen werden.
                    </warning>

                    <!-- @formatter:off -->
                    <code-block collapsed-title="Beispiel" collapsible="true" lang="html">
                        <![CDATA[
                            <form method="post" enctype="multipart/form-data">
                                <p>
                                    Datei auswählen:
                                    <input type="file" name="bild" accept="image/*">
                                </p>
                            </form>
                        ]]>
                    </code-block>
                    <!-- @formatter:on -->
                </li>
                <li>
                    <p>
                        <code>type="date"</code>
                    </p>

                    <p>
                        Mit diesem Element ist es Anwendern möglich, ein Datum auszuwählen. Der Browser zeigt hierfür
                        einen Kalender an. Mit dem <code>min</code>- und <code>max</code>-Attribut kann ein Zeitraum
                        festgelegt werden, in dem das Datum liegen muss. Mit dem <code>value</code>-Attribut kann ein
                        Standardwert festgelegt werden. Die Eingabe wird im Format <code>YYYY-MM-DD</code> gespeichert.
                    </p>

                    <!-- @formatter:off -->
                    <code-block collapsed-title="Beispiel" collapsible="true" lang="html">
                        <![CDATA[
                            <input type="date"
                                   value="2023-11-12"
                                   min="2023-01-01"
                                   max="2024-12-30">
                        ]]>
                    </code-block>
                    <!-- @formatter:on -->
                </li>
                <li>
                    <p>
                        <code>type="time"</code>
                    </p>

                    <p>
                        Mit diesem Element ist es Anwendern möglich, eine Uhrzeit auszuwählen. Der Browser zeigt hierfür
                        eine Uhrzeit an. Mit dem <code>min</code>- und <code>max</code>-Attribut kann ein Zeitraum
                        festgelegt werden, in dem die Uhrzeit liegen muss. Mit dem <code>value</code>-Attribut kann ein
                        Standardwert festgelegt werden. Die Eingabe wird im Format <code>HH:MM</code> gespeichert.
                    </p>

                    <!-- @formatter:off -->
                    <code-block collapsed-title="Beispiel" collapsible="true" lang="html">
                        <![CDATA[
                            <input type="time"
                                   value="12:00"
                                   min="09:00"
                                   max="18:00">
                        ]]>
                    </code-block>
                    <!-- @formatter:on -->
                </li>
                <li>
                    <p>
                        <code>type="datetime"</code>
                    </p>

                    <p>
                        Mit diesem Element ist es Anwendern möglich, ein Datum und eine Uhrzeit auszuwählen. Der Browser
                        zeigt hierfür einen Kalender und eine Uhrzeit an. Mit dem <code>min</code>- und
                        <code>max</code>-Attribut kann ein Zeitraum festgelegt werden, in dem das Datum und die Uhrzeit
                        liegen muss. Mit dem <code>value</code>-Attribut kann ein Standardwert festgelegt werden. Die
                        Eingabe wird im Format <code>YYYY-MM-DDTHH:MM+HHMM</code> gespeichert. Im gegensatz zum
                        <code>datetime-local</code>-Typ wird hier noch die Zeitzone mitgespeichert.
                    </p>

                    <!-- @formatter:off -->
                    <code-block collapsed-title="Beispiel" collapsible="true" lang="html">
                        <![CDATA[
                            <input type="datetime-local" value="2023-11-12T15:15+0100">
                        ]]>
                    </code-block>
                    <!-- @formatter:on -->
                </li>
                <li>
                    <p>
                        <code>type="datetime-local"</code>
                    </p>

                    <p>
                        Mit diesem Element ist es Anwendern möglich, ein Datum und eine Uhrzeit auszuwählen. Der Browser
                        zeigt hierfür einen Kalender und eine Uhrzeit an. Mit dem <code>min</code>- und
                        <code>max</code>-Attribut kann ein Zeitraum festgelegt werden, in dem das Datum und die Uhrzeit
                        liegen muss. Mit dem <code>value</code>-Attribut kann ein Standardwert festgelegt werden. Die
                        Eingabe wird im Format <code>YYYY-MM-DDTHH:MM</code> gespeichert.
                    </p>

                    <!-- @formatter:off -->
                    <code-block collapsed-title="Beispiel" collapsible="true" lang="html">
                        <![CDATA[
                            <input type="datetime-local" value="2023-11-12T15:15">
                        ]]>
                    </code-block>
                    <!-- @formatter:on -->
                </li>
                <li>
                    <p>
                        <code>type="month"</code>
                    </p>

                    <p>
                        Mit diesem Element ist es Anwendern möglich, ein Monat und ein Jahr auszuwählen. Der Browser
                        zeigt hierfür einen Kalender an. Mit dem <code>min</code>- und <code>max</code>-Attribut kann
                        ein Zeitraum festgelegt werden, in dem das Datum liegen muss. Mit dem
                        <code>value</code>-Attribut kann ein Standardwert festgelegt werden. Die Eingabe wird im Format
                        <code>YYYY-MM</code> gespeichert.
                    </p>

                    <!-- @formatter:off -->
                    <code-block collapsed-title="Beispiel" collapsible="true" lang="html">
                        <![CDATA[
                            <input type="month" value="2023-01">
                        ]]>
                    </code-block>
                    <!-- @formatter:on -->
                </li>
                <li>
                    <p>
                        <code>type="week"</code>
                    </p>

                    <p>
                        Mit diesem Element ist es Anwendern möglich, eine Woche und ein Jahr auszuwählen. Der Browser
                        zeigt hierfür einen Kalender an. Mit dem <code>min</code>- und <code>max</code>-Attribut kann
                        ein Zeitraum festgelegt werden, in dem das Datum liegen muss. Mit dem <code>value</code>-Attribut
                        kann ein Standardwert festgelegt werden. Die Eingabe wird im Format <code>YYYY-WW</code>
                        gespeichert. Ein Jahr hat maximal 52 oder 53 Kalenderwochen, und eine Woche beginnt am Montag.
                    </p>

                    <!-- @formatter:off -->
                    <code-block collapsed-title="Beispiel" collapsible="true" lang="html">
                        <![CDATA[
                            <input type="week" value="2023-52">
                        ]]>
                    </code-block>
                    <!-- @formatter:on -->
                </li>
                <li>
                    <p>
                        <code>type="range"</code>
                    </p>

                    <p>
                        Mit diesem Element ist es Anwendern möglich, einen Wert innerhalb eines festgelegten Bereichs
                        auszuwählen. Der Browser zeigt hierfür einen Schieberegler an. Mit dem <code>min</code>- und
                        <code>max</code>-Attribut kann ein Wertebereich festgelegt werden. Mit dem <code>value</code>-
                        Attribut kann ein Standardwert festgelegt werden. Mit dem <code>step</code>-Attribut kann
                        festgelegt werden, in welchen Schritten der Wert erhöht oder verringert werden kann.
                    </p>

                    <!-- @formatter:off -->
                    <code-block collapsed-title="Beispiel" collapsible="true" lang="html">
                        <![CDATA[
                            <input type="range" name="volume" min="0" max="100" step="1">
                        ]]>
                    </code-block>
                    <!-- @formatter:on -->
                </li>
                <li>
                    <p>
                        <code>type="search"</code>
                    </p>

                    <p>
                        Ein Eingabefeld für einen Suchbegriff. Optisch werden solche Felder für gewöhnlich wie
                        <code>type="text"</code> gerendert. Erst, wenn der Benutzer anfängt, etwas in das Textfeld
                        einzugeben, erscheint ein kleines X-Symbol, mit dem der Inhalt des Feldes gelöscht werden kann.
                        Allerdings hängt die genaue Darstellung von der Implementierung des Browsers ab.
                    </p>

                    <!-- @formatter:off -->
                    <code-block collapsed-title="Beispiel" collapsible="true" lang="html">
                        <![CDATA[
                             <input type="search">
                        ]]>
                    </code-block>
                    <!-- @formatter:on -->
                </li>
                <li>
                    <p>
                        <code>type="color"</code>
                    </p>

                    <p>
                        Mit diesem Element kann der Anwender über einen Farbauswahl-Dialog einen Farbwert eingeben bzw.
                        auswählen. Möchte man die Farbe mit einem Wert vorbelegen, kann dies mit dem
                        <code>value</code>-Attribut gemacht werden. Die Farbe wird als Hexadezimalwert gespeichert.
                    </p>

                    <!-- @formatter:off -->
                    <code-block collapsed-title="Beispiel" collapsible="true" lang="html">
                        <![CDATA[
                            <input type="color" value="#FF0000">
                        ]]>
                    </code-block>
                    <!-- @formatter:on -->
                </li>
            </list>

            <deflist>
                <def title="name">
                    <p>
                        Für jedes Eingabefeld sollte das HTML-Attribut <code>name</code> für den Bezeichner des Feldes
                        verwendet werden. Dieser Bezeichner wird zusammen mit dem eingegebenen Wert an den Server
                        gesendet und mit diesem Bezeichner kann der Server den Wert identifizieren.
                    </p>
                </def>
                <def title="value">
                    <p>
                        Hierbei handelt es sich um den Wert, der standardmäßig im Eingabefeld angezeigt werden soll.
                    </p>
                </def>
                <def title="size">
                    <p>
                        Hiermit wird die Breite des Eingabefeldes in Zeichen festgelegt.
                    </p>
                </def>
                <def title="minlength &amp; maxlength">
                    <p>
                        Hiermit wird kann die minimale und maximale Anzahl von Zeichen festgelegt werden, die in das
                        Eingabefeld eingegeben werden dürfen.
                    </p>
                </def>
                <def title="autofocus">
                    <p>
                        Hiermit wird festgelegt, dass das Eingabefeld automatisch den Fokus erhält, wenn die Seite
                        geladen wird.
                    </p>
                </def>
                <def title="autocomplete">
                    <p>
                        Fast alle aktuellen Webbrowser verwenden eine Form der Autovervollständigung, um Benutzern zu
                        helfen, Formulare schneller auszufüllen. Mit dem <code>autocomplete</code>-Attribut kann diese
                        Funktion für ein bestimmtes Eingabefeld aktiviert oder deaktiviert werden. Mögliche Werte sind:
                        <code>autocomplete="on"</code> oder <code>autocomplete="off"</code>.
                    </p>
                </def>
                <def title="list">
                    <p>
                        Mit dem <code>list</code>-Attribut kann eine <code>datalist</code>-Element-ID angegeben werden,
                        die eine Liste von Vorschlägen für das Eingabefeld enthält.
                    </p>
                </def>
                <def title="min &amp; max">
                    <p>
                        Hiermit wird der minimale und maximale Wert festgelegt, den das Eingabefeld annehmen kann.
                    </p>
                </def>
                <def title="step">
                    <p>
                        Hiermit wird festgelegt, in welchen Schritten der Wert des Eingabefeldes erhöht oder verringert
                        werden kann.
                    </p>
                </def>
                <def title="multiple">
                    <p>
                        Mit diesem Attribut kann festgelegt werden, dass bei einem <code>file</code>-Eingabefeld mehrere
                        Dateien hochgeladen werden können, bei einem <code>email</code>-Eingabefeld mehrere
                        E-Mail-Adressen eingegeben werden können oder bei einem <code>select</code>-Element mehrere
                        Optionen ausgewählt werden können.
                    </p>
                </def>
                <def title="pattern">
                    <p>
                        Hiermit wird ein regulärer Ausdruck festgelegt, der bestimmt, welche Eingaben gültig sind.
                        Eingabetypen wie <code>email</code>, <code>url</code> oder <code>number</code> haben bereits
                        so etwas wie einen regulären Ausdruck eingebaut, der die Eingabe überprüft.
                    </p>
                </def>
                <def title="placeholder">
                    <p>
                        Hiermit wird ein Platzhaltertext festgelegt, der im Eingabefeld angezeigt wird, wenn es leer
                        ist. Der Platzhaltertext verschwindet, sobald der Benutzer in das Eingabefeld klickt.
                    </p>
                </def>
                <def title="required">
                    <p>
                        Hiermit wird festgelegt, dass das Eingabefeld ausgefüllt werden muss, bevor das Formular
                        abgesendet werden kann.
                    </p>
                </def>
            </deflist>

            <tip>
                Mehr zum <code>input</code>-Element hier:
                <a href="https://developer.mozilla.org/de/docs/Web/HTML/Element/input">MDN Web Docs</a>
            </tip>
        </chapter>

        <chapter id="tag-textarea" title="Das textarea-Element">
            <p>
                Das <code>textarea</code>-Element wird verwendet, um einen Bereich für die Eingabe von mehrzeiligem Text
                zu definieren.
            </p>

            <!-- @formatter:off -->
            <code-block lang="html">
                <![CDATA[
                    <textarea name="einText" rows="4" cols="50" maxlength="2500">
                        Hier steht der Text.
                    </textarea>
                ]]>
            </code-block>
            <!-- @formatter:on -->

            <deflist>
                <def title="name">
                    Der Bezeichner des Feldes. Dieser Bezeichner wird zusammen mit dem eingegebenen Wert an den Server
                    gesendet und mit diesem Bezeichner kann der Server den Wert identifizieren.
                </def>
                <def title="rows">
                    Die Anzahl der sichtbaren Zeilen des Textbereichs.
                </def>
                <def title="cols">
                    Die Anzahl der sichtbaren Spalten des Textbereichs.
                </def>
                <def title="minlength &amp; maxlength">
                    <p>
                        Hiermit wird kann die minimale und maximale Anzahl von Zeichen festgelegt werden, die in das
                        Eingabefeld eingegeben werden dürfen.
                    </p>
                </def>
                <def title="wrap">
                    <p>
                        Hiermit wird festgelegt, wie der Text umgebrochen wird. Mögliche Werte sind:
                    </p>

                    <list type="bullet">
                        <li>
                            <code>hard</code>: Der Text wird umgebrochen, wenn der Benutzer die Enter-Taste drückt.
                        </li>
                        <li>
                            <code>soft</code>: Der Text wird umgebrochen, wenn er die Breite des Textbereichs
                            überschreitet.
                        </li>
                        <li>
                            <code>off</code>: Der Text wird nicht umgebrochen.
                        </li>
                    </list>
                </def>
            </deflist>

            <tip>
                Mehr zum <code>textarea</code>-Element hier:
                <a href="https://developer.mozilla.org/de/docs/Web/HTML/Element/textarea">MDN Web Docs</a>
            </tip>
        </chapter>

        <chapter id="tag-label" title="Das label-Element">
            <p>
                Mit dem <code>label</code>-Element kann ein Textlabel zu Formularelementen wie Eingabefeldern,
                Radioschaltflächen und Checkboxen hinzugefügt und verknüpft werden. Das <code>for</code>-Attribut des
                <code>label</code>-Elements verweist auf das <code>id</code>-Attribut des Formularelements, das
                verknüpft werden soll.
            </p>

            <!-- @formatter:off -->
            <code-block lang="html">
                <![CDATA[
                    <p>
                        <input type="radio" name="zimmer" id="budget" value="budget">
                        <label for="budget">Einfaches Zimmer</label><br>
                        <input type="radio" name="zimmer" id="standard" value="standard">
                        <label for="standard">Standardzimmer</label><br>
                        <input type="radio" name="room" id="luxus" value="luxus">
                        <label for="luxus">Luxuszimmer</label>
                    </p>
                ]]>
            </code-block>
            <!-- @formatter:on -->

            <note>
                Es ist wichtig, dass Labels für Formularelemente verwendet werden, da sie die Benutzerfreundlichkeit
                erhöhen. Wenn ein Benutzer auf das Label klickt, wird das zugehörige Formularelement ausgewählt.
                Zudem ist es für Screenreader wichtig, dass die Labels korrekt verknüpft sind.
            </note>

            <tip>
                Mehr zum <code>label</code>-Element hier:
                <a href="https://developer.mozilla.org/de/docs/Web/HTML/Element/label">MDN Web Docs</a>
            </tip>
        </chapter>

        <chapter id="tag-datalist" title="Das datalist-Element">
            <p>
                Das <code>datalist</code>-Element wird verwendet, um eine Liste von Vorschlägen für ein Eingabefeld
                bereitzustellen. Die Vorschläge werden mit dem <code>option</code>-Element definiert.
                Abhängig vom Webbrowser finden Sie entweder ein kleines Dropdown-Menü auf der rechten Seite des
                Eingabefeldes, wenn das Feld, in dem die Vorschläge aufgelistet werden, den Fokus erhält. Oder es könnte
                während der Eingabe ein zur Liste passendes Muster darunter vorgeschlagen werden, wenn
                <code>autocomplete</code> nicht deaktiviert wurde.
            </p>

            <!-- @formatter:off -->
            <code-block lang="html">
                <![CDATA[
                    <label for="anrede">Anrede:</label>
                    <input list="anrede" name="anrede"><br>

                    <datalist id="anrede">
                        <option>Herr</option>
                        <option>Frau</option>
                        <option>Divers</option>
                    </datalist>
                ]]>
            </code-block>
            <!-- @formatter:on -->

            <tip>
                Mehr zum <code>datalist</code>-Element hier:
                <a href="https://developer.mozilla.org/de/docs/Web/HTML/Element/datalist">MDN Web Docs</a>
            </tip>
        </chapter>

        <chapter id="tag-select" title="Das select-Element">
            <p>
                Das <code>select</code>-Element wird verwendet, um eine Auswahlliste zu erstellen. Ein Eintrag der
                Auswahlliste wird mit dem <code>option</code>-Element definiert.
            </p>

            <p>
                Beispiel mit einer klassischen Dropdown-Liste:
            </p>

            <!-- @formatter:off -->
            <code-block lang="html">
                <![CDATA[
                    <select name="thema1">
                        <option value="val1">HTML</option>
                        <option value="val2" selected>CSS</option>
                        <option value="val3">JavaScript</option>
                        <option value="val4">React</option>
                    </select>
                ]]>
            </code-block>
            <!-- @formatter:on -->

            <p>
                Beispiel mit einer Auswahlliste, die mehrere Einträge anzeigt und zur Auswahl mehrere Einträge zulässt:
            </p>

            <!-- @formatter:off -->
            <code-block lang="html">
                <![CDATA[
                    <select name="thema1" multiple size="4">
                        <option value="val1">HTML</option>
                        <option value="val2" selected>CSS</option>
                        <option value="val3">JavaScript</option>
                        <option value="val4">React</option>
                    </select>
                ]]>
            </code-block>
            <!-- @formatter:on -->

            <p>
                Beispiel mit einer Auswahlliste, die mehrere Einträge anzeigt und zur Auswahl mehrere Einträge
                zulässt und die Einträge in Gruppen unterteilt:
            </p>

            <!-- @formatter:off -->
            <code-block lang="html">
                <![CDATA[
                    <select multiple name="thema3" size="6">
                        <optgroup label="Gruppe 1">
                            <option value="val9">HTML</option>
                            <option value="val10">CSS</option>
                        </optgroup>
                        <optgroup label="Gruppe 2">
                            <option value="val11">JavaScript</option>
                            <option value="val12">React</option>
                        </optgroup>
                    </select>
                ]]>
            </code-block>
            <!-- @formatter:on -->

            <deflist>
                <def title="name">
                    <p>
                        Der Bezeichner des Feldes. Dieser Bezeichner wird zusammen mit dem eingegebenen Wert an den
                        Server gesendet und mit diesem Bezeichner kann der Server den Wert identifizieren.
                    </p>
                </def>
                <def title="multiple">
                    <p>
                        Hiermit wird festgelegt, ob mehrere Einträge ausgewählt werden können.
                    </p>
                </def>
                <def title="size">
                    <p>
                        Hiermit wird die Anzahl der sichtbaren Einträge festgelegt.
                    </p>
                </def>
            </deflist>

            <tip>
                Mehr zum <code>select</code>-Element hier:
                <a href="https://developer.mozilla.org/de/docs/Web/HTML/Element/select">MDN Web Docs</a>
            </tip>
        </chapter>

        <chapter id="tag-optgroup" title="Das optgroup-Element">
            <p>
                Das <code>optgroup</code>-Element wird verwendet, um eine Gruppe von Optionen in einer Auswahlliste zu
                erstellen. Ein <code>optgroup</code>-Element kann mehrere <code>option</code>-Elemente enthalten.
            </p>

            <!-- @formatter:off -->
            <code-block lang="html">
                <![CDATA[
                    <select name="thema2">
                        <optgroup label="Frontend">
                            <option value="val1">HTML</option>
                            <option value="val2">CSS</option>
                            <option value="val3">JavaScript</option>
                        </optgroup>
                        <optgroup label="Backend">
                            <option value="val4">PHP</option>
                            <option value="val5">Java</option>
                            <option value="val6">Python</option>
                        </optgroup>
                    </select>
                ]]>
            </code-block>
            <!-- @formatter:on -->

            <deflist>
                <def title="label">
                    <p>
                        Der Bezeichner der Gruppe.
                    </p>
                </def>
            </deflist>

            <tip>
                Mehr zum <code>optgroup</code>-Element hier:
                <a href="https://developer.mozilla.org/de/docs/Web/HTML/Element/optgroup">MDN Web Docs</a>
            </tip>
        </chapter>

        <chapter id="tag-option" title="Das option-Element">
            <!-- TODO -->

            <tip>
                Mehr zum <code>option</code>-Element hier:
                <a href="https://developer.mozilla.org/de/docs/Web/HTML/Element/option">MDN Web Docs</a>
            </tip>
        </chapter>

        <chapter id="tag-output" title="Das output-Element">
            <p>
                Das <code>output</code>-Element wird verwendet, um das Ergebnis einer Berechnung oder eines Skripts
                anzuzeigen. Das <code>for</code>-Attribut des <code>output</code>-Elements verweist auf das
                <code>id</code>-Attribut des Formularelements, dessen Wert angezeigt werden soll. Im folgenden Beispiel
                wird ein Schieberegler mit dem <code>output</code>-Element verknüpft, um den Wert des Schiebereglers
                anzuzeigen.
            </p>

            <!-- @formatter:off -->
            <code-block lang="html">
                <![CDATA[
                    <input type="range" id="ival" value="50">
                    <output id="oval" for="ival">50</output>

                    <script>
                        function synchOutput(ev) {
                            document.getElementById('oval').value = ev.target.value;
                        }

                        document.getElementById('ival').addEventListener('input', synchOutput);
                    </script>
                ]]>
            </code-block>
            <!-- @formatter:on -->

            <tip>
                Mehr zum <code>output</code>-Element hier:
                <a href="https://developer.mozilla.org/de/docs/Web/HTML/Element/output">MDN Web Docs</a>
            </tip>
        </chapter>

        <chapter id="tag-progress" title="Das progress-Element">
            <p>
                Mit dem <code>progress</code>-Element kann eine Fortschrittsanzeige definiert werden, um den
                Fortschritt einer Aktion wie beispielsweise den Download einer Datei oder den Fortschritt beim
                Ausfüllen eines HTML-Formulars anzuzeigen. Der Wert und damit der Fortschrittsbalken kann mit JavaScript
                dynamisch verändert werden. Für eine barrierearme Website sollte auch immer der aktuelle Wert des
                Fortschritts zwischen dem <code>progress</code>-Element notiert werden.
            </p>

            <!-- @formatter:off -->
            <code-block lang="html">
                <![CDATA[
                    <p>
                        <label for="fortschritt">Arbeit abgeschlossen: </label>
                        <progress value="33" max="100" id="fortschritt">33%</progress>
                    </p>
                ]]>
            </code-block>
            <!-- @formatter:on -->

            <deflist>
                <def title="value">
                    <p>
                        Mit dem <code>value</code>-Attribut wird der aktuelle Wert des <code>meter</code>-Elements
                        festgelegt.
                    </p>
                </def>
                <def title="min &amp; max">
                    <p>
                        Mit den Werten <code>min</code> und <code>max</code> wird der Wertebereich festgelegt, in dem
                        der Wert des <code>meter</code>-Elements liegen kann.
                    </p>
                </def>
            </deflist>

            <tip>
                Mehr zum <code>progress</code>-Element hier:
                <a href="https://developer.mozilla.org/de/docs/Web/HTML/Element/progress">MDN Web Docs</a>
            </tip>
        </chapter>

        <chapter id="tag-meter" title="Das meter-Element">
            <p>
                Wie mit dem <code>progress</code>-Element können auch mit dem <code>meter</code>-Element Werte visuell
                dargestellt werden. Es wird zur darstellunv verschiedener Messwerte verwendet. Der Wert kann mit
                JavaScript dynamisch verändert werden. Für eine barrierearme Website sollte auch immer der aktuelle Wert
                des Fortschritts zwischen dem <code>meter</code>-Element notiert werden.
            </p>

            <!-- @formatter:off -->
            <code-block lang="html">
                <![CDATA[
                    <p>
                        <meter value="12" max="100">12 von 100</meter> 12 von 100<br>
                        <meter value="0.33">33 % von 100 %</meter> 33 % von 100 %<br>
                        <meter value="10" min="0" low="25" high="75" max="100">
                            20 % von 100 %
                        </meter> 20 % von 100 %<br>
                        <meter value="80" min="0" low="50" optimum="25" high="75" max="100">
                            80 % von 100 %
                        </meter> 80 % von 100 %<br>
                    </p>
                ]]>
            </code-block>
            <!-- @formatter:on -->

            <deflist>
                <def title="value">
                    <p>
                        Mit dem <code>value</code>-Attribut wird der aktuelle Wert des <code>meter</code>-Elements
                        festgelegt.
                    </p>
                </def>
                <def title="min &amp; max">
                    <p>
                        Mit den Werten <code>min</code> und <code>max</code> wird der Wertebereich festgelegt, in dem
                        der Wert des <code>meter</code>-Elements liegen kann.
                    </p>
                </def>
                <def title="low">
                    <p>
                        Mit dem <code>low</code>-Attribut wird der Wert festgelegt, ab dem der Wert des
                        <code>meter</code>-Elements als zu niedrig angesehen wird.
                    </p>
                </def>
                <def title="optium">
                    <p>
                        Mit dem <code>optimum</code>-Attribut wird der Wert festgelegt, der als optimal angesehen wird.
                    </p>
                </def>
                <def title="high">
                    <p>
                        Mit dem <code>high</code>-Attribut wird der Wert festgelegt, ab dem der Wert des
                        <code>meter</code>-Elements als zu hoch angesehen wird.
                    </p>
                </def>
            </deflist>

            <tip>
                Mehr zum <code>meter</code>-Element hier:
                <a href="https://developer.mozilla.org/de/docs/Web/HTML/Element/meter">MDN Web Docs</a>
            </tip>
        </chapter>

        <chapter id="tag-button" title="Das button-Element">
            <p>
                Das <code>button</code>-Element wird verwendet, um eine anklickbare Schaltfläche zum Auslösen von
                Aktionen zu erstellen. Es kann auch alternativ zu den <code>input</code>-Elementen mit den Typen
                <code>submit</code>, <code>reset</code> und <code>button</code> verwendet werden. Der Vorteil des
                <code>button</code>-Elements ist die Möglichkeit, Text und HTML-Inhalte innerhalb des Elements zu
                platzieren und das <code>button</code>-Element ist auch ein semantisches Element.
            </p>

            <!-- @formatter:off -->
            <code-block lang="html">
                <![CDATA[
                    <button type="button" onclick="alert('Hallo')">Klick mich!</button>
                    <button type="submit">Absenden</button>
                    <button type="reset">Zurücksetzen</button>
                ]]>
            </code-block>
            <!-- @formatter:on -->

            <tip>
                Mehr zum <code>button</code>-Element hier:
                <a href="https://developer.mozilla.org/de/docs/Web/HTML/Element/button">MDN Web Docs</a>
            </tip>
        </chapter>
    </chapter>

    <chapter id="more" title="Weiteres">
        <chapter id="form-attributes" title="Allgemeine Attribute von Eingabefeldern">
            <p>
                Es gibt ein paar nützliche Attribute, die in allen Formularelementen wie Eingabefeldern, Auswahllisten,
                Schaltflächen und Radioschaltflächen erlaubt sind.
            </p>

            <deflist>
                <def title="disabled">
                    <p>
                        Mit dem <code>disabled</code>-Attribut kann ein Eingabefeld deaktiviert werden. Ein
                        deaktiviertes Eingabefeld kann nicht angeklickt oder editiert werden.
                    </p>

                    <!-- @formatter:off -->
                    <code-block collapsed-title="Beispiel" collapsible="true" lang="html">
                        <![CDATA[
                            <p>
                                Bitte Verpflegung auswählen:
                            </p>
                            <p>
                                <input type="checkbox" name="essen" id="brunch" value="brunch" checked disabled>
                                <label for="brunch">Umfassendes Frühstück</label><br>
                                <input type="checkbox" name="essen" id="mittagessen" value="mittagessen">
                                <label for="mittagessen">Reichhaltiges Mittagessen</label><br>
                                <input type="checkbox" name="essen" id="abendessen" value="abendessen">
                                <label for="abendessen">Üppiges Abendessen</label>
                            </p>
                        ]]>
                    </code-block>
                    <!-- @formatter:on -->
                </def>
                <def title="readonly">
                    <p>
                        Mit dem <code>readonly</code>-Attribut kann ein Eingabefeld schreibgeschützt gemacht werden.
                        Ein schreibgeschütztes Eingabefeld kann nicht bearbeitet werden, aber der Wert kann kopiert
                        werden.
                    </p>
                </def>
                <def title="tabindex">
                    <p>
                        Mit dem <code>tabindex</code>-Attribut kann die Reihenfolge festgelegt werden, in der die
                        Eingabefelder mit der Tabulatortaste durchlaufen werden.
                    </p>
                </def>
                <def title="accesskey">
                    <p>
                        Mit dem <code>accesskey</code>-Attribut kann ein Tastaturkürzel festgelegt werden, um das
                        Eingabefeld direkt anzuspringen. Dieses Attribut ist in allen Formularelementen wie
                        Eingabefeldern, Auswahllisten, Schaltflächen und Radioschaltflächen erlaubt.
                    </p>
                </def>
            </deflist>
        </chapter>
    </chapter>

    <chapter id="quellen" title="Quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836297288, "HTML und CSS - Das umfassende Handbuch", Jürgen Wolf, 2023
        </tip>
    </chapter>
</topic>