<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="js-apis-canvas"
       title="Die Canvas API"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">
    <show-structure depth="2" for="chapter,procedure"/>

    <!-- TODO: migrate from Confluence -->
    <chapter id="zeichenflaeche" title="Die Zeichenfläche">
        <p>
            Die Basis für das Zeichnen von Grafiken bildet das <code>&lt;canvas&gt;</code>-Element. Dieses Element
            stellt sozusagen die Zeichenfläche dar, auf die man dann innerhalb des JavaScript-Codes zugreifen kann und
            auf die sich mithilfe der Canvas API zeichnen lässt. Über die Attribute <code>width</code> und
            <code>height</code> lassen sich die Breite und die Höhe definieren, die diese Zeichenfläche auf dem
            Bildschirm einnehmen soll. Lässt man die Attribute weg, hat die Fläche standardmäßig eine Breite von
            <code>300</code> Pixeln und eine Höhe von <code>150</code> Pixeln.
        </p>

        <code-block collapsed-title="Beispiel JavaScript" collapsible="true" lang="javascript">
            <![CDATA[
                <canvas id="canvas" width="500" height="300"></canvas>
            ]]>
        </code-block>
    </chapter>

    <chapter id="rendering-kontext" title="Der Rendering-Kontext">
        <p>
            Das <code>&lt;canvas&gt;</code>-Element stellt einen oder mehrere sogenannte Rendering-Kontexte (im
            Englischen Rendering Context) zur Verfügung, über die sich die Zeichenfläche bzw. deren Inhalt manipulieren
            lässt. Über die Methode <code>getContext()</code> des <code>&lt;canvas&gt;</code>-Elements lässt sich auf
            den entsprechenden Kontext zugreifen. Als Parameter erwartet diese Methode den Bezeichner des Kontextes.
        </p>

        <table style="header-row">
            <tr>
                <td>
                    Bezeichner
                </td>
                <td>
                    Beschreibung
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        2d
                    </code>
                </td>
                <td>
                    Kontext für das Rendern von 2D-Grafiken. Übergibt man diesen Bezeichner, liefert die Methode
                    <code>getContext()</code> ein Objekt vom Typ <code>CanvasRenderingContext2D</code> zurück.
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        webgl
                    </code>
                </td>
                <td>
                    Kontext für das Rendern von 3D-Grafiken in Browsern, die WebGL in Version 1 implementieren. Übergibt
                    man diesen Bezeichner, liefert die Methode <code>getContext()</code> ein Objekt vom Typ
                    <code>WebGLRenderingContext</code> zurück.
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        webgl2
                    </code>
                </td>
                <td>
                    Kontext für das Rendern von 3D-Grafiken in Browsern, die WebGL in Version 2 implementieren. Übergibt
                    man diesen Bezeichner, liefert die Methode <code>getContext()</code> ein Objekt vom Typ
                    <code>WebGL2RenderingContext</code> zurück.
                </td>
            </tr>
        </table>

        <img alt="Rendering" src="js-apis-canvas-rendering.png"/>

        <code-block lang="javascript">
            <![CDATA[
                let canvas = document.getElementById('canvas');
                let context = canvas.getContext('2d');
            ]]>
        </code-block>

        <p>
            Dem 2D-Kontext liegt ein zweidimensionales Koordinatensystem zugrunde, auf dem man anhand von x- und
            y-Koordinaten (und unter Verwendung verschiedener Helferfunktionen) pixelgenau zeichnen kann.
        </p>

        <p>
            Den Ursprung dieses Koordinatensystems bildet die Koordinate (0,0) links oben an der Zeichenfläche.
            Grafikelemente wie Rechtecke, Kreise, Kurven etc. werden relativ zu dieser Ursprungskoordinate auf die
            Zeichenfläche gezeichnet.
        </p>
    </chapter>

    <chapter id="rechtecke" title="Rechtecke zeichnen">

    </chapter>

    <chapter id="pfade" title="Pfade verwenden">

    </chapter>

    <chapter id="texte" title="Texte zeichnen">

    </chapter>

    <chapter id="farbverlaeufe" title="Farbverläufe zeichnen">

    </chapter>

    <chapter id="speichern-und-wiederherstellen" title="Speichern und Wiederherstellen des Canvas-Zustands">

    </chapter>

    <chapter id="transformation" title="Transformationen anwenden">

    </chapter>

    <chapter id="animation" title="Animationen erstellen">

    </chapter>

    <chapter id="quellen" title="Quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836256971, "JavaScript", Philip Ackermann, 2019
        </tip>
    </chapter>
</topic>