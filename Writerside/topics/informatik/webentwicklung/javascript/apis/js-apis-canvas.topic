<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="js-apis-canvas"
       title="Die Canvas API"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">
    <show-structure depth="2" for="chapter,procedure"/>

    <!-- TODO: migrate from Confluence -->
    <chapter id="zeichenflaeche" title="Die Zeichenfläche">
        <p>
            Die Basis für das Zeichnen von Grafiken bildet das <code>&lt;canvas&gt;</code>-Element. Dieses Element
            stellt sozusagen die Zeichenfläche dar, auf die man dann innerhalb des JavaScript-Codes zugreifen kann und
            auf die sich mithilfe der Canvas API zeichnen lässt. Über die Attribute <code>width</code> und
            <code>height</code> lassen sich die Breite und die Höhe definieren, die diese Zeichenfläche auf dem
            Bildschirm einnehmen soll. Lässt man die Attribute weg, hat die Fläche standardmäßig eine Breite von
            <code>300</code> Pixeln und eine Höhe von <code>150</code> Pixeln.
        </p>

        <code-block collapsed-title="Beispiel JavaScript" collapsible="true" lang="javascript">
            <![CDATA[
                <canvas id="canvas" width="500" height="300"></canvas>
            ]]>
        </code-block>
    </chapter>

    <chapter id="rendering-kontext" title="Der Rendering-Kontext">
        <p>
            Das <code>&lt;canvas&gt;</code>-Element stellt einen oder mehrere sogenannte Rendering-Kontexte (im
            Englischen Rendering Context) zur Verfügung, über die sich die Zeichenfläche bzw. deren Inhalt manipulieren
            lässt. Über die Methode <code>getContext()</code> des <code>&lt;canvas&gt;</code>-Elements lässt sich auf
            den entsprechenden Kontext zugreifen. Als Parameter erwartet diese Methode den Bezeichner des Kontextes.
        </p>

        <table style="header-row">
            <tr>
                <td>
                    Bezeichner
                </td>
                <td>
                    Beschreibung
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        2d
                    </code>
                </td>
                <td>
                    Kontext für das Rendern von 2D-Grafiken. Übergibt man diesen Bezeichner, liefert die Methode
                    <code>getContext()</code> ein Objekt vom Typ <code>CanvasRenderingContext2D</code> zurück.
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        webgl
                    </code>
                </td>
                <td>
                    Kontext für das Rendern von 3D-Grafiken in Browsern, die WebGL in Version 1 implementieren. Übergibt
                    man diesen Bezeichner, liefert die Methode <code>getContext()</code> ein Objekt vom Typ
                    <code>WebGLRenderingContext</code> zurück.
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        webgl2
                    </code>
                </td>
                <td>
                    Kontext für das Rendern von 3D-Grafiken in Browsern, die WebGL in Version 2 implementieren. Übergibt
                    man diesen Bezeichner, liefert die Methode <code>getContext()</code> ein Objekt vom Typ
                    <code>WebGL2RenderingContext</code> zurück.
                </td>
            </tr>
        </table>

        <img alt="Rendering" src="js-apis-canvas-rendering.png"/>

        <code-block lang="javascript">
            <![CDATA[
                let canvas = document.getElementById('canvas');
                let context = canvas.getContext('2d');
            ]]>
        </code-block>

        <p>
            Dem 2D-Kontext liegt ein zweidimensionales Koordinatensystem zugrunde, auf dem man anhand von x- und
            y-Koordinaten (und unter Verwendung verschiedener Helferfunktionen) pixelgenau zeichnen kann.
        </p>

        <p>
            Den Ursprung dieses Koordinatensystems bildet die Koordinate (0,0) links oben an der Zeichenfläche.
            Grafikelemente wie Rechtecke, Kreise, Kurven etc. werden relativ zu dieser Ursprungskoordinate auf die
            Zeichenfläche gezeichnet.
        </p>
    </chapter>

    <chapter id="rechtecke" title="Rechtecke zeichnen">
        <p>
            Rechtecke sind die einzige geometrische Grundform, für welche die Canvas API spezielle Methoden definiert,
            alle anderen geometrischen Formen wie Kreise, Dreiecke etc. müssen über sogenannte Pfade selbst gezeichnet
            werden.
        </p>

        <img alt="Rechteck" src="js-apis-canvas-rechtecke.png"/>

        <table style="header-row">
            <tr>
                <td>
                    Methode
                </td>
                <td>
                    Beschreibung
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        fillRect(x, y, width, height)
                    </code>
                </td>
                <td>
                    Zeichnet ein Rechteck der Breite <code>width</code> und der Höhe <code>height</code> am Punkt, der
                    durch die Koordinaten <code>x</code> und <code>y</code> beschrieben wird, und füllt dieses mit einer
                    zuvor definierten Hintergrundfarbe.
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        strokeRect(x, y, width, height)
                    </code>
                </td>
                <td>
                    Zeichnet den Umriss eines Rechtecks der Breite <code>width</code> und der Höhe <code>height</code>
                    am Punkt, der durch die Koordinaten <code>x</code> und <code>y</code> beschrieben wird, und
                    verwendet dabei eine zuvor definierte Rahmenfarbe.
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        clearRect(x, y, width, height)
                    </code>
                </td>
                <td>
                    Löscht alles von der Zeichenfläche, was sich innerhalb des definierten Rechtecks befindet.
                </td>
            </tr>
        </table>

        <code-block lang="javascript">
            <![CDATA[
                let canvas = document.getElementById('canvas');
                let context = canvas.getContext('2d');
                context.fillStyle = 'rgb(200,0,0)';            // Festlegen der Hintergrundfarbe (rot)
                context.fillRect (10, 10, 80, 80);             // Zeichnen des Rechtecks
            ]]>
        </code-block>
    </chapter>

    <chapter id="pfade" title="Pfade verwenden">
        <p>
            Unter einem Pfad versteht man im Zusammenhang mit der Canvas API eine Aneinanderreihung von Koordinaten, die
            durch Linien miteinander verbunden sind. Eine Linie zwischen zwei Punkten kann dabei gerade oder gebogen
            sein. Vom Prinzip her folgt das Erstellen von Pfaden mithilfe der Canvas API immer vier Schritten: Beginn
            des Pfades, Zeichnen des Pfades, optionales Schließen des Pfades und optionales Einfärben von Hintergrund
            bzw. Rahmen.
        </p>

        <table style="header-row">
            <tr>
                <td>
                    Beschreibung
                </td>
                <td>
                    Beispiel (Bild)
                </td>
                <td>
                    Beispiel (Code)
                </td>
            </tr>
            <tr>
                <td>
                    <p>
                        <b>Gerade Linien:</b> Die Methode <code>beginPath()</code>, aufgerufen auf dem Kontextobjekt,
                        beginnt mit der Erstellung des Pfades. Über <code>moveTo()</code> wird anschließend der
                        imaginäre Zeichenstift zu dem Punkt bewegt, der durch die übergebenen <code>x</code>- und
                        <code>y</code>-Koordinaten definiert wird. Mit <code>lineTo()</code> wiederum wird ausgehend von
                        diesem Punkt eine gerade Linie zu einem zweiten Punkt gezogen, dessen Koordinaten man durch
                        entsprechende Argumente dieser Methode übergibt. Die Methode stroke() schlussendlich sorgt
                        dafür, dass der gezeichnete Pfad auch eine Farbe erhält. Wurde die Eigenschaft strokeStyle nicht
                        gesetzt, so wird die Standardfarbe Schwarz verwendet.
                    </p>
                </td>
                <td>
                    <img alt="Pfad - Gerade Linien" src="js-api-canvas-pfade-gerade-linien.png"/>
                </td>
                <td>
                    <code-block lang="javascript">
                        <![CDATA[
                            let context = canvas.getContext('2d');
                            context.beginPath();        // Beginn des Pfades
                            context.moveTo(50, 200);    // Startpunkt festlegen
                            context.lineTo(400, 50);    // gerade Linie zu angegebenem Punkt
                            context.lineTo(400, 200);   // gerade Linie zu angegebenem Punkt
                            context.stroke();           // Rahmen einfärben
                        ]]>
                    </code-block>
                </td>
            </tr>
            <tr>
                <td>
                    <p>
                        <b>Pfade schließen:</b> Soll ein Pfad geschlossen werden, d. h. automatisch eine Linie von
                        dem aktuellen Punkt zu dem Anfangspunkt gezogen werden, kann der Einfachheit halber die Methode
                        <code>closePath()</code> verwendet werden, statt manuell eine Linie zum Ausgangspunkt des Pfades
                        zu ziehen.
                    </p>
                </td>
                <td>
                    <img alt="Pfad - Pfade schließen" src="js-api-canvas-pfade-pfade-schliessen.png"/>
                </td>
                <td>
                    <code-block lang="javascript">
                        <![CDATA[
                            let context = canvas.getContext('2d');
                            context.beginPath();        // Beginn des Pfades
                            context.moveTo(50, 200);    // Startpunkt festlegen
                            context.lineTo(400, 50);    // gerade Linie zu angegebenem Punkt
                            context.lineTo(400, 200);   // gerade Linie zu angegebenem Punkt
                            context.closePath();        // Schließen des Pfades
                            context.stroke();           // Rahmen einfärben
                        ]]>
                    </code-block>
                </td>
            </tr>
            <tr>
                <td>
                    <p>
                        <b>Das »Path2D«-Objekt</b> steht alternativ zur Verfügung. Dieses Objekt bietet bezüglich der
                        Pfaderstellung analoge Methoden wie das Kontextobjekt und eignet sich insbesondere für das
                        Arbeiten mit vielen Pfaden, um immer die Übersicht über die verschiedenen Pfade zu behalten.
                    </p>
                </td>
                <td>
                    <img alt="Pfad - Path2D" src="js-api-canvas-pfade-path2d.png"/>
                </td>
                <td>
                    <code-block lang="javascript">
                        <![CDATA[
                            let context = canvas.getContext('2d');
                            let path = new Path2D();
                            path.moveTo(50, 200);    // Zeichnen des Pfades
                            path.lineTo(400, 50);    // Zeichnen des Pfades
                            path.lineTo(400, 200);   // Zeichnen des Pfades
                            path.closePath();        // Schließen des Pfades
                            context.stroke(path);    // Rahmen einfärben
                        ]]>
                    </code-block>
                </td>
            </tr>
            <tr>
                <td>
                    <p>
                        <b>Quadratische Kurven</b> können mit der Methode <code>quadraticCurveTo()</code> gezeichnet
                        werden. Vier Parameter werden dabei erwartet: Die ersten beiden Parameter bilden die
                        <code>x</code>- bzw. <code>y</code>-Koordinate des sogenannten Kontrollpunkts, welcher im
                        Wesentlichen das Ausmaß der Kurve beeinflusst. Parameter drei und vier dagegen stehen für die
                        <code>x</code>- und <code>y</code>-Koordinaten des Punkts, zu dem die Kurve gezeichnet werden
                        soll (Zielpunkt).
                    </p>
                </td>
                <td>
                    <img alt="Pfad - quadratische Kurven" src="js-api-canvas-pfade-quadratische-kurven.png"/>
                </td>
                <td>
                    <code-block lang="javascript">
                        <![CDATA[
                            let context = canvas.getContext('2d');
                            let path = new Path2D();
                            path.moveTo(25,100);
                            path.quadraticCurveTo(25, 25, 100, 25);
                            context.stroke(path);
                        ]]>
                    </code-block>
                </td>
            </tr>
            <tr>
                <td>
                    <p>
                        <b>Bézierkurven</b> sind bezüglich des Aussehens bzw. der Parametrisierung flexibler als
                        quadratische Kurven, da sie nicht nur einen, sondern zwei Kontrollpunkte haben. Die
                        entsprechende Methode trägt den Namen <code>bezierCurveTo()</code> und erwartet insgesamt sechs
                        Parameter. Die ersten beiden Parameter definieren die Koordinaten des ersten Kontrollpunkts, die
                        nachfolgenden beiden Parameter die Koordinaten des zweiten Kontrollpunkts und die letzten beiden
                        Parameter die Koordinaten des Zielpunkts, sprich des Punkts, zu dem die Kurve gezogen werden
                        soll.
                    </p>
                </td>
                <td>
                    <img alt="Pfad - Bézierkurven" src="js-api-canvas-pfade-bezierkurven.png"/>
                </td>
                <td>
                    <code-block lang="javascript">
                        <![CDATA[
                            let context = canvas.getContext('2d');
                            let path = new Path2D();
                            path.moveTo(25,100);
                            path.bezierCurveTo(100, 100, 25, 25, 100, 25);
                            context.stroke(path);
                        ]]>
                    </code-block>
                </td>
            </tr>
            <tr>
                <td>
                    <p>
                        <b>Bogen und Kreise</b> können mit zwei Methoden gezeichnet werden: <code>arcTo()</code> und
                        <code>arc()</code>.
                    </p>

                    <list type="bullet">
                        <li>
                            Die Methode <code>arcTo()</code> erwartet fünf Parameter: <code>x</code>- und
                            <code>y</code>-Koordinaten des ersten Kontrollpunkts, <code>x</code>- und
                            <code>y</code>-Koordinaten des zweiten Kontrollpunkts sowie den Radius des zu zeichnenden
                            Bogens.
                        </li>
                        <li>
                            Die Methode <code>arc()</code> erwartet sechs Parameter: <code>x</code>- und
                            <code>y</code>-Koordinaten des Bogenzentrums, den Radius des Bogens, Start- und Endwinkel
                            sowie eine boolesche Angabe darüber, ob der Bogen im Uhrzeigersinn oder entgegen dem
                            Uhrzeigersinn gezeichnet werden soll.
                        </li>
                    </list>
                </td>
                <td>
                    <img alt="Pfad - Bogen und Kreise 1" src="js-api-canvas-pfade-bogen-und-kreise-1.png"/>
                    <br/>
                    <img alt="Pfad - Bogen und Kreise 2" src="js-api-canvas-pfade-bogen-und-kreise-2.png"/>
                </td>
                <td>
                    <code-block lang="javascript">
                        <![CDATA[
                            let context = canvas.getContext('2d');
                            path.moveTo(25,200);
                            path.arcTo(25, 25, 200, 25, 90);
                            path.lineTo(200, 25);
                            context.stroke(path);
                        ]]>
                    </code-block>

                    <code-block lang="javascript">
                        <![CDATA[
                            let context = canvas.getContext('2d');
                            let path = new Path2D();
                            path.moveTo(25,200);
                            path.arc(100, 100, 50, 25, 25, false);
                            path.lineTo(200, 25);
                            context.stroke(path);
                        ]]>
                    </code-block>
                </td>
            </tr>
        </table>
    </chapter>

    <chapter id="texte" title="Texte zeichnen">
        <p>
            Für das Zeichnen von Texten stehen zwei Methoden zur Verfügung: die Methode <code>fillText()</code> und die
            Methode <code>strokeText()</code>. Erstere zeichnet einen Text, der mit einer (zuvor definierten)
            Hintergrundfarbe gefüllt ist, während Letztere einen Text zeichnet, der mit einer (zuvor definierten)
            Rahmenfarbe umrandet ist. Beide Methoden erwarten mindestens drei Parameter sowie optional einen vierten:
            den Text an sich, <code>x</code>-Position und <code>y</code>-Position sowie (optional) die maximale Breite,
            die der Text auf der Zeichenfläche einnehmen darf. Zusätzlich lässt sich über verschiedene Eigenschaften am
            Kontextobjekt Einfluss auf das Aussehen des Textes nehmen.
        </p>

        <code-block lang="javascript">
            <![CDATA[
                let context = canvas.getContext('2d');
                context.font = '48px serif';               // Schrifteigenschaften
                context.fillText('Hallo Welt', 10, 50);    // Zeichnen des Textes
                context.strokeText('Hallo Welt', 10, 100); // Zeichnen des Textes
            ]]>
        </code-block>

        <table style="header-row">
            <tr>
                <td>
                    Eigenschaft
                </td>
                <td>
                    Beschreibung
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        font
                    </code>
                </td>
                <td>
                    Enthält als Zeichenkette Informationen über das Aussehen des Textes, wie beispielsweise
                    Schriftgröße, Schriftfarbe etc. Die Syntax ist dabei genau die für die <code>font</code>-Eigenschaft
                    aus CSS.
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        textAlign
                    </code>
                </td>
                <td>
                    Enthält Angaben zur horizontalen Ausrichtung des Textes. Mögliche Werte sind <code>start</code>,
                    <code>end</code>, <code>left</code>, <code>right</code> und <code>center</code>.
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        textBaseline
                    </code>
                </td>
                <td>
                    Enthält Angaben zur vertikalen Position des Textes. Mögliche Werte sind: <code>top</code>,
                    <code>hanging</code>, <code>middle</code>, <code>alphabetic</code>, <code>ideographic</code> und
                    <code>bottom</code>.
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        direction
                    </code>
                </td>
                <td>
                    Enthält Angaben zur Textrichtung. Mögliche Werte sind <code>ltr</code> (links nach rechts),
                    <code>rtl</code> (rechts nach links) und <code>inherit</code>.
                </td>
            </tr>
        </table>
    </chapter>

    <chapter id="farbverlaeufe" title="Farbverläufe zeichnen">
        <p>
            Statt mit einer einzelnen Farbe können Flächen und Rahmen auch mit einem Farbverlauf gefüllt werden. Zur
            Verfügung stehen dabei lineare Farbverläufe und radiale Farbverläufe.
        </p>

        <table style="header-row">
            <tr>
                <td>
                    Beschreibung
                </td>
                <td>
                    Beispiel (Bild)
                </td>
                <td>
                    Beispiel (Code)
                </td>
            </tr>
            <tr>
                <td>
                    <p>
                        <b>Lineare Farbverläufe</b> werden mithilfe der Methode <code>createLinearGradient()</code>
                        gezeichnet. Dieser Methode übergibt man in Form von vier Parametern die <code>x</code>- und
                        <code>y</code>-Koordinaten des Startpunkts (die ersten beiden Parameter) sowie die
                        <code>x</code>- und <code>y</code>-Koordinaten des Endpunkts (die letzten beiden Parameter).
                    </p>
                    <p>
                        Die Methode liefert dabei ein Objekt vom Typ <code>CanvasGradient</code> zurück, auf dem sich
                        über die Methode <code>addColorStop()</code> die einzelnen Farben des Farbverlaufs bestimmen
                        lassen. Als ersten Parameter übergibt man der Methode dabei die relative Position (in Form eines
                        Wertes zwischen <code>0.0</code> und <code>1.0</code>) sowie den entsprechenden Farbwert.
                    </p>
                </td>
                <td>
                    <img alt="Farbverlauf - Linear" src="js-api-canvas-gradient-linear.png"/>
                </td>
                <td>
                    <code-block lang="javascript">
                        <![CDATA[
                            let context = canvas.getContext('2d');
                            let gradient = context.createLinearGradient(0, 0, 0, 150);
                            gradient.addColorStop(0, '#FF0000');
                            gradient.addColorStop(0.5, '#00FF00');
                            gradient.addColorStop(1, '#0000FF');
                            context.fillStyle = gradient;
                            context.fillRect(20, 20, 460, 240);
                        ]]>
                    </code-block>
                </td>
            </tr>
            <tr>
                <td>
                    <p>
                        <b>Radiale Farbverläufe</b> verlaufen im Gegensatz zu linearen Farbverläufen, bei denen die
                        Farben in eine Richtung (eben linear) verlaufen, strahlenförmig, d. h. von einem Punkt ausgehend
                        in alle Richtungen. Ein radialer Farbverlauf definiert sich dabei über zwei Kreise: Ein Kreis
                        definiert den Mittelpunkt des Farbverlaufs, der andere den Umfang des Farbverlaufs.
                    </p>
                    <p>
                        Die entsprechende Methode in der Canvas API trägt den Namen <code>createRadialGradient()</code>
                        und erwartet sechs Parameter, wobei die ersten drei Parameter die <code>x</code>- und
                        <code>y</code>-Koordinaten sowie den Radius des Kreises, der den Mittelpunkt definiert,
                        repräsentieren und die letzten drei Parameter gleiches für den Kreis, der den Umfang definiert,
                        tun.
                    </p>
                </td>
                <td>
                    <img alt="Farbverlauf - Radial" src="js-api-canvas-gradient-radial.png"/>
                </td>
                <td>
                    <code-block lang="javascript">
                        <![CDATA[
                            let context = canvas.getContext('2d');
                            let gradient = context.createRadialGradient(50, 100, 20, 100, 100, 80 );
                            gradient.addColorStop(0, '#FF0000');
                            gradient.addColorStop(0.5, '#00FF00');
                            gradient.addColorStop(1, 'rgba(0,0,255,0)');
                            context.fillStyle = gradient;
                            context.fillRect(10,10,200,200);
                        ]]>
                    </code-block>
                </td>
            </tr>
        </table>
    </chapter>

    <chapter id="speichern-und-wiederherstellen" title="Speichern und Wiederherstellen des Canvas-Zustands">
        <table style="header-row">
            <tr>
                <td>
                    Methode
                </td>
                <td>
                    Beschreibung
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        save()
                    </code>
                </td>
                <td>
                    Mit dieser Methode können aktuelle Einstellungen des Kontextobjektes auf einem Stack abgelegt und
                    gespeichert werden.
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        restore()
                    </code>
                </td>
                <td>
                    Mit dieser Methode können die gespeicherten Einstellungen wiederhergestellt werden. Dies eignet sich
                    besonders dann, wenn bestimmte Einstellungen mehrfach, aber zu verschiedenen Zeitpunkten
                    wiederverwendet werden sollten. Wird die Methode ein zweites Mal aufgerufen, stellt sie den Zustand
                    vor dem letzten save wieder her.
                </td>
            </tr>
        </table>

        <p>
            Die Zustände, die auf dem Stack gespeichert werden, enthalten auch Informationen über die aktuelle
            sogenannte Transformationsmatrix, weswegen das Verwenden von <code>save()</code> und <code>restore()</code>
            auch im Zusammenhang mit Transformationen eine Rolle spielt.
        </p>
    </chapter>

    <chapter id="transformation" title="Transformationen anwenden">
        <p>
            Für das Transformieren von Grafikelementen innerhalb der Zeichenfläche stehen drei Operationen zur
            Verfügung.
        </p>

        <table style="header-row">
            <tr>
                <td>
                    Operation
                </td>
                <td>
                    Beschreibung
                </td>
                <td>
                    Beispiel (Code)
                </td>
            </tr>
            <tr>
                <td>
                    <img alt="Transformationen - Skalierung" src="js-api-canvas-transformation-skalierung.png"/>
                </td>
                <td>
                    <p>
                        Um ein Grafikelement zu skalieren, wird die Methode <code>scale()</code> verwendet. Sie erwartet
                        als ersten Parameter den horizontalen Skalierungsfaktor und als zweiten Parameter den vertikalen
                        Skalierungsfaktor.
                    </p>

                    <note>
                        <p>
                            <b>
                                Änderung der Transformationsmatrix
                            </b>
                        </p>

                        <p>
                            Genau gesagt, wird durch den Aufruf von <code>scale()</code> nicht ein einzelnes
                            Grafikelement skaliert, sondern die aktuelle Transformationsmatrix verändert. Das heißt, die
                            Skalierungseinstellungen betreffen erst einmal alle Grafikelemente, die nach dem Aufruf der
                            Methode auf die Zeichenfläche gezeichnet werden. Möchte man dagegen nur einzelne
                            Grafikelemente skalieren, muss man, immer vor dem Zeichnen des jeweils nächsten Elements die
                            Transformationsmatrix über die Aufrufe von <code>restore()</code> und <code>save()</code>
                            wieder zurücksetzen.
                        </p>
                    </note>
                </td>
                <td>
                    <code-block lang="javascript">
                        <![CDATA[
                            let canvas = document.getElementById('canvas');
                            let context = canvas.getContext('2d');
                            context.scale(7,7);
                        ]]>
                    </code-block>
                </td>
            </tr>
            <tr>
                <td>
                    <img alt="Transformationen - Rotation" src="js-api-canvas-transformation-rotation.png"/>
                </td>
                <td>
                    <p>
                        Für die Rotation von Grafikelementen steht die Methode <code>rotate()</code> zur Verfügung. Als
                        Parameter erwartet diese Methode den Winkel, um den rotiert werden soll. Wie bei
                        <code>scale()</code> hat auch die Anwendung von <code>rotate()</code> Auswirkungen auf die der
                        Zeichenfläche zugrunde liegende Transformationsmatrix, sodass man diese gegebenenfalls wieder
                        (wie schon bei <code>scale()</code> über Aufrufe von <code>restore()</code> und
                        <code>save()</code>) zurücksetzen muss.
                    </p>
                </td>
                <td>
                    <code-block lang="javascript">
                        <![CDATA[
                            let canvas = document.getElementById('canvas');
                            let context = canvas.getContext('2d');
                            context.rotate(7);
                        ]]>
                    </code-block>
                </td>
            </tr>
            <tr>
                <td>
                    <img alt="Transformationen - Translation" src="js-api-canvas-transformation-translation.png"/>
                </td>
                <td>
                    <p>
                        Für die Translation steht die Methode <code>translate()</code> zur Verfügung, welche als
                        Parameter Werte für die horizontale und die vertikale Verschiebung erwartet.
                    </p>
                </td>
                <td>
                    <code-block lang="javascript">
                        <![CDATA[
                            let canvas = document.getElementById('canvas');
                            let context = canvas.getContext('2d');
                            context.translate(40, 40);
                        ]]>
                    </code-block>
                </td>
            </tr>
        </table>
    </chapter>

    <chapter id="animation" title="Animationen erstellen">
        <p>
            Über die Canvas API ist es auch möglich Animationen zu erstellen. Allerdings muss dabei jedes einzelne Bild
            einer Animation (auch Frame genannt) selbst gezeichnet werden. Vom Prinzip her läuft das nach folgenden
            Schritten ab, wobei die letzten drei Schritte mehrfach ausgeführt werden können:
        </p>

        <list type="bullet">
            <li>
                Leeren der Zeichenfläche
            </li>
            <li>
                optionales Speichern des Zustands
            </li>
            <li>
                Zeichnen
            </li>
            <li>
                optionales Laden des Zustands
            </li>
        </list>

        <p>
            Diese vier Schritte kapselt man normalerweise innerhalb einer Funktion, die dann in regelmäßigen
            Zeitabständen aufgerufen wird (für jedes Frame in der Animation). Auch wenn dieses zeitgesteuerte
            wiederholte Aufrufen über die Funktion <code>setInterval()</code> erreicht werden kann, ist es anzuraten,
            stattdessen die Methode <code>requestAnimationFrame()</code> zu verwenden. Diese Methode ist speziell für
            die Arbeit mit Animationen innerhalb einer Webseite gedacht und stellt den effizientesten Weg dar, eine
            entsprechende Funktion wiederholt und in gleichbleibenden Zeitabständen aufzurufen.
        </p>

        <p>
            Das folgende Beispiel zeigt eine Animation, in der drei farbige Rechtecke um einen bestimmten Punkt rotiert
            werden. Die Funktion <code>redraw()</code> enthält dabei den Code, der für das Zeichnen der Rechtecke
            verantwortlich ist. Aufgerufen wird diese Funktion, sobald sie der Methode
            <code>requestAnimationFrame()</code> als Argument übergeben wurde. Der Aufruf von
            <code>requestAnimationFrame()</code> ist dabei an zwei Stellen notwendig: zum einen zu Beginn innerhalb
            der Funktion <code>draw()</code>, zum anderen am Ende der Funktion <code>redraw()</code>. Ersterer Aufruf
            sorgt dafür, dass <code>redraw()</code>initial aufgerufen wird und den ersten Frame in der Animation
            zeichnet (die Animation quasi gestartet wird), letzterer Aufruf sorgt dafür, dass <code>redraw()</code>
            kontinuierlich sich selbst aufruft, um so jeweils einen neuen Frame in der Animation zu zeichnen (und die
            Animation quasi unendlich fortzusetzen).
        </p>

        <code-block collapsed-title="Beispiel" collapsible="true" lang="javascript">
            <![CDATA[
                function draw() {
                  let canvas = document.getElementById('canvas');
                  if (canvas.getContext){
                    window.requestAnimationFrame(redraw);
                  }
                }

                function redraw() {
                  let context = document.getElementById('canvas').getContext('2d');
                  context.clearRect(0,0,500,300);   // (1) Leeren der Zeichenfläche
                  let time = new Date();
                  let angle = ((2*Math.PI)/6)*time.getSeconds() + ((2*Math.PI)/6000)*time.getMilliseconds();

                                                    // Rotes Rechteck:
                  context.fillStyle = '#FF0000';    //
                  context.save();                   // (2) Zustand speichern
                  context.translate(150,150);       // (3) Zeichnen
                  context.rotate(angle);            //
                  context.translate(0,25);          //
                  context.fillRect(5,5,20,20);      //
                  context.restore();                // (4) Zustand laden

                                                    // Grünes Rechteck:
                  context.fillStyle = '#00FF00';    //
                  context.save();                   // (2) Zustand speichern
                  context.translate(150,150);       // (3) Zeichnen
                  context.rotate(angle);            //
                  context.translate(0,50);          //
                  context.fillRect(5,5,20,20);      //
                  context.restore();                // (4) Zustand laden

                                                    // Blaues Rechteck:
                  context.fillStyle = '#0000FF';    //
                  context.save();                   // (2) Zustand speichern
                  context.translate(150,150);       // (3) Zeichnen
                  context.rotate(angle);            //
                  context.translate(0,75);          //
                  context.fillRect(5,5,20,20);      //
                  context.restore();                // (4) Zustand laden
                  window.requestAnimationFrame(redraw);
                }

                window.addEventListener('DOMContentLoaded', draw);
            ]]>
        </code-block>
    </chapter>

    <chapter id="quellen" title="Quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836256971, "JavaScript", Philip Ackermann, 2019
        </tip>
    </chapter>
</topic>