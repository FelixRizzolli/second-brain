<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="js-entwurfsmuster"
       title="Entwurfsmuster"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">
    <show-structure depth="2" for="chapter,procedure"/>

    <chapter id="object-factory" title="Object Factory">
        <p>
            Factory ist ein objektorientiertes Entwurfsmuster. Die Idee selbst ist einfach: Wir schreiben eine Funktion,
            welche bei jedem Aufruf ein neues Objekt zurückgibt, dessen Typ wir definieren. Dieser Funktion können auch
            Argumente übergeben werden, um es zu initiieren.
        </p>

        <code-block lang="javascript">
            <![CDATA[
                let createPoint = (x, y) => ({ x, y });
                // oder auch
                let createColoredPoint = function(x, y, color) {
                  let _color = color;
                  return {
                    x,
                    y,
                    getColor() {
                      return _color;
                  };
                };
            ]]>
        </code-block>
    </chapter>

    <chapter id="deep-clone" title="Deep Clone">
        <p>
            Beim <b>deep cloning</b> werden die Werte aller Felder kopiert, unabhängig von ihrer Verschachtelung, und
            gegebenenfalls neue Objekte erstellt, die Eigenschaften des übergeordneten Objekts sind. JS verfügt nicht
            über einen eingebauten Mechanismus für diese Art des Klonens, sodass wir es selbst tun müssen oder eine
            Bibliothek mit dieser Funktionalität einbinden müssen.
        </p>

        <code-block lang="javascript">
            <![CDATA[
                let deepClone = function(obj) {
                  let newObj = {...obj};
                  for (property in newObj) {
                    if (typeof newObj[property] === "object") {
                      newObject[property] = deepClone(newObj[property]);
                    }
                  }
                  return newObj;
                }
            ]]>
        </code-block>
    </chapter>

    <chapter id="namespaces-modules" title="Namespaces &amp; Modules">

        <chapter id="namespaces-namenskonflikte" title="Namenskonflikte">

            <chapter id="namespaces-namenskonflikte-design-pattern" title="Das Namespace-Entwurfsmuster">

            </chapter>
        </chapter>

        <chapter id="modules" title="Module definieren und verwenden">

            <chapter id="modules-design-pattern" title="Das Module-Entwurfsmuster">

                <chapter id="modules-design-pattern-revealing-module" title="Das Revealing-Module-Entwurfsmuster">

                </chapter>

                <chapter id="modules-design-pattern-module-augmentation" title="Module Augmentation">

                </chapter>
            </chapter>

            <chapter id="modules-amd" title="AMD">

            </chapter>

            <chapter id="modules-commonjs" title="CommonJS">

            </chapter>

            <chapter id="modules-native" title="Native Module">

                <chapter id="modules-native-definieren" title="Module definieren">

                </chapter>

                <chapter id="modules-native-importieren" title="Module importieren">

                </chapter>
            </chapter>
        </chapter>
    </chapter>

    <chapter id="quellen" title="Quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836256971, "JavaScript", Philip Ackermann, 2019
        </tip>
    </chapter>
</topic>