<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="js-svg"
       title="Das SVG-Format"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">
    <show-structure depth="2" for="chapter,procedure"/>

    <chapter id="grundlagen" title="grundlagen">
        <p>
            JavaScript bietet auch die Möglichkeit Vektorgrafiken wie SVG zu erzeugen, darauf zuzugreifen, diese zu
            verändern, neue Elemente hinzuzufügen und prinzipiell alle andere DOM-Operationen durchführen.
        </p>

        <tip>
            Mehr zu SVG: <a href="svg.topic"/>
        </tip>
    </chapter>

    <chapter id="event-listener" title="Event-Listener für SVG-Elemente registrieren">
        <code-block lang="javascript">
            <![CDATA[
                'use strict';
                function init() {
                  let svgDocument = document.getElementById('svg');
                  let circle = svg.getElementById('circle');
                  circle.addEventListener('click', (e) => {
                    console.log('Hallo Welt');
                  });
                  circle.addEventListener('mouseover', (e) => {
                    circle.classList.toggle('active');
                  });
                  circle.addEventListener('mouseout', (e) => {
                    circle.classList.toggle('active');
                  });
                }
                window.addEventListener('DOMContentLoaded', init);
            ]]>
        </code-block>

        <p>
            Hierbei handelt es sich um ein Beispiel für das Registrieren von Event-Listenern an SVG-Elementen. Es
            wird zunächst über die Methode <code>getElementById()</code> auf das eingebettete
            <code>&lt;svg&gt;</code>-Element zugegriffen und anschließend über einen erneuten Aufruf dieser Methode
            (diesmal auf dem gefundenen <code>&lt;svg&gt;</code>-Element) das <code>&lt;circle&gt;</code>-Element
            ermittelt. Anschließend werden über die Methode <code>addEventListener()</code> drei verschiedene
            Event-Listener registriert: der Event-Listener für das <code>click</code>-Event wird aufgerufen, wenn auf
            das <code>&lt;circle&gt;</code>-Element geklickt wird, die Event-Listener für das <code>mouseover</code>-
            und das <code>mouseout</code>-Event immer dann, wenn der Mauszeiger über dieses Element bewegt bzw. wieder
            davon wegbewegt wird. In beiden Fällen wird jeweils die CSS-Klasse <code>active</code> hin- und
            hergeschaltet und damit die Füllfarbe verändert.
        </p>
    </chapter>

    <chapter id="svg-dynamisch-veraendern" title="SVG-Elemente dynamisch verändern">
        <code-block collapsed-title="Beispiel HTML" collapsible="true" lang="javascript">
            <![CDATA[
                <!DOCTYPE html>
                <html>
                <head lang="en">
                    <meta charset="UTF-8">
                    <title>SVG-Beispiel</title>
                    <link rel="stylesheet" href="styles/styles.css">
                </head>
                <body>
                  <script src="scripts/main.js"></script>
                  <svg id="svg" version="1.1" baseProfile="full" width="500" height="500" xmlns="http://www.w3.org/2000/svg">
                    <rect width="100%" height="100%" />
                    <circle id="circle" cx="100" cy="100" r="80" />
                  </svg>
                  <div>X: <input id="sliderX" type="range" min="1" max="500" value="100" /></div>
                  <div>Y: <input id="sliderY" type="range" min="1" max="500" value="100" /></div>
                </body>
                </html>
            ]]>
        </code-block>

        <code-block collapsed-title="Beispiel JavaScript" collapsible="true" lang="javascript">
            <![CDATA[
                'use strict';
                function init() {
                  let sliderX = document.getElementById('sliderX');
                  let sliderY = document.getElementById('sliderY');
                  sliderX.addEventListener('change', (e) => {
                    moveCircle(e.target.value, 'x');
                  });
                  sliderY.addEventListener('change', (e) => {
                    moveCircle(e.target.value, 'y');
                  });
                }
                function moveCircle(value, direction) {
                  let svgDocument = document.getElementById('svg');
                  let circle = svgDocument.getElementById('circle');
                  circle.setAttribute('c' + direction, value);
                }
                window.addEventListener('DOMContentLoaded', init);
            ]]>
        </code-block>

        <p>
            SVG-Elemente lassen sich natürlich auch dynamisch per JavaScript verändern, beispielsweise die Position des
            <code>&lt;circle&gt;</code>-Elements. Dazu wird zunächst das bereits bekannte HTML/SVG um zwei Schieberegler
            erweitert. Jedem Schieberegler wird anschließend ein Event-Listener für das <code>change</code>-Event
            hinzugefügt, innerhalb dessen die Funktion <code>moveCircle()</code> aufgerufen wird. Diese erwartet als
            Parameter zum einen eine Positionsangabe, zum anderen eine Angabe über die Richtung (horizontal oder
            vertikal bzw. x oder y). Ausgehend davon wird entweder das Attribut <code>cx</code> (x-Koordinate des
            Kreismittelpunkts) oder das Attribut <code>cy</code> (y-Koordinate des Kreismittelpunkts) entsprechend
            aktualisiert. Schon wird der Kreis an die entsprechende Position auf der Zeichenfläche verschoben.
        </p>
    </chapter>

    <chapter id="quellen" title="Quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836256971, "JavaScript", Philip Ackermann, 2019
        </tip>
    </chapter>
</topic>