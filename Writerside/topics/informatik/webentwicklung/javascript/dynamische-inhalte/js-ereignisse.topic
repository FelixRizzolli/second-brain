<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="js-ereignisse"
       title="Ereignisse"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">
    <show-structure depth="2" for="chapter,procedure"/>

    <chapter id="grundlagen" title="Grundlagen">
        <p>
            Das Konzept der ereignisgesteuerten Programmierung funktioniert im Wesentlichen wie folgt: Auf der einen
            Seite hat man sogenannte Auslöser von Ereignissen (auch Event-Emitter genannt). Das können im Falle von
            grafischen Benutzeroberflächen (User Interfaces, kurz UI) beispielsweise Schaltflächen sein oder Textfelder
            oder irgendwelche anderen UI-Komponenten. Wird auf eine Schaltfläche geklickt oder Text in ein Textfeld
            eingegeben, wird im Hintergrund von der jeweiligen Komponente (der Schaltfläche oder dem Textfeld) ein
            Ereignis (Event) ausgelöst.
        </p>

        <p>
            Nachdem ein Ereignis ausgelöst wurde, wird es in eine sogenannte Event-Queue eingereiht, welche dafür sorgt,
            dass Events, die zuerst ausgelöst wurden, auch als Erstes behandelt werden. Über die sogenannte Event-Loop
            wird fortlaufend überprüft, ob es in der Event-Queue ein neues Ereignis gibt, und – falls dies der Fall ist
            – das entsprechende Event an sogenannte Event-Handler weitergeleitet.
        </p>

        <p>
            In JavaScript sind Event-Handler einfache Funktionen, über die auf ein ausgelöstes Event reagiert werden
            kann. So kann beispielsweise auf eine Schaltfläche geklickt werden und es wird eine definierte Funktion
            aufgerufen.
        </p>

        <img alt="Ereignisse in JavaScript" src="js-dynamische-inhalte-ereignisse.png"/>

        <p>
            Das Prinzip der ereignisgesteuerten Programmierung ist dabei jedoch nicht auf Interaktionen mit einer
            Benutzeroberfläche beschränkt. Es gibt in der JavaScript-Entwicklung auch Ereignisse, die ausgelöst werden,
            ohne dass man als Nutzer mit der Benutzeroberfläche interagiert, sprich Ereignisse, die nicht durch den
            Nutzer, sondern programmatisch ausgelöst werden.
        </p>
    </chapter>

    <chapter id="ereignisse-reagieren" title="Auf Ereignisse reagieren">
        <p>
            Um bei Benutzerinteraktionen innerhalb einer Webseite eine Funktion auslösen zu können, sind drei Schritte
            notwendig:
        </p>

        <list type="decimal">
            <li>
                Auswahl des Elements auf der Webseite, welches auf die Benutzerinteraktion reagieren soll: z.B. Button.
            </li>
            <li>
                Angabe des Events, welches abgefangen werden soll: z.B. Mausklicks, Tastatureingaben, Mausbewegungen...
            </li>
            <li>
                Angabe der Funktion, die aufgerufen werden soll.
            </li>
        </list>

        <img alt="Ereignisfluss" src="js-dynamische-inhalte-ereignisse-ereignissfluss.png"/>

        <p>
            Dieses Beispiel zeigt den wesentlichen Ablauf beim Eintreten eines Ereignisses:
        </p>

        <list type="bullet">
            <li>
                Zunächst wird geprüft, ob ein Event-Handler bzw. Event-Listener für das Ereignis definiert ist.
            </li>
            <li>
                Ist dies der Fall, wird der entsprechende Code ausgeführt. Sind dagegen keine
                Event-Handler/Event-Listener definiert, werden direkt die Standardaktionen des Browsers ausgelöst, die
                mit dem jeweiligen Ereignis verknüpft sind.
            </li>
            <li>
                Innerhalb eines Event-Handlers/Event-Listeners hat man darüber hinaus die Möglichkeit, diese
                Standardaktionen des Browsers für ein Ereignis zu unterbinden.
            </li>
            <li>
                Es gibt bei der Webentwicklung auch Events, die abgefragt werden können, ohne zuvor ein Element
                selektiert zu haben. Beispielsweise Events, die ausgelöst werden, wenn eine Webseite vollständig geladen
                wurde, und viele andere mehr.
            </li>
            <li>
                Es gibt drei Möglichkeiten Events abzufangen bzw. an Elemente binden zu können HTML-Event-Handler,
                DOM-Event-Handler und DOM-Event-Listener.
            </li>
        </list>

        <chapter id="ereignisse-html-event-handler" title="HTML-Event-Handler (DEPRECATED)">
            <p>
                Dabei wird über spezielle HTML-Attribute definiert, welche Funktion bei welchem Ereignis aufgerufen
                werden soll. Der Grund, warum man keine HTML-Event-Handler mehr verwenden sollte, ist, dass auf diese
                Weise HTML-Code und JavaScript-Code vermischt werden, was bekanntermaßen kein guter Stil hinsichtlich
                Wartbarkeit etc. ist.
            </p>

            <code-block lang="javascript">
                <![CDATA[
                    <input type="submit" value="Alter prüfen" onclick="checkAgeNotNegative()"/>
                ]]>
            </code-block>

            <p>
                Wird auf die Schaltfläche "Alter prüfen" geklickt, so wird die im JavaScript-Code definierte Funktion
                <code>checkAgeNotNegative()</code> ausgeführt.
            </p>
        </chapter>

        <chapter id="ereignisse-dom-event-handler" title="DOM-Event-Handler">
            <p>
                Diese haben ihren Namen daher, weil sie Teil der DOM-Spezifikation sind und per JavaScript definiert
                werden. Hierbei ist anders als bei HTML-Event-Handlern die Logik der Anwendung (das Reagieren auf
                Ereignissen) getrennt von der Struktur der Anwendung (dem HTML). Der Nachteil: Über sie ist es nur
                möglich, für ein Ereignis eine einzelne Funktion anzugeben, die aufgerufen werden soll.
            </p>

            <code-block lang="javascript">
                <![CDATA[
                    function init() {
                      let element = document.getElementById('age');
                      element.onblur = checkAgeNotNegative; // (1)
                      element.onblur = checkAgeIsNumber;    // (2) Hier wird der Event-Handler überschrieben.
                      element.onblur = () => {              // (3)
                        checkAgeNotNegative();
                        checkAgeIsNumber();
                      }
                    }
                    window.onload = init;
                ]]>
            </code-block>

            <p>
                Anders als bei den HTML-Event-Handlern steht hier kein Funktionsaufruf, sondern wirklich nur der Name
                der Funktion (d.h. ohne Klammernpaar). Würden <code>element.onblur = checkAgeNotNegative()</code>
                anstatt <code>element.onblur = checkAgeNotNegative</code> geschrieben werden, würde der Rückgabewert des
                Funktionsaufrufs <code>checkAgeNotNegative()</code> als Event-Handler definiert werden.
            </p>

            <p>
                Im Beispiel wird auch noch über die Eigenschaft <code>onload</code> des <code>window</code>-Objekts ein
                Event-Handler definiert, der aufgerufen wird, wenn die Webseite geladen wurde. Ohne diesen Event-Handler
                würde die Funktion <code>init()</code> nicht aufgerufen und damit auch kein Event-Handler an dem
                Formularelement registriert.
            </p>

            <p>
                Das Beispiel (3) zeigt, dass es mit einer anonymen Funktion, welche hier als Kapsel dient, möglich ist,
                auf ein Event mit mehreren Funktionen zu reagieren. Auch wenn dieses Vorgehe für das vorliegende
                Beispiel funktioniert, sollte.
            </p>

            <p>
                Auch wenn es, wie im Beispiel (3) gezeigt, möglich ist mittels einer anonymen Funktion welche die
                gewünschten Funktionen aufruft, mehrere Funktionen aufzurufen, um auf ein Event zu reagieren, sollte
                lieber ein Event-Listener definiert werden.
            </p>
        </chapter>

        <chapter id="ereignisse-dom-event-listener" title="DOM-Event-Listener">
            <p>
                Diese wurden im Jahr 2000 als Teil der zweiten Version der DOM-Spezifikation eingeführt
                <a href="https://www.w3.org/TR/DOM-Level-2-Events/Overview.html"/> und sind seitdem der Standardweg
                für die Ereignisbehandlung und der empfohlene Weg, auf Ereignisse zu reagieren. Der Grund: Sie werden
                wie DOM-Event-Handler innerhalb des JavaScript-Codes definiert, ermöglichen es aber zusätzlich, mehrere
                Funktionen für ein einzelnes Ereignis zu definieren.
            </p>

            <p>
                Oft werden die Begriffe Event-Handler und Event-Listener in der Literatur synonym verwendet. Im Falle
                von JavaScript wird jedoch, wie oben beschrieben, zwischen den beiden Begriffen unterschieden. Das
                heißt, eine Funktion, die als HTML-Event-Handler oder als DOM-Event-Handler definiert wurde, nenne ich
                im Folgenden auch Event-Handler, eine Funktion, die als Event-Listener definiert wurde, dementsprechend
                Event-Listener.
            </p>

            <note>
                <p>
                    <b>
                        Die Methode »attachEvent()«
                    </b>
                </p>

                <p>
                    Die Methode <code>addEventListener()</code> wird in älteren Versionen des Internet Explorers nicht
                    unterstützt. Sollte man innerhalb von fremdem Code einmal über die Methode
                    <code>attachEvent()</code> stoßen, muss man sich nicht wundern, denn: Dabei handelt es sich um eine
                    proprietäre Methode des Internet Explorers, die aber kein Bestandteil irgendeines Standards ist und
                    somit in der Regel nicht verwendet werden sollte.
                </p>
            </note>

            <code-block lang="javascript">
                <![CDATA[
                    function init() {
                      let element = document.getElementById('age');      // Element holen
                      element.addEventListener(                          // Event-Listener registrieren
                        'blur',                                          // Name des Events
                        checkAgeNotNegative,                             // Name des Event-Listeners
                        false                                            // Ereignisfluss
                      );
                    }
                ]]>
            </code-block>

            <chapter id="ereignisse-dom-event-listener-mehrere" title="Mehrere Event-Listener">
                <p>
                    Die Verwendung von Event-Listenern bzw. der Methode <code>addEventListener()</code> ist gegenüber
                    Event-Handlern deutlich flexibler, da nicht nur eine einzelne Funktion angegeben werden kann,
                    sondern beliebig viele Funktionen.
                </p>

                <code-block lang="javascript">
                    <![CDATA[
                        function init() {
                          let element = document.getElementById('age');   // Element holen
                          element.addEventListener(                       // Event-Listener registrieren
                            'blur',                                       // Name des Events
                            clearMessage                                  // Name des Event-Listeners
                          );
                          element.addEventListener(                       // Event-Listener registrieren
                            'blur',                                       // Name des Events
                            checkAgeNotNegative                           // Name des Event-Listeners
                          );
                          element.addEventListener(                       // Event-Listener registrieren
                            'blur',                                       // Name des Events
                            checkAgeIsNumber                              // Name des Event-Listeners
                          );
                        }
                    ]]>
                </code-block>
            </chapter>

            <chapter id="ereignisse-dom-event-listener-entfernen" title="Event-Listener entfernen">
                <p>
                    Event-Listener, die für ein Ereignis einem Element hinzugefügt wurden, können über die Methode
                    <code>removeEventListener()</code> auch wieder entfernt werden. Als Parameter wird dabei der Name
                    des Events und der Event-Listener übergeben, der entfernt werden soll.
                </p>

                <code-block lang="javascript">
                    <![CDATA[
                        element.removeEventListener('blur', checkAgeNotNegative);
                        element.removeEventListener('blur', checkAgeIsNumber);
                    ]]>
                </code-block>
            </chapter>

            <chapter id="ereignisse-dom-event-listener-informationen-eines-ereignisses"
                     title="Auf Informationen eines Ereignisses zugreifen">
                <p>
                    Innerhalb einer Funktion, die als Event-Handler oder als Event-Listener registriert wurde, hat man
                    die Möglichkeit, auf bestimmte Informationen des ausgelösten Ereignisses zuzugreifen, und zwar über
                    einen Parameter, welcher beim Aufruf der entsprechenden Funktion übergeben wird. Jedes Ereignis wird
                    dabei durch einen bestimmten Objekttyp repräsentiert, beispielsweise Mausereignisse durch den
                    Objekttyp <code>MouseEvent</code> oder Tastaturereignisse durch den Objekttyp
                    <code>KeyboardEvent</code>. Alle diese Objekttypen haben einen gemeinsamen (»Ober«-) Typ, von dem
                    sie ableiten, und zwar den Typ <code>Event</code>. Die Eigenschaften, die durch diesen Typ
                    bereitgestellt werden, sind in folgenden Tabelle aufgelistet.
                </p>

                <table style="header-row">
                    <tr>
                        <td>
                            Eigenschaft
                        </td>
                        <td>
                            Beschreibung
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code>
                                bubbles
                            </code>
                        </td>
                        <td>
                            Enthält Angabe darüber, ob ein Event im DOM-Baum hochsteigt oder nicht.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code>
                                cancelable
                            </code>
                        </td>
                        <td>
                            Enthält Angabe darüber, ob ein Event abgebrochen werden kann oder nicht.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code>
                                currentTarget
                            </code>
                        </td>
                        <td>
                            Enthält eine Referenz auf das aktuelle Ziel des Events.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code>
                                defaultPrevented
                            </code>
                        </td>
                        <td>
                            Enthält Angabe darüber, ob auf dem Event die Methode <code>preventDefault()</code>
                            aufgerufen wurde oder nicht.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code>
                                eventPhase
                            </code>
                        </td>
                        <td>
                            <p>
                                Enthält einen Zahlenwert, der die derzeitige Phase repräsentiert, in der sich das Event
                                momentan befindet. Mögliche Werte sind:
                            </p>

                            <list>
                                <li>
                                    <code>0</code> (bzw. <code>Event.NONE</code>)
                                </li>
                                <li>
                                    <code>1</code> (bzw. <code>Event.CAPTURING_PHASE</code>)
                                </li>
                                <li>
                                    <code>2</code> (bzw. <code>Event.AT_TARGET</code>)
                                </li>
                                <li>
                                    <code>3</code> (bzw. <code>Event.BUBBLING_PHASE</code>)
                                </li>
                            </list>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code>
                                target
                            </code>
                        </td>
                        <td>
                            Enthält eine Referenz auf das ursprüngliche Ziel des Events.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code>
                                timeStamp
                            </code>
                        </td>
                        <td>
                            Enthält den Zeitpunkt, an dem das Event ausgelöst wurde.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code>
                                type
                            </code>
                        </td>
                        <td>
                            Enthält den Namen des Events.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code>
                                isTrusted
                            </code>
                        </td>
                        <td>
                            Gibt an, ob das Event durch den Browser (beispielsweise durch den Klick auf einen Button)
                            oder durch JavaScript-Code ausgelöst wurde.
                        </td>
                    </tr>
                </table>

                <code-block collapsed-title="Beispiel" collapsible="true" lang="javascript">
                    <![CDATA[
                        function buttonClicked(event) {
                          console.log(event.bubbles);           // true
                          console.log(event.cancelable);        // true
                          console.log(event.currentTarget);     // <input>
                          console.log(event.defaultPrevented);  // false
                          console.log(event.eventPhase);        // 2
                          console.log(event.target);            // <input>
                          console.log(event.timeStamp);         // z. B. 1453232649902
                          console.log(event.type);              // "click"
                          console.log(event.isTrusted);         // true
                        }

                        function init() {
                          let element = document.getElementById('button');   // Button holen
                          element.addEventListener(                          // Event-Listener registrieren
                            'click',                                         // Name des Events
                            buttonClicked,                                   // Name des Event-Listeners
                            false                                            // Ereignisfluss
                          );
                        }

                        document.addEventListener('DOMContentLoaded', init);
                    ]]>
                </code-block>
            </chapter>
        </chapter>
    </chapter>

    <chapter id="typen" title="Die verschiedenen Typen von Ereignissen">
        <p>
            Innerhalb einer Webanwendung können verschiedene Arten von Ereignissen auftreten. Im Wesentlichen lassen
            sich dabei u.a. folgende Arten unterscheiden:
        </p>

        <list type="bullet">
            <li>
                Ereignisse bei Interaktion mit der Maus
            </li>
            <li>
                Ereignisse bei Interaktion mit Tastatur oder Textfeldern
            </li>
            <li>
                Ereignisse beim Arbeiten mit Formularen
            </li>
            <li>
                Ereignisse beim Fokussieren von Elementen
            </li>
            <li>
                Ereignisse bezüglich der Nutzerschnittstelle
            </li>
            <li>
                Ereignisse bei mobilen Endgeräten
            </li>
        </list>

        <chapter id="typen-maus" title="Ereignisse bei Interaktion mit der Maus">
            <p>

            </p>

            <table style="header-row">
                <tr>
                    <td>
                        Ereignis
                    </td>
                    <td>
                        Beschreibung
                    </td>
                    <td>
                        Event
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            click
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn über einem Element die Maustaste gedrückt und wieder losgelassen wurde.
                    </td>
                    <td>
                        <code>
                            MouseEvent
                        </code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            dblclick
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn über einem Element die Maustaste zweimal gedrückt und wieder losgelassen
                        wurde.
                    </td>
                    <td>
                        <code>
                            MouseEvent
                        </code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            contextMenu
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn ein Kontextmenü (in der Regel über den rechten Mausknopf) geöffnet wurde.
                    </td>
                    <td>
                        <code>
                            MouseEvent
                        </code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            mousedown
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn über einem Element die Maustaste gedrückt wurde.
                    </td>
                    <td>
                        <code>
                            MouseEvent
                        </code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            mouseup
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn über einem Element die Maustaste losgelassen wurde.
                    </td>
                    <td>
                        <code>
                            MouseEvent
                        </code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            mousemove
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn die Maus verschoben wurde.
                    </td>
                    <td>
                        <code>
                            MouseEvent
                        </code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            mouseover
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn die Maus über ein Element bewegt wird (siehe auch Hinweiskasten).
                    </td>
                    <td>
                        <code>
                            MouseEvent
                        </code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            mouseout
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn die Maus von einem Element fortbewegt wird (siehe auch Hinweiskasten).
                    </td>
                    <td>
                        <code>
                            MouseEvent
                        </code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            mouseenter
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn die Maus über ein Element bewegt wird (siehe auch Hinweiskasten).
                    </td>
                    <td>
                        <code>
                            MouseEvent
                        </code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            mouseleave
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn die Maus von einem Element fortbewegt wird (siehe auch Hinweiskasten).
                    </td>
                    <td>
                        <code>
                            MouseEvent
                        </code>
                    </td>
                </tr>
            </table>

            <note>
                <p>
                    <b>
                        »mouseenter/mouseleave« vs. »mouseover/mouseout«
                    </b>
                </p>

                <p>
                    Die Ereignisse <code>mouseenter</code> und <code>mouseover</code> sowie <code>mouseout</code> und
                    <code>mouseleave</code> sind auf den ersten Blick recht ähnlich. Erstere beiden werden ausgelöst,
                    wenn die Maus über ein Element bewegt wird, Letztere beiden, wenn die Maus von einem Element
                    fortbewegt wird. Die Events <code>mouseenter</code> und <code>mouseleave</code> werden nur
                    ausgelöst, wenn der äußere Rand des jeweiligen Elements überschritten wird, <code>mouseover</code>
                    und <code>mouseout</code> dagegen zusätzlich auch, wenn innerhalb des jeweiligen Elements ein
                    anderes Element liegt und die Maus darüber bewegt (also von dem äußeren Element wegbewegt) oder von
                    dem inneren Element wegbewegt (und über das äußere Element bewegt) wird.
                </p>
            </note>

            <img alt="Mausereignisse" src="js-dynamische-inhalte-ereignisse-mouse-events.png"/>

            <p>
                Alle Mausereignisse sind vom Objekttyp <code>MouseEvent</code>. Dieser Typ stellt (neben den
                Eigenschaften, die durch den (»Ober«-)Typ Event vorgegeben sind) folgende Eigenschaften zur Verfügung:
            </p>

            <table style="header-row">
                <tr>
                    <td>
                        Eigenschaft
                    </td>
                    <td>
                        Beschreibung
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            altKey
                        </code>
                    </td>
                    <td>
                        Enthält boolesche Angabe darüber, ob die (Alt)-Taste beim Auslösen des Ereignisses gedrückt war.
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            button
                        </code>
                    </td>
                    <td>
                        Enthält die Nummer der Maustaste, die bei Auslösen des Ereignisses gedrückt war.
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            buttons
                        </code>
                    </td>
                    <td>
                        Enthält eine Zahl, welche die gedrückten Maustasten repräsentiert, die bei Auslösen des
                        Ereignisses gedrückt waren. Hierbei repräsentiert die Zahl 1 die linke Maustaste, die Zahl 2 die
                        rechte Maustaste, die Zahl 4 das Mausrad bzw. die mittlere Maustaste, die Zahl 8 die vierte
                        Maustaste und die Zahl 16 die fünfte Maustaste. Wurden beim Auslösen des Ereignisses mehrere
                        Tasten gedrückt, enthält buttons die Summe der jeweiligen Zahlen.
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            clientX
                        </code>
                    </td>
                    <td>
                        die <code>x</code>-Koordinate (bezogen auf den DOM-Inhalt), an der sich der Mauszeiger beim
                        Auslösen des Ereignisses befindet
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            clientY
                        </code>
                    </td>
                    <td>
                        die <code>y</code>-Koordinate (bezogen auf den DOM-Inhalt), an der sich der Mauszeiger beim
                        Auslösen des Ereignisses befindet
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            ctrlKey
                        </code>
                    </td>
                    <td>
                        Enthält boolesche Angabe darüber, ob die (Ctrl)-Taste beim Auslösen des Ereignisses gedrückt
                        war.
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            metaKey
                        </code>
                    </td>
                    <td>
                        Enthält boolesche Angabe darüber, ob die (Meta)-Taste beim Auslösen des Ereignisses gedrückt war
                        (unter macOS die (cmd)-Taste, unter Windows die (WIN)-Taste).
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            movementX
                        </code>
                    </td>
                    <td>
                        die <code>x</code>-Koordinate relativ zu der vorherigen <code>x</code>-Koordinate, die bei
                        Auslösen des letzten <code>mousemove</code>-Ereignisses auftrat
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            movementY
                        </code>
                    </td>
                    <td>
                        die <code>y</code>-Koordinate relativ zu der vorherigen <code>y</code>-Koordinate, die bei
                        Auslösen des letzten <code>mousemove</code>-Ereignisses auftrat
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            region
                        </code>
                    </td>
                    <td>
                        Enthält die ID der Region (bzw. des Elements), auf die sich das Ereignis bezieht.
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            relatedTarget
                        </code>
                    </td>
                    <td>
                        Enthält das »verwandte« Zielelement, welches thematisch mit dem aktuellen Zielelement durch das
                        Ereignis »verbunden« ist. Wenn der Mauszeiger beispielsweise von einem Element weg- und auf ein
                        anderes Element »gezogen« wird, wird für Letzteres ein <code>mouseenter</code>-Ereignis
                        ausgelöst. Die Eigenschaft relatedTarget bezieht sich dann auf das Element, von dem der
                        Mauszeiger »weggezogen« wurde.
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            screenX
                        </code>
                    </td>
                    <td>
                        die <code>x</code>-Koordinate (bezogen auf den Bildschirm), an der sich der Mauszeiger beim
                        Auslösen des Ereignisses befindet
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            screenY
                        </code>
                    </td>
                    <td>
                        die <code>y</code>-Koordinate (bezogen auf den Bildschirm), an der sich der Mauszeiger beim
                        Auslösen des Ereignisses befindet
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            shiftKey
                        </code>
                    </td>
                    <td>
                        Enthält boolesche Angabe darüber, ob die (Shift)-Taste beim Auslösen des Ereignisses gedrückt
                        war.
                    </td>
                </tr>
            </table>

            <tip>
                Mehr Details zu Eigenschaften und Ereignisse von Events:
                <a href="https://developer.mozilla.org/en-US/docs/Web/API/Event"/>.
            </tip>
        </chapter>

        <chapter id="typen-tastatur" title="Ereignisse bei Interaktion mit Tastatur oder Textfeldern">
            <p>
                Auch bei der Verwendung der Tastatur werden Ereignisse ausgelöst. Die Ereignisse, die bei Interaktion
                mit der Tastatur ausgelöst werden, sind dabei vom Typ <code>KeyboardEvent</code>.
            </p>

            <table style="header-row">
                <tr>
                    <td>
                        Ereignis
                    </td>
                    <td>
                        Beschreibung
                    </td>
                    <td>
                        Event
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            keydown
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn eine Taste gedrückt wurde. Wird eine Taste längere Zeit gedrückt, wird das
                        Ereignis mehrmals ausgelöst.
                    </td>
                    <td>
                        <code>
                            KeyboardEvent
                        </code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            keyup
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn eine Taste losgelassen wurde.
                    </td>
                    <td>
                        <code>
                            KeyboardEvent
                        </code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            keypress
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn per Tastatur ein Zeichen eingefügt wird. Auch hier gilt: Wird eine Taste
                        längere Zeit gedrückt, wird das Ereignis mehrmals ausgelöst.
                    </td>
                    <td>
                        <code>
                            KeyboardEvent
                        </code>
                    </td>
                </tr>
            </table>
        </chapter>

        <chapter id="typen-formulare" title="Ereignisse beim Arbeiten mit Formularen">
            <table style="header-row">
                <tr>
                    <td>
                        Ereignis
                    </td>
                    <td>
                        Beschreibung
                    </td>
                    <td>
                        Event
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            input
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn der Wert eines <code>&lt;input&gt;</code>-, eines
                        <code>&lt;textarea&gt;</code>-Elements oder eines Elements mit
                        <code>contenteditable</code>-Attribut geändert wurde.
                    </td>
                    <td>
                        <code>
                            Event
                        </code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            change
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn der ausgewählte Wert einer Auswahlliste, einer Checkbox oder einer Gruppe
                        von Radiobuttons geändert wurde.
                    </td>
                    <td>
                        <code>
                            Event
                        </code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            submit
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn ein Formular abgeschickt wurde.
                    </td>
                    <td>
                        <code>
                            Event
                        </code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            reset
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn ein Formular zurückgesetzt wurde (über eine Zurücksetzen-Schaltfläche).
                    </td>
                    <td>
                        <code>
                            Event
                        </code>
                    </td>
                </tr>
            </table>
        </chapter>

        <chapter id="typen-fokus" title="Ereignisse beim Fokussieren von Elementen">
            <p>
                Auch jedes Mal, wenn ein Element auf einer Webseite den Fokus bekommt (beispielsweise indem man über die
                (TAB)-Taste zu dem Element navigiert) oder wenn es den Fokus verliert, wird ein Event ausgelöst.
            </p>

            <table style="header-row">
                <tr>
                    <td>
                        Ereignis
                    </td>
                    <td>
                        Beschreibung
                    </td>
                    <td>
                        Event
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            focus
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn ein Element den Fokus bekommt.
                    </td>
                    <td>
                        <code>
                            FocusEvent
                        </code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            blur
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn ein Element den Fokus verliert.
                    </td>
                    <td>
                        <code>
                            FocusEvent
                        </code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            focusin
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn ein Element den Fokus bekommt. Im Gegensatz zum Ereignis focus steigt
                        dieses Ereignis auf.
                    </td>
                    <td>
                        <code>
                            FocusEvent
                        </code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            focusout
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn ein Element den Fokus verliert. Im Gegensatz zum Ereignis blur steigt
                        dieses Ereignis auf.
                    </td>
                    <td>
                        <code>
                            FocusEvent
                        </code>
                    </td>
                </tr>
            </table>
        </chapter>

        <chapter id="typen-nutzerschnittstelle" title="Ereignisse bezüglich der Nutzerschnittstelle">
            <p>
                Neben den vorhin vorgestellten Ereignissen, gibt es noch eine Reihe weiterer, die sich grob in die
                Kategorie »Ereignisse der Nutzerschnittstelle« einordnen lassen (wobei die meisten, aber nicht alle
                dieser Ereignisse durch den Typ UIEvent repräsentiert werden).
            </p>

            <table style="header-row">
                <tr>
                    <td>
                        Ereignis
                    </td>
                    <td>
                        Beschreibung
                    </td>
                    <td>
                        Event
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            load
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn das Laden der Webseite abgeschlossen ist.
                    </td>
                    <td>
                        <code>
                            UIEvent
                        </code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            unload
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn eine Webseite »weggeladen« wird, sprich, in der Regel dann, wenn eine neue
                        Webseite in dem entsprechenden Browserfenster angefordert wurde.
                    </td>
                    <td>
                        <code>
                            UIEvent
                        </code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            abort
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn das Laden einer Ressource abgebrochen wird.
                    </td>
                    <td>
                        <code>
                            UIEvent
                        </code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            error
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn es ein Problem beim Laden der Webseite gibt, beispielsweise einen
                        JavaScript-Fehler.
                    </td>
                    <td>
                        <code>
                            UIEvent
                        </code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            select
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn Text auf einer Webseite ausgewählt wurde.
                    </td>
                    <td>
                        <code>
                            UIEvent
                        </code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            resize
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn die Größe des Browserfensters verändert wurde.
                    </td>
                    <td>
                        <code>
                            UIEvent
                        </code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            scroll
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn nach oben oder nach unten gescrollt wurde.
                    </td>
                    <td>
                        <code>
                            UIEvent
                        </code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            beforeunload
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, kurz bevor eine Webseite »weggeladen« wird, sprich, in der Regel dann, wenn eine
                        neue Webseite in dem entsprechenden Browserfenster angefordert wurde.
                    </td>
                    <td>
                        <code>
                            BeforeUnloadEvent
                        </code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            DOMContentLoaded
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn der DOM-Baum vollständig geladen wurde.
                    </td>
                    <td>
                        <code>
                            Event
                        </code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            cut
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn Inhalte aus einem Formularfeld ausgeschnitten wurden (beispielsweise über
                        das Tastaturkürzel (cmd) + (x)).
                    </td>
                    <td>
                        <code>
                            ClipboardEvent
                        </code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            copy
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn Inhalte aus einem Formularfeld kopiert wurden (beispielsweise über das
                        Tastaturkürzel (cmd) + (c)).
                    </td>
                    <td>
                        <code>
                            ClipboardEvent
                        </code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            paste
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn Inhalte in ein Formularfeld eingefügt wurden (beispielsweise über das
                        Tastaturkürzel (cmd) + (v)).
                    </td>
                    <td>
                        <code>
                            ClipboardEvent
                        </code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            select
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn in einem Formularfeld Text markiert wurde.
                    </td>
                    <td>
                        <code>
                            ClipboardEvent
                        </code>
                    </td>
                </tr>
            </table>
        </chapter>

        <chapter id="typen-mobile" title="Ereignisse bei mobilen Endgeräten">
            <p>
                Bei der Verwendung von mobilen Endgeräten (Smartphones, Tablets etc.) werden eine Reihe weiterer
                Ereignisse ausgelöst. Hintergrund ist vor allem die Tatsache, dass sich solche Endgeräte ganz anders
                bedienen lassen als herkömmliche Laptops oder Desktopcomputer: Statt Maus und Tastatur verwendet man
                hier ja in der Regel die Finger oder spezielle Eingabestifte, um mit der entsprechenden Webseite zu
                interagieren.
            </p>

            <p>
                Ausgehend von diesen – sehr auf die Berührung des Displays ausgelegten – Interaktionsformen gibt es
                demnach entsprechende Ereignisse, um Berührungen auf dem Display des Endgeräts festzustellen und darauf
                reagieren zu können.
            </p>

            <p>
                Darüber hinaus spielen bei mobilen Endgeräten auch andere Dinge eine Rolle, wie beispielsweise die
                Neigung bzw. die Ausrichtung des Geräts, sprich, ist es seitlich gekippt oder nach vorne oder hinten
                geneigt? Auch auf die Bewegung eines mobilen Endgeräts lässt sich über Ereignisse reagieren.
            </p>

            <table style="header-row">
                <tr>
                    <td>
                        Ereignis
                    </td>
                    <td>
                        Beschreibung
                    </td>
                    <td>
                        Event
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            orientationchange
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn sich die Orientierung des Eingabegeräts ändert.
                    </td>
                    <td>
                        <code>
                            Event
                        </code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            deviceorientation
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn neue Daten bezüglich der Orientierung des Endgeräts zur Verfügung stehen.
                    </td>
                    <td>
                        <code>
                            DeviceOrientationEvent
                        </code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            devicemotion
                        </code>
                    </td>
                    <td>
                        Wird in regelmäßigen Abständen ausgelöst und gibt dann die Beschleunigungskraft an, die auf das
                        Endgerät wirkt.
                    </td>
                    <td>
                        <code>
                            DeviceMotionEvent
                        </code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            touchstart
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn das Eingabegerät (in der Regel ein Finger) das Display berührt.
                    </td>
                    <td>
                        <code>
                            TouchEvent
                        </code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            touchend
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn das Eingabegerät die Berührung beendet, mit anderen Worten: wenn der Finger
                        vom Display genommen wurde.
                    </td>
                    <td>
                        <code>
                            TouchEvent
                        </code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            touchmove
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn das Eingabegerät über das Display bewegt wurde.
                    </td>
                    <td>
                        <code>
                            TouchEvent
                        </code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>
                            touchcancel
                        </code>
                    </td>
                    <td>
                        Wird ausgelöst, wenn das Tracking der Berührung unterbrochen wurde.
                    </td>
                    <td>
                        <code>
                            TouchEvent
                        </code>
                    </td>
                </tr>
            </table>
        </chapter>
    </chapter>

    <chapter id="ereignisfluss" title="Den Ereignisfluss verstehen und beeinflussen">
        <p>
            Immer wenn ein Ereignis ausgelöst wird, durchläuft es mehrere sogenannte Event-Phasen. Grundlegend
            unterscheidet man bezüglich des Ereignisflusses zunächst einmal folgende drei Phasen:
        </p>

        <list type="decimal">
            <li>
                <b>Capturing-Phase:</b> In dieser Phase »steigt« das Ereignis ausgehend vom obersten Knoten im DOM-Baum
                (dem Dokumentknoten) hinab bis zu dem Element, für welches das Ereignis ausgelöst wurde, dem
                Zielelement.
            </li>
            <li>
                <b>Target-Phase:</b> In dieser Phase wird das Ereignis am Zielelement ausgelöst.
            </li>
            <li>
                <b>Bubbling-Phase:</b> In dieser Phase »steigt« das Ereignis vom Zielelement im DOM-Baum wieder hinauf
                zum Dokumentknoten.
            </li>
        </list>

        <chapter id="ereignisfluss-capturing-bubbling" title="Die Capturing- &amp; Bubbling-Phase">
            <table style="header-row">
                <tr>
                    <td>
                        Capturing-Phase
                    </td>
                    <td>
                        Bubbling-Phase
                    </td>
                </tr>
                <tr>
                    <td>
                        <img alt="Eventfluss - Capturing-Phase"
                             src="js-dynamische-inhalte-ereignisse-ereignisfluss-capturing-phase.png"/>
                    </td>
                    <td>
                        <img alt="Eventfluss - Bubbling-Phase"
                             src="js-dynamische-inhalte-ereignisse-ereignisfluss-bubbling-phase.png"/>
                    </td>
                </tr>
            </table>

            <p>
                Während der Capturing-Phase und der Bubbling-Phase löst das Ereignis dabei die Event-Handler bzw.
                Event-Listener der Reihe nach aus, die am jeweiligen Element, an dem sich das Ereignis gerade befindet,
                für dieses Ereignis registriert wurden.
            </p>

            <p>
                Die Capturing-Phase und die Bubbling-Phase gehen auf unterschiedliche Meinungen der unterschiedlichen
                Browserhersteller zurück, die mittlerweile schon sehr lange zurückliegen. Während der damalige
                Browserhersteller Netscape der Meinung war, dass ein Ereignis immer zuerst die
                Event-Handler/Event-Listener am Element aufrufen sollte, welches weiter oben im DOM-Baum liegt, und man
                daher dort nach dem sogenannten Event-Capturing vorging, welches nur aus der Capturing-Phase (und der
                Target-Phase) bestand, war Microsoft anderer Meinung: Im Internet Explorer löste ein Ereignis zuerst die
                Event-Handler/Event-Listener aus, die am Zielelement definiert waren, d.h., hier folgte man dem
                Event-Bubbling, welches wiederum nur aus der Bubbling-Phase (und der Target-Phase) bestand.
            </p>
        </chapter>

        <chapter id="ereignisfluss-w3c-standard" title="Der W3C-Standard: Capturing-, Target- und Bubbling-Phase">
            <img alt="Ereignisfluss - Der W3C-Standard"
                 src="js-dynamische-inhalte-ereignisse-ereignisfluss-w3c-standard.png"/>

            <p>
                Mittlerweile ist der Ereignisfluss jedoch schon seit einiger Zeit vom W3C standardisiert (siehe
                <a href="https://www.w3.org/TR/DOM-Level-3-Events/#event-flow"/>), wobei darauf geachtet wurde, beide
                Phasen zu einem Ereignisflussmodell zusammenzufassen. Mit anderen Worten: Wird ein Ereignis ausgelöst,
                durchläuft es zunächst die Capturing-Phase, führt alle Event-Handler/Event-Listener aus, die für diese
                Phase registriert wurden, geht dann in die Target-Phase, in welcher die Event-Handler/Event-Listener
                ausgeführt werden, die am Zielelement registriert wurden, und durchläuft anschließend die
                Bubbling-Phase, in der nun alle Event-Handler/Event-Listener ausgeführt werden, die für diese Phase
                registriert wurden.
            </p>
        </chapter>

        <chapter id="ereignisfluss-unterbrechen" title="Den Ereignisfluss unterbrechen">
            <p>
                Wird ein Event ausgelöst, können Aktionen, die normalerweise als Folge des Events eintreten, verhindert
                werden:
            </p>

            <list type="bullet">
                <li>
                    Über die Methode <code>stopPropagation()</code> kann verhindert werden, dass das entsprechende Event
                    im DOM-Baum weiter zum nächsten Element gereicht wird und dabei Aktionen (bzw. entsprechende
                    Event-Handler und Event-Listener) auf anderen Elementen auslöst.
                </li>
                <li>
                    Über die Methode <code>preventDefault()</code> kann dagegen verhindert werden, dass bei Eintreten
                    eines Events die Standardaktionen des Browsers ausgeführt werden. Zum Beispiel kann verhindert
                    werden, dass der Browser bei Klick auf einen Link diesen öffnet oder bei Klick auf einen
                    Submit-Button ein Formular abschickt. Bei Event-Handlern (im Gegensatz zu Event-Listenern) der
                    Aufruf dieser Methode nicht möglich ist. Stattdessen bestimmt sich dies über den Rückgabewert der
                    als Event-Handler definierten Funktion: Ist dieser <code>false</code>, werden die Standardaktionen
                    verhindert, ist er dagegen <code>true</code> oder wird kein Rückgabewert angegeben, werden die
                    Standardfunktionen ausgeführt.
                </li>
                <li>
                    Über die Methode <code>stopImmediatePropagation()</code> kann das Weiterleiten eines Ereignisses
                    auch für die an einem einzelnen Element registrierten Event-Listener verhindert werden. Die Methode
                    <code>stopPropagation()</code> verhindert nicht das Weiterleiten des Ereignisses zwischen
                    Event-Listenern, die für das entsprechende Ereignis an ein und demselben Element registriert sind.
                    Sie verhindert nur das Weiterleiten an solche Event-Listener, die an anderen Elementen für das
                    Ereignis registriert wurden.
                </li>
            </list>

            <note>
                <p>
                    <b>
                        Rückgabewert bei Event-Handlern
                    </b>
                </p>

                <p>
                    Der Rückgabewert <code>false</code> in einer als Event-Handler definierten Funktion verhindert nicht
                    nur die Standardaktionen des Browsers, die für das jeweilige Ereignis normalerweise ausgeführt
                    werden, sondern auch das Weiterleiten des Ereignisses. Der Rückgabewert <code>false</code> kommt
                    quasi einem Aufruf von <code>preventDefault()</code> und <code>stopPropagation()</code> bei
                    Event-Listenern gleich.
                </p>
            </note>

            <tip>
                <a href="https://www.youtube.com/embed/F1anRyL37lE?wmode=opaque"/>
            </tip>
        </chapter>
    </chapter>

    <chapter id="ereignisse-programmatisch-auslösen" title="Ereignisse programmatisch auslösen">

    </chapter>

    <chapter id="quellen" title="Quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836256971, "JavaScript", Philip Ackermann, 2019
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://developer.mozilla.org/en-US/docs/Web/API/Event"/>, 2023-07-31 08:15
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="http://www.w3.org/TR/DOM-Level-3-Events/#event-flow"/>, 2023-07-31 17:00
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://www.youtube.com/watch?v=F1anRyL37lE"/>, 2023-08-01 08:00
        </tip>
    </chapter>
</topic>