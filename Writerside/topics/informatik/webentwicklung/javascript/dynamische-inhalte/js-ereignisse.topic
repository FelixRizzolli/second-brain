<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="js-ereignisse"
       title="Ereignisse"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">
    <show-structure depth="2" for="chapter,procedure"/>

    <!-- TODO: migrate from Confluence -->
    <chapter id="grundlagen" title="Grundlagen">
        <p>
            Das Konzept der ereignisgesteuerten Programmierung funktioniert im Wesentlichen wie folgt: Auf der einen
            Seite hat man sogenannte Auslöser von Ereignissen (auch Event-Emitter genannt). Das können im Falle von
            grafischen Benutzeroberflächen (User Interfaces, kurz UI) beispielsweise Schaltflächen sein oder Textfelder
            oder irgendwelche anderen UI-Komponenten. Wird auf eine Schaltfläche geklickt oder Text in ein Textfeld
            eingegeben, wird im Hintergrund von der jeweiligen Komponente (der Schaltfläche oder dem Textfeld) ein
            Ereignis (Event) ausgelöst.
        </p>

        <p>
            Nachdem ein Ereignis ausgelöst wurde, wird es in eine sogenannte Event-Queue eingereiht, welche dafür sorgt,
            dass Events, die zuerst ausgelöst wurden, auch als Erstes behandelt werden. Über die sogenannte Event-Loop
            wird fortlaufend überprüft, ob es in der Event-Queue ein neues Ereignis gibt, und – falls dies der Fall ist
            – das entsprechende Event an sogenannte Event-Handler weitergeleitet.
        </p>

        <p>
            In JavaScript sind Event-Handler einfache Funktionen, über die auf ein ausgelöstes Event reagiert werden
            kann. So kann beispielsweise auf eine Schaltfläche geklickt werden und es wird eine definierte Funktion
            aufgerufen.
        </p>

        <img alt="Ereignisse in JavaScript" src="js-dynamische-inhalte-ereignisse.png"/>

        <p>
            Das Prinzip der ereignisgesteuerten Programmierung ist dabei jedoch nicht auf Interaktionen mit einer
            Benutzeroberfläche beschränkt. Es gibt in der JavaScript-Entwicklung auch Ereignisse, die ausgelöst werden,
            ohne dass man als Nutzer mit der Benutzeroberfläche interagiert, sprich Ereignisse, die nicht durch den
            Nutzer, sondern programmatisch ausgelöst werden.
        </p>
    </chapter>

    <chapter id="ereignisse" title="Ereignisse verarbeiten und auslösen">

        <chapter id="ereignisse-reagieren" title="Auf Ereignisse reagieren">

            <chapter id="ereignisse-html-event-handler" title="HTML-Event-Handler (DEPRECATED)">

            </chapter>

            <chapter id="ereignisse-dom-event-handler" title="DOM-Event-Handler">

            </chapter>

            <chapter id="ereignisse-dom-event-listener" title="DOM-Event-Listener">

                <chapter id="ereignisse-dom-event-listener-mehrere" title="Mehrere Event-Listener">

                </chapter>

                <chapter id="ereignisse-dom-event-listener-entfernen" title="Event-Listener entfernen">

                </chapter>

                <chapter id="ereignisse-dom-event-listener-informationen-eines-ereignisses"
                         title="Auf Informationen eines Ereignisses zugreifen">

                </chapter>
            </chapter>
        </chapter>
    </chapter>

    <chapter id="typen" title="Die verschiedenen Typen von Ereignissen">

        <chapter id="typen-maus" title="Ereignisse bei Interaktion mit der Maus">

        </chapter>

        <chapter id="typen-tastatur" title="Ereignisse bei Interaktion mit Tastatur oder Textfeldern">

        </chapter>

        <chapter id="typen-formulare" title="Ereignisse beim Arbeiten mit Formularen">

        </chapter>

        <chapter id="typen-fokus" title="Ereignisse beim Fokussieren von Elementen">

        </chapter>

        <chapter id="typen-nutzerschnittstelle" title="Ereignisse bezüglich der Nutzerschnittstelle">

        </chapter>

        <chapter id="typen-mobile" title="Ereignisse bei mobilen Endgeräten">

        </chapter>
    </chapter>

    <chapter id="ereignisfluss" title="Den Ereignisfluss verstehen und beeinflussen">

        <chapter id="ereignisfluss-capturing-bubbling" title="Die Capturing- &amp; Bubbling-Phase">

        </chapter>

        <chapter id="ereignisfluss-w3c-standard" title="Der W3C-Standard: Capturing-, Target- und Bubbling-Phase">

        </chapter>

        <chapter id="ereignisfluss-unterbrechen" title="Den Ereignisfluss unterbrechen">

        </chapter>
    </chapter>

    <chapter id="ereignisse-programmatisch-auslösen" title="Ereignisse programmatisch auslösen">

    </chapter>

    <chapter id="quellen" title="Quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836256971, "JavaScript", Philip Ackermann, 2019
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://developer.mozilla.org/en-US/docs/Web/API/Event"/>, 2023-07-31 08:15
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="http://www.w3.org/TR/DOM-Level-3-Events/#event-flow"/>, 2023-07-31 17:00
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://www.youtube.com/watch?v=F1anRyL37lE"/>, 2023-08-01 08:00
        </tip>
    </chapter>
</topic>