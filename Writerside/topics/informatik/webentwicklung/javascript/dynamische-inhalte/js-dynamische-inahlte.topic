<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic help-id="js-dynamischeinahlte-ereignisse-formulare-browser;js-dynamischeinahlte"
       id="js-dynamische-inahlte"
       title="Dynamische Inhalte" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">
    <show-structure depth="2" for="chapter,procedure"/>

    <chapter id="aufbau" title="Aufbau einer Webseite">
        <p>
            Beim Aufruf einer Website wird vom Browser das DOM (Document Object Model) gebaut und in den Arbeitsspeicher
            geladen. Das DOM stellt die Komponenten einer Website hierarchisch in einer Baumdarstellung dar, welche auch
            als DOM-Baum bezeichnet wird. Ein DOM-Baum wiederum setzt sich aus sogenannten Knoten (engl.: <i>nodes</i>)
            zusammen, welche durch ihre hierarchische Anordnung den Aufbau einer Webseite widerspiegeln.
        </p>

        <p>
            Das DOM dient in erster Linie dazu, per JavaScript auf Inhalte der Webseite zugreifen zu können,
            beispielsweise um bestehende Inhalte zu verändern oder neue Inhalte hinzuzufügen.
        </p>

        <p>
            Insgesamt gibt es zwölf Typen von Knoten. Die vier wesentlichsten sind:
        </p>

        <list type="bullet">
            <li>
                <b>Der Dokumentknoten</b> steht für die gesamte Webseite und bildet die Wurzel des DOM-Baumes. Er wird
                durch das globale Objekt document repräsentiert. Dieses Objekt ist gleichzeitig das Einstiegsobjekt für
                jegliche Arbeiten mit dem DOM. Der Dokumentknoten wird auch als Wurzelknoten bezeichnet.
            </li>
            <li>
                <b>Die Elementknoten</b> repräsentieren einzelne HTML-Elemente einer Webseite.
            </li>
            <li>
                <b>Die Attributknoten</b> stehen für Attribute von HTML-Elementen.
            </li>
            <li>
                Der Text innerhalb von HTML-Elementen wird durch einen eigenen Knotentyp repräsentiert, die
                sogenannten <b>Textknoten</b>. Textknoten können selbst keine Kindknoten haben und sind damit
                zwangsweise Blätter in dem DOM-Baum.
            </li>
        </list>

        <p>
            Das DOM einer beliebigen Webseite kann wie folgt im Browser angezeigt werden:
        </p>

        <list type="bullet">
            <li>
                Google Chrome: <a href="https://developer.chrome.com/docs/devtools/dom/"/>
            </li>
            <li>
                Microsoft Edge:
                <a href="https://learn.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/dom/"/>
            </li>
            <li>
                Mozilla Firefox:
                <a href="https://firefox-source-docs.mozilla.org/devtools-user/dom_property_viewer/index.html"/>
            </li>
        </list>

        <chapter id="aufbau-dokumentknoten" title="Der Dokumentknoten">
            <p>
                Der Dokumentknoten stellt, wie bereits erwähnt, den Einstiegspunkt für das DOM dar und wird über das
                globale Objekt <code>document</code> repräsentiert, welches über verschiedene Eigenschaften und Methoden
                verfügt.
            </p>

            <table style="header-row">
                <tr>
                    <td>
                        Eigenschaft
                    </td>
                    <td>
                        Beschreibung
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>document.title</code>
                    </td>
                    <td>
                        Enthält den Titel des aktuellen Dokuments.
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>document.lastModified</code>
                    </td>
                    <td>
                        Enthält das Datum, an dem das Dokument zuletzt geändert wurde.
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>document.URL</code>
                    </td>
                    <td>
                        Enthält eine URL des aktuellen Dokuments.
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>document.domain</code>
                    </td>
                    <td>
                        Enthält die Domäne des aktuellen Dokuments.
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>document.cookie</code>
                    </td>
                    <td>
                        Enthält eine Liste aller Cookies für das Dokument.
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>document.forms</code>
                    </td>
                    <td>
                        Enthält eine Liste aller Formulare des Dokuments.
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>document.images</code>
                    </td>
                    <td>
                        Enthält eine Liste aller Bilder des Dokuments.
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>document.links</code>
                    </td>
                    <td>
                        Enthält eine Liste aller Links des Dokuments.
                    </td>
                </tr>
            </table>

            <p>
                Der Aufbau des Document Object Models, sprich, welche Eigenschaften und Methoden zur Verfügung stehen,
                welche Knotentypen es gibt etc., ist in der sogenannten DOM API, einer Spezifikation des W3C (World Wide
                Web Consortium) festgehalten. Diese API (Application Programming Interface) ist
                programmiersprachenunabhängig gehalten, d.h., es gibt nicht nur Implementierungen für JavaScript,
                sondern auch für andere Programmiersprachen wie Java oder C++.
            </p>

            <p>
                In NodeJS gibt es die globale Variable <code>document</code> nicht, da Node.js in der Regel nicht dazu
                verwendet wird, Webseiten zu rendern.
            </p>
        </chapter>
    </chapter>

    <chapter id="elemente-selektieren" title="Elemente selektieren">
        <p>
            Die Selektionsmethoden und Eigenschaften stehen nicht nur für den Dokumentknoten zur Verfügung, sondern auch
            für andere Knoten.
        </p>

        <table style="header-row">
            <tr>
                <td>
                    Eigenschaft/Methode
                </td>
                <td>
                    Beschreibung
                </td>
                <td>
                    Rückgabewert
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        getElementById()
                    </code>
                </td>
                <td>
                    Wählt ein Element anhand einer ID aus.
                </td>
                <td>
                    einzelnes Element
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        getElementsByClassName()
                    </code>
                </td>
                <td>
                    Wählt Elemente anhand eines Klassennamens aus.
                </td>
                <td>
                    Liste von Elementen
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        getElementsByTagName()
                    </code>
                </td>
                <td>
                    Wählt alle Elemente mit dem angegebenen Elementnamen aus.
                </td>
                <td>
                    Liste von Elementen
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        getElementsByName()
                    </code>
                </td>
                <td>
                    Wählt Elemente anhand ihres Namens aus.
                </td>
                <td>
                    Liste von Elementen
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        querySelector()
                    </code>
                </td>
                <td>
                    Gibt das erste Element zurück, das auf einen gegebenen CSS-Selektor passt.
                </td>
                <td>
                    einzelnes Element
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        querySelectorAll()
                    </code>
                </td>
                <td>
                    Gibt alle Elemente zurück, die auf einen gegebenen CSS-Selektor passen.
                </td>
                <td>
                    Liste von Elementen
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        parentElement
                    </code>
                </td>
                <td>
                    Gibt für einen Knoten das Elternelement zurück.
                </td>
                <td>
                    einzelnes Element
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        parentNode
                    </code>
                </td>
                <td>
                    Gibt für einen Knoten den Elternknoten zurück.
                </td>
                <td>
                    einzelner Knoten
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        previousElementSibling
                    </code>
                </td>
                <td>
                    Gibt für einen Knoten das vorhergehende Geschwisterelement zurück.
                </td>
                <td>
                    einzelnes Element
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        previousSibling
                    </code>
                </td>
                <td>
                    Gibt für einen Knoten den vorhergehenden Geschwisterknoten zurück.
                </td>
                <td>
                    einzelner Knoten
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        nextElementSibling
                    </code>
                </td>
                <td>
                    Gibt für einen Knoten das nachfolgende Geschwisterelement zurück.
                </td>
                <td>
                    einzelnes Element
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        nextSibling
                    </code>
                </td>
                <td>
                    Gibt für einen Knoten den nachfolgenden Geschwisterknoten zurück.
                </td>
                <td>
                    einzelner Knoten
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        firstElementChild
                    </code>
                </td>
                <td>
                    Gibt für einen Knoten das erste Kindelement zurück
                </td>
                <td>
                    einzelnes Element
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        firstChild
                    </code>
                </td>
                <td>
                    Gibt für einen Knoten den ersten Kindknoten zurück.
                </td>
                <td>
                    einzelner Knoten
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        lastElementChild
                    </code>
                </td>
                <td>
                    Gibt für einen Knoten das letzte Kindelement zurück.
                </td>
                <td>
                    einzelnes Element
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        lastChild
                    </code>
                </td>
                <td>
                    Gibt für einen Knoten den letzten Kindknoten zurück.
                </td>
                <td>
                    einzelner Knoten
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        childNodes
                    </code>
                </td>
                <td>
                    Gibt für einen Knoten alle Kindknoten zurück.
                </td>
                <td>
                    Liste von Knoten
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        children
                    </code>
                </td>
                <td>
                    Gibt für einen Knoten alle Kindelemente zurück.
                </td>
                <td>
                    Liste von Elementen
                </td>
            </tr>
        </table>

        <chapter id="elemente-selektieren-auf-null-ueberpruefen" title="Auf null überprüfen">
            <p>
                Wird über eine Selektionsmethode ein Objekt gesucht gibt diese den Wert null zurück, falls kein
                Objekt gefunden wird. Deshalb sollte immer auf <code>null</code> oder undefined geprüft werden, damit es
                zu keinem Laufzeitfehler kommt, falls ein Zugriff auf ein nicht existierendes Objekt versucht wird.
            </p>

            <code-block lang="javascript">
                <![CDATA[
                    let mainElement = document.getElementById('main'); // Wähle Element mit ID aus.
                    if(mainElement !== null) {                         // Falls Element nicht leer ist,
                      mainElement.className = 'border';                // weise neue CSS-Klasse zu.
                    }
                ]]>
            </code-block>
        </chapter>

        <chapter id="elemente-selektieren-performance" title="Performance von Selektionsmethoden">
            <p>
                Die Auswahl eines Elements per ID, der Selektionsmethode <code>getElementById()</code>, ist hinsichtlich
                der Performance im Vergleich zu anderen Selektionsmethoden recht schnell, da es auf einer Webseite nicht
                erlaubt ist, mehrere Elemente mit einer ID zu haben, und somit die Suche sehr schnell das entsprechende
                Element für eine ID finden kann. Andere Selektionsmethoden wie beispielsweise die Methode
                <code>getElementsByClassName()</code> sind im Vergleich deutlich langsamer, weil hierbei jedes
                Element auf der Webseite überprüft werden muss. Auch wenn der Geschwindigkeitsunterschied in der Regel
                kaum bemerkbar ist, sollte man diesen Unterschied doch im Hinterkopf haben.
            </p>
        </chapter>

        <chapter id="elemente-selektieren-css-veraendern" title="Das CSS eines Elements verändern">
            <p>
                Über die Eigenschaft <code>style</code> eines Elements können Sie an die CSS-Eigenschaften eines
                Elements gelangen bzw. diese auch verändern. Das dieser Eigenschaft hinterlegte Objekt enthält alle
                CSS-Eigenschaften als Objekteigenschaften (also beispielsweise <code>style.color</code>,
                <code>style.border</code> usw.). Für CSS-Eigenschaften wie beispielsweise <code>background-color</code>,
                die einen Bindestrich enthalten, sind die entsprechenden Objekteigenschaften in CamelCase-Schreibweise
                definiert (beispielsweise <code>style.backgroundColor</code> oder <code>style.fontFamily</code>).
            </p>
        </chapter>

        <chapter id="elemente-selektieren-method-borrowing" title="Method Borrowing">
            <p>
                Da es sich bei Knotenlisten um keine echten Arrays (sondern um Objekte vom Typ <code>NodeList</code>),
                wohl aber um <code>array</code>-ähnliche Objekte handelt (wie das <code>arguments</code>-Objekt),
                verwendet man in der Praxis häufig auch die Technik des Method Borrowings, um dennoch Methoden von Array
                verwenden zu können.
            </p>

            <code-block lang="javascript">
                <![CDATA[
                    Array.prototype.forEach.call(tableRowsEven, (tableRow) => {
                      tableRow.style.backgroundColor = '#CCCCCC';
                    });
                ]]>
            </code-block>
        </chapter>

        <chapter id="elemente-selektieren-aktive-vs-statische-knotenlisten"
                 title="Aktive Knotenlisten vs. statische Knotenlisten">
            <p>
                Man unterscheidet bei Knotenlisten zwischen sogenannten aktiven und statischen Knotenlisten. Erstere
                bezeichnen Knotenlisten, bei denen Änderungen, die an einzelnen Knoten in der Liste vorgenommen werden,
                direkte Auswirkungen auf die Webseite haben, d.h., dass die Änderungen direkt in der Webseite
                widergespiegelt werden. Bei Letzteren dagegen haben Änderungen an Knoten innerhalb der Knotenliste keine
                direkten Auswirkungen auf die Webseite, werden also nicht direkt in der Webseite widergespiegelt. Die
                Methoden <code>getElementsByClassName()</code>, <code>getElementsByTagName()</code> und
                <code>getElementsByName()</code> geben aktive Knotenlisten zurück, die Methode
                <code>querySelectorAll()</code> dagegen eine statische Knotenliste.
            </p>
        </chapter>

        <chapter id="elemente-selektieren-weissraumknoten" title="Weißraumknoten">
            <p>
                Leerraum innerhalb des HTML-Codes, der beispielsweise durch Leerzeichen, Tabulatoren oder auch
                Zeilenumbrüche erzeugt wird, führt dazu, dass im DOM dafür jedes Mal Textknoten ohne Text erzeugt
                werden. In solchen Fällen spricht man von Weißraumknoten.
            </p>
        </chapter>
    </chapter>

    <chapter id="text" title="Mit Textknoten arbeiten">
        <table style="header-row">
            <tr>
                <td>
                    Eigenschaft/Methode
                </td>
                <td>
                    Beschreibung
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        textContent
                    </code>
                </td>
                <td>
                    Über diese Eigenschaft können Sie auf den Textinhalt eines Knotens zugreifen.
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        nodeValue
                    </code>
                </td>
                <td>
                    Über diese Eigenschaft können Sie auf den Inhalt eines Knotens zugreifen.
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        innerHTML
                    </code>
                </td>
                <td>
                    Über diese Eigenschaft können Sie auf den HTML-Inhalt eines Knotens zugreifen.
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        createTextNode()
                    </code>
                </td>
                <td>
                    Mit dieser Methode können Sie Textknoten erstellen.
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        createElement()
                    </code>
                </td>
                <td>
                    Mit dieser Methode können Sie Elemente erstellen.
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        createAttribute()
                    </code>
                </td>
                <td>
                    Mit dieser Methode können Sie Attributknoten erstellen.
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        appendChild()
                    </code>
                </td>
                <td>
                    Mit dieser Methode können Sie dem DOM-Baum Knoten hinzufügen.
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        removeChild()
                    </code>
                </td>
                <td>
                    Mit dieser Methode können Sie Knoten aus dem DOM-Baum entfernen.
                </td>
            </tr>
        </table>

        <chapter id="text-textcontent-vs-innertext" title="»textContent« vs. »innerText«">
            <p>
                In einigen Browsern steht noch die Eigenschaft innerText zur Verfügung, die so ähnlich arbeitet wie
                <code>textContent</code>, sich im Detail allerdings etwas unterscheidet und zudem nicht in der DOM API
                enthalten ist und daher beispielsweise auch nicht von Firefox unterstützt wird. Daher ist es ratsam, auf
                <code>innerText</code> zu verzichten und stattdessen wie gezeigt <code>textContent</code> zu verwenden.
            </p>
        </chapter>

        <chapter id="text-methoden-von-dokumentknoten" title="Methoden von Dokumentknoten">
            <p>
                Die Methoden <code>createTextNode()</code>, <code>createElement()</code> und
                <code>createAttribute()</code> stehen nur auf dem Dokumentknoten (sprich dem Objekt
                <code>document</code>) zur Verfügung. Diese Methoden können nicht auf anderen Knoten (und damit auch
                nicht auf Elementen) aufgerufen werden.
            </p>
        </chapter>
    </chapter>

    <chapter id="elemente" title="Mit Elementen arbeiten">
        <table style="header-row">
            <tr>
                <td>
                    Eigenschaft/Methode
                </td>
                <td>
                    Beschreibung
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        insertBefore()
                    </code>
                </td>
                <td>
                    Kann das übergebene Element als Kindelement vor ein anderes Element/einen anderen Knoten hinzufügen,
                    sprich als voriges Geschwisterelement definieren.
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        appendChild()
                    </code>
                </td>
                <td>
                    Kann das übergebene Element als letztes Kindelement eines Elternelements hinzufügen.
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        replaceChild()
                    </code>
                </td>
                <td>
                    Kann ein bestehendes Kindelement (bzw. ein bestehender Kindknoten) durch ein neues Kindelement
                    ersetzen. Die Methode wird dabei auf dem Elternelement aufgerufen und erwartet als ersten Parameter
                    den neuen Kindknoten sowie als zweiten Parameter den zu ersetzenden Kindknoten.
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        removeChild()
                    </code>
                </td>
                <td>
                    Diese Methode erwartet das zu entfernende Element (bzw. den zu entfernenden Knoten) und gibt dieses
                    auch als Rückgabewert zurück.
                </td>
            </tr>
        </table>

        <p>
            Jedes HTML-Element wird innerhalb eines DOM-Baumes durch einen bestimmten Objekttyp repräsentiert. Welche
            dies sind, ist in einer Erweiterung der DOM API, der sogenannten DOM-HTML-Spezifikation, festgehalten.
            Beispielsweise werden Verlinkungen (<code>&lt;a&gt;</code>-Elemente) durch den Typ
            <code>HTMLAnchorElement</code> repräsentiert, Tabellen (&lt;table&gt;-Elemente) durch den Typ
            <code>HTMLTableElement</code> usw.
        </p>

        <chapter id="elemente-htmlelement" title="Der Obertyp »HTMLElement«">
            <p>
                Alle Objekttypen haben dabei den gleichen »Obertyp«, den Typ <code>HTMLElement</code>, Elemente, die
                keinen speziellen Typ haben, sind »direkt« vom Typ <code>HTMLElement</code>.
            </p>
        </chapter>
    </chapter>

    <chapter id="attribute" title="Mit Attributen arbeiten">
        <table style="header-row">
            <tr>
                <td>
                    Eigenschaft/Methode
                </td>
                <td>
                    Beschreibung
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        getAttribute()
                    </code>
                </td>
                <td>
                    Kann auf Attribute eines Elementes zugreifen.
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        setAttribute()
                    </code>
                </td>
                <td>
                    Kann den Wert eines Attributs ändern oder ein Attribut hinzufügen.
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        createAttribute()
                    </code>
                </td>
                <td>
                    Kann Attributknoten erstellen welche über <code>setAttributeNode()</code> hinzugefügt werden können.
                </td>
            </tr>
            <tr>
                <td>
                    <code>
                        removeAttribute()
                    </code>
                </td>
                <td>
                    Kann Attribute entfernen.
                </td>
            </tr>
        </table>
    </chapter>

    <chapter id="quellen" title="Quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836256971, "JavaScript", Philip Ackermann, 2019
        </tip>
    </chapter>
</topic>