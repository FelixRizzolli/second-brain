<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="js-jquery"
       title="jQuery"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">
    <show-structure depth="2" for="chapter,procedure"/>

    <chapter id="einfuehrung" title="Einführung">
        <p>
            jQuery <a href="https://jquery.com"/> ist eine der wohl bekanntesten JavaScript-Bibliotheken, die das
            Arbeiten mit JavaScript teilweise stark vereinfacht. Auch wenn mittlerweile viele Dinge auch mit
            Standardmethoden der DOM API möglich sind, ist jQuery nach wie vor eine ernst zu nehmende Bibliothek. Die
            Bibliothek jQuery abstrahiert browserspezifische Details und bietet eine einheitliche Schnittstelle. Im
            Wesentlichen hat jQuery also folgende Vorteile:
        </p>

        <list>
            <li>
                es <b>vereinfacht den Zugriff auf Elemente des DOM-Baumes</b>, indem es verschiedene Helfermethoden
                bereitstellt.
            </li>
            <li>
                es <b>vereinfacht das Arbeiten mit Events</b> und bietet hierzu entsprechende Helfermethoden an
            </li>
            <li>
                es <b>vereinfacht das Formulieren von Ajax-Anfragen</b>, indem auch hier browserspezifische Details
                verborgen werden.
            </li>
        </list>

        <p>
            jQuery kann sicherlich in vielen Fällen eine Unterstützung sein, oftmals ist die Verwendung der
            Bibliothek aber auch gar nicht notwendig, weil man entsprechende Aufgaben bereits mit reinem
            JavaScript-Code oder aber anderen, schlankeren Bibliotheken lösen kann. Websites wie You might not need
            jQuery <a href="http://youmightnotneedjquery.com"/> demonstrieren dies anhand verschiedener Beispiele.
        </p>

        <chapter id="einfuehrung-jquery-einbinden" title="jQuery einbinden">
            <p>
                Die Bibliothek jQuery kann auf verschiedene Weisen eingebunden werden. Unter
                <a href="https://jquery.com/download/"/> kann die jeweils aktuelle Version der Bibliothek
                heruntergeladen werden, wobei sowohl die »normale« Version zum Download bereitsteht als auch eine
                minifizierte (sprich komprimierte) Version, welche bezüglich der Dateigröße möglichst klein ist.
                Alternativ dazu besteht auch die Möglichkeit, jQuery über ein CDN einzubinden. Bei einem Content
                Delivery Network (auch Content Distribution Network, kurz: CDN) handelt es sich um ein Netzwerk von
                Servern, die über das Internet verbunden sind und die Anfragen so verteilen, dass sie möglichst schnell
                beantwortet werden können. In der Regel spielt dabei der geografische Ort einer Anfrage eine große
                Rolle: Greift beispielsweise ein Nutzer aus Deutschland auf Ihre Webseite zu und Sie haben dort jQuery
                über eine CDN-URL <a href="https://code.jquery.com"/> eingebunden, wird der entsprechende Code von
                einem Server aus Deutschland an den Nutzer gesendet. Ein Nutzer, der aus den USA auf Ihre Webseite
                zugreift, wird dagegen von einem dort ansässigen Server beliefert.
            </p>

            <table style="header-row">
                <tr>
                    <td>
                        scripts/min.js
                    </td>
                    <td>
                        CDN
                    </td>
                </tr>
                <tr>
                    <td>
                        <code-block lang="html">
                            <![CDATA[
                                <script src="scripts/jquery-3.7.1.min.js"></script>
                            ]]>
                        </code-block>
                    </td>
                    <td>
                        <code-block lang="html">
                            <![CDATA[
                                <script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
                            ]]>
                        </code-block>
                    </td>
                </tr>
            </table>
        </chapter>

        <chapter id="einfuehrung-grundlegendes" title="Grundlegendes">
            <p>
                Das Kernstück von jQuery bildet die Funktion <code>jQuery()</code> bzw. die gleichbedeutende
                Shortcut-Funktion <code>$()</code> (im Folgenden jQuery-Methode genannt). Diese Funktion kann mit
                verschiedenen Argumenten aufgerufen werden (Details siehe unter
                <a href="http://api.jquery.com/jQuery/"/>), von denen drei Formen besonders häufig verwendet werden:
            </p>

            <list type="bullet">
                <li>
                    <p>
                        <b>Aufruf mit CSS-Selektor:</b> Hierbei wird der <code>jQuery</code>-Methode einen Selektor
                        übergeben und als Rückgabewert erhält man ein Objekt, welches die Elemente der Webseite enthält,
                        die auf den Selektor zutreffen. Das von der Methode zurückgegebene Objekt stellt dabei ein
                        sogenanntes Wrapperobjekt (im Folgenden <code>jQuery</code>-Objekt genannt) für die
                        entsprechenden Elemente dar und stellt für diese Elemente verschiedene Methoden zur Verfügung.
                    </p>

                    <code-block lang="javascript">
                        <![CDATA[
                            let selectedElements = jQuery('body > div > span');
                            let selectedElements = $('body > div > span');
                        ]]>
                    </code-block>
                </li>
                <li>
                    <p>
                        <b>Aufruf mit Knoten aus dem DOM-Baum:</b> Alternativ zu dem Aufruf mit einem Selektor kann die
                        <code>jQuery</code>-Methode auch mit einem Knoten des DOM-Baumes aufgerufen werden bzw. mit dem
                        entsprechenden den jeweiligen Knoten repräsentierenden JavaScript-Objekt. Auch in diesem Fall
                        stellt das <code>jQuery</code>-Objekt ein Wrapperobjekt um den übergebenen Knoten dar und bietet
                        zusätzliche Methoden an. Die Methode <code>ready()</code> beispielsweise gibt es für das
                        <code>document</code>-Objekt bekanntermaßen nicht, sondern wird erst durch das
                        <code>jQuery</code>-Objekt indirekt zur Verfügung gestellt. Damit kann ein Event-Listener
                        definiert werden, der aufgerufen wird, wenn z.B. das <code>document</code>-Objekt vollständig
                        geladen wurde.
                    </p>

                    <code-block lang="javascript">
                        <![CDATA[
                            $(document).ready(() => {
                              console.log('Webseite geladen');
                            });
                        ]]>
                    </code-block>
                </li>
                <li>
                    <p>
                        <b>Aufruf mit HTML-String:</b> Die <code>jQuery</code>-Methode kann auch dazu verwendet werden,
                        um neue Elemente zu erzeugen. Dazu wird der Methode einfach der entsprechende HTML-Code, für das
                        zu erstellende Element, als Zeichenkette übergeben.
                    </p>

                    <code-block lang="javascript">
                        <![CDATA[
                            let newElement = $('<div>Neues Element</div>');
                        ]]>
                    </code-block>
                </li>
            </list>

            <p>
                Rückgabewert der <code>jQuery</code>-Methode ist in allen gezeigten Fällen ein Objekt, welches den
                entsprechenden Elementen zusätzliche Funktionalität hinzufügt, das sogenannte <code>jQuery</code>-Objekt.
                Dieses Objekt enthält Referenzen auf einen oder mehrere Knoten des DOM-Baumes, im Folgenden als
                ausgewählte Knoten bzw. ausgewählte Elemente bezeichnet.
            </p>
        </chapter>
    </chapter>

    <chapter id="dom" title="Mit dem DOM arbeiten">
        <p>
            Das Arbeiten mit dem DOM war nicht immer so komfortabel, wie es mittlerweile auch dank Methoden wie
            <code>querySelector()</code> und <code>querySelectorAll()</code> möglich ist. Lange Zeit war jQuery das
            Mittel der Wahl, wenn es darum ging, relativ einfach das DOM zu verarbeiten, beispielsweise um Elemente zu
            selektieren, zu verändern oder hinzuzufügen. So bietet jQuery auch heutzutage noch u. a. bei den folgenden
            Aufgaben Unterstützung:
        </p>

        <list type="bullet">
            <li>
                Selektion von Elementen
            </li>
            <li>
                Zugriff auf Inhalte und Verändern von Inhalten
            </li>
            <li>
                Filtern von selektierten Elementen
            </li>
            <li>
                Zugriff auf Attribute
            </li>
            <li>
                Zugriff auf CSS-Eigenschaften
            </li>
            <li>
                Navigieren zwischen Elementen
            </li>
            <li>
                Verwenden von Effekten
            </li>
        </list>

        <chapter id="dom-selektion-von-elementen" title="Selektion von Elementen">

            <table style="both">
                <tr>
                    <td>
                        Gruppe
                    </td>
                    <td>
                        Beschreibung
                    </td>
                    <td>
                        Link
                    </td>
                </tr>
                <tr>
                    <td>
                        Basisselektoren
                    </td>
                    <td>
                        Hierbei handelt es sich um grundlegende Selektoren, wie Sie sie schon aus CSS kennen
                    </td>
                    <td>
                        <a href="https://api.jquery.com/category/selectors/basic-css-selectors/"/>
                    </td>
                </tr>
                <tr>
                    <td>
                        Hierarchieselektoren
                    </td>
                    <td>
                        Selektoren, welche die Hierarchie von Elementen einbeziehen
                    </td>
                    <td>
                        <a href="https://api.jquery.com/category/selectors/hierarchy-selectors/"/>
                    </td>
                </tr>
                <tr>
                    <td>
                        Basisfilterselektoren
                    </td>
                    <td>
                        Selektoren, mit denen Sie einzelne Elemente gezielter herausfiltern können und die es in CSS
                        nicht alle gibt
                    </td>
                    <td>
                        <a href="https://api.jquery.com/category/selectors/basic-filter-selectors/"/>
                    </td>
                </tr>
                <tr>
                    <td>
                        Inhaltsfilterselektoren
                    </td>
                    <td>
                        Selektoren, die den Inhalt von Elementen mit einbeziehen
                    </td>
                    <td>
                        <a href="https://api.jquery.com/category/selectors/content-filter-selector/"/>
                    </td>
                </tr>
                <tr>
                    <td>
                        Sichtbarkeitsfilterselektoren
                    </td>
                    <td>
                        Selektoren bezüglich der Sichtbarkeit von Elementen
                    </td>
                    <td>
                        <a href="https://api.jquery.com/category/selectors/visibility-filter-selectors/"/>
                    </td>
                </tr>
                <tr>
                    <td>
                        Attributfilterselektoren
                    </td>
                    <td>
                        Selektoren, welche die Attribute von Elementen mit einbeziehen
                    </td>
                    <td>
                        <a href="https://api.jquery.com/category/selectors/attribute-selectors/"/>
                    </td>
                </tr>
                <tr>
                    <td>
                        Formularfilterselektoren
                    </td>
                    <td>
                        Selektoren, die gezielt für die Selektion von Formularelementen nützlich sind
                    </td>
                    <td>
                        <a href="https://api.jquery.com/category/selectors/form-selectors/"/>
                    </td>
                </tr>
                <tr>
                    <td>
                        Kindfilterselektoren
                    </td>
                    <td>
                        Selektoren für das Selektieren von Kindelementen
                    </td>
                    <td>
                        <a href="https://api.jquery.com/category/selectors/child-filter-selectors/"/>
                    </td>
                </tr>
            </table>

            <code-block collapsed-title="Beispiele" collapsible="true" lang="javascript">
                <![CDATA[
                    $(document).ready(() => {
                      let inputElements = $('input');         // alle <input>-Elemente
                      let max = $('#max');                    // Element mit ID "max"
                      let oddElements = $('.odd');            // Elemente mit Klasse "odd"
                      let elements = $('td, th');             // alle <td>- und <th>-Elemente
                      let inputMax = $('input[name="max"]');  // <input>-Elemente, deren name-Attribut den Wert "max" hat
                      let oddRows = $('tr:odd'));             // alle "ungeraden" <tr>-Elemente
                      let evenRows = $('tr:even'));           // alle "geraden" <tr>-Elemente
                      let listItemsAtIndex = $('li:eq(2)'));  // alle <li>-Elemente an Index 2
                      let allOthers = $(':not(li)'));         // alle Nicht-<li>-Elemente
                      let notExample = $(':not(.example)'));  // alle Elemente ohne CSS-Klasse "example"
                    });
                ]]>
            </code-block>
        </chapter>

        <chapter id="dom-zugriff-auf-inhalte" title="Zugriff auf Inhalte und Verändern von Inhalten">
            <p>
                Nachdem über die jQuery-Methode unter Verwendung von Selektoren Elemente ausgewählt wurden, stehen
                einem über das <code>jQuery</code>-Objekt für diese ausgewählten Elemente verschiedene Methoden zur
                Verfügung, mit denen auf den Inhalt zugegriffen und dieser verändert werden kann. Dies umfasst u.a.
                Folgendes:
            </p>

            <table style="header-row">
                <tr>
                    <td>
                        Methodengruppe
                    </td>
                    <td>
                        Link
                    </td>
                </tr>
                <tr>
                    <td>
                        Zugriff auf und Ändern von HTML- und Textinhalten
                    </td>
                    <td>
                        <a href="https://api.jquery.com/category/manipulation/dom-insertion-inside/"/>
                    </td>
                </tr>
                <tr>
                    <td>
                        Hinzufügen von Inhalten innerhalb eines Elements
                    </td>
                    <td>
                        <a href="https://api.jquery.com/category/manipulation/dom-insertion-inside/"/>
                    </td>
                </tr>
                <tr>
                    <td>
                        Hinzufügen von Inhalten außerhalb eines Elements
                    </td>
                    <td>
                        <a href="https://api.jquery.com/category/manipulation/dom-insertion-outside/"/>
                    </td>
                </tr>
                <tr>
                    <td>
                        Hinzufügen von Inhalten um ein Element herum
                    </td>
                    <td>
                        <a href="https://api.jquery.com/category/manipulation/dom-insertion-around/"/>
                    </td>
                </tr>
                <tr>
                    <td>
                        Ersetzen von Inhalten
                    </td>
                    <td>
                        <a href="https://api.jquery.com/category/manipulation/dom-replacement/"/>
                    </td>
                </tr>
                <tr>
                    <td>
                        Entfernen von Inhalten
                    </td>
                    <td>
                        <a href="https://api.jquery.com/category/manipulation/dom-removal/"/>
                    </td>
                </tr>
            </table>

            <code-block collapsed-title="Beispiele" collapsible="true" lang="javascript">
                <![CDATA[
                    // Hinzufügen von neuem HTML-Inhalt
                    $('#main').html('<div>Neuer Inhalt</div>');
                    // Zugriff auf den HTML-Inhalt
                    let htmlContent = $('#main').html();

                    // Hinzufügen von neuem Textinhalt
                    $('#main').text('Neuer Textinhalt');
                    // Zugriff auf den Textinhalt
                    let textContent = $('#main').text();

                    // Hinzufügen von neuem Inhalt hinter den bestehenden Inhalt jedes <div>-Elements mit der CSS-Klasse "example"
                    $('div.example').append('<p>Beispiel</p>');

                    // Hinzufügen von neuem Inhalt vor den bestehenden Inhalt jedes <div>-Elements mit der CSS-Klasse "example"
                    $('div.example').prepend('<p>Beispiel</p>');

                    // Hinzufügen von neuem Inhalt hinter jedes <div>-Element mit der CSS-Klasse "example"
                    $('div.example').after('<p>Beispiel</p>');

                    // Hinzufügen von neuem Inhalt vor jedes <div>-Element mit der CSS-Klasse "example"
                    $('div.example').before('<p>Beispiel</p>');
                ]]>
            </code-block>
        </chapter>

        <chapter id="dom-filtern-von-selektierten-elementen" title="Filtern von selektierten Elementen">
            <p>
                Das <code>jQuery</code>-Objekt stellt für die ausgewählten Elemente ebenfalls verschiedene Methoden
                bereit, mithilfe derer die aktuell ausgewählten Elemente weiter eingegrenzt werden können. Liste der
                Methoden: <a href="https://api.jquery.com/category/traversing/filtering/"/>
            </p>

            <code-block collapsed-title="Beispiele" collapsible="true" lang="javascript">
                <![CDATA[
                    $('li').eq(2); // Auswahl des dritten <li>-Elements
                    $('li').first(); // Auswahl des ersten <li>-Elements
                    $('li').filter('.selected'); // Auswahl der <li>-Elemente, welche die CSS-Klasse ".selected" haben
                    $('li').has('ul'); // Auswahl aller <li>-Elemente, die ein <ul>-Element enthalten
                    $('li').has('.selected'); // Auswahl aller Elemente, welche die CSS-Klasse ".selected" haben
                    $('li').last(); // Auswahl des letzten <li>-Elements
                    $('li').map(() => { this.className }); // Auswahl aller class-Attribute der <li>-Elemente
                    $('li').not('.selected'); // Auswahl aller <li>-Elemente, welche nicht die CSS-Klasse ".selected" haben
                    $('li').slice(0, 2); // Auswahl der ersten zwei <li>-Elemente
                ]]>
            </code-block>
        </chapter>

        <chapter id="dom-zugriff-auf-attribute" title="Zugriff auf Attribute">
            <p>
                Das <code>jQuery</code>-Objekt bietet zudem einige Methoden an, um auf HTML-Attribute zugreifen zu
                können. Liste der Methoden: <a href="https://api.jquery.com/category/attributes/"/>
            </p>

            <code-block collapsed-title="Beispiele" collapsible="true" lang="javascript">
                <![CDATA[
                    let element = $('a#main');

                    let href = element.attr('href'); // lesender Zugriff auf das Attribut "href" des Elements
                    element.attr('href', 'index.html'); // schreibender Zugriff auf das Attribut "href" des Elements
                    element.attr({ href: 'index.html', target: '_blank' }); // alternativer schreibender Zugriff über Konfigurationsobjekt
                    element.removeAttr('href'); // Enfernen des Attributs "href" aus dem Element
                    element.addClass('highlighted'); // Hinzufügen einer CSS-Klasse
                    element.removeClass('highlighted'); // Entfernen einer CSS-Klasse
                ]]>
            </code-block>
        </chapter>

        <chapter id="dom-zugriff-auf-css-eigenschaften" title="Zugriff auf CSS-Eigenschaften">
            <p>
                Liste der Methoden: <a href="https://api.jquery.com/category/css/"/>
            </p>

            <code-block collapsed-title="Beispiele" collapsible="true" lang="javascript">
                <![CDATA[
                    let backgroundColor = $('body').css('background-color'); // Auslesen der Hintergrundfarbe des <body>-Elements
                    let properties = $('body').css(['color', 'background-color']); // Auslesen der Vordergrundfarbe und der Hintergrundfarbe des <body>-Elements
                    $('body').css('background-color', 'blue'); // Setzen der Hintergrundfarbe des <body>-Elements
                    $('body').css({ 'color': 'white', 'background-color': 'blue'}); // Setzen der Vordergrundfarbe und der Hintergrundfarbe des <body>-Elements
                ]]>
            </code-block>
        </chapter>

        <chapter id="dom-navigieren-zwischen-elementen" title="Navigieren zwischen Elementen">
            <p>
                Ausgehend von einer in einem <code>jQuery</code>-Objekt gespeicherten Auswahl von Elementen können
                solche Elemente gefunden werden, die in einer bestimmten Beziehung zu diesen Elementen stehen, wie
                beispielsweise Elternelemente, Geschwisterelemente und Kindelemente. Liste der Methoden:
                <a href="https://api.jquery.com/category/traversing/tree-traversal/"/>
            </p>

            <code-block collapsed-title="Beispiele" collapsible="true" lang="javascript">
                <![CDATA[
                    /* -----> Kindelemente <----- */
                    let listItems = $('ul').children(); // Auswahl aller Kindelemente von <ul>
                    let closestLink = $('ul').closest('a'); // Auswahl des nächsten Links innerhalb <ul>

                    /* -----> Geschwisterelemente <----- */
                    let nextSibling = $('ul').next(); // Auswahl des nächsten Geschwisterelements
                    let nextSiblingLink = $('ul').next('a'); // Auswahl des nächsten Linkelements
                    let nextSiblings = $('ul').nextAll(); // Auswahl aller nächsten Geschwisterelemente
                    let nextSiblingLinks = $('div').nextAll('a'); // Auswahl aller nächsten Linkelemente
                    let nextSiblingsUntil = $('div').nextUntil('a'); // Auswahl aller nächsten Geschwisterelemente bis zu bestimmtem Element
                    let previousSibling = $('ul').prev(); // Auswahl des vorigen Geschwisterelements
                    let previousSiblings = $('ul').prevAll(); // Auswahl aller vorigen Geschwisterelemente
                    let previousSiblingsUntil = $('div').prevUntil('a'); // Auswahl aller vorigen Geschwisterelemente bis zu bestimmtem Element
                    let siblings = $('div').siblings(); // Auswahl aller Geschwisterelemente

                    /* -----> Elternelemente <----- */
                    let parent = $('ul').parent(); // Auswahl des Elternelements
                    let parents = $('ul').parents(); // Auswahl aller Vorfahrenelemente
                    let parentsUntil = $('ul').parentsUntil('div'); // Auswahl aller Vorfahrenelemente bis zu bestimmtem Element
                ]]>
            </code-block>
        </chapter>

        <chapter id="dom-verwenden-von-elementen" title="Verwenden von Effekten">
            <p>
                Effekte wie das Einblenden oder Ausblenden von Elementen einer Webseite waren nicht immer so einfach
                umzusetzen wie mittlerweile durch CSS3-Animationen möglich. Deshalb bietet jQuery mehrere Methoden:
                <a href="https://api.jquery.com/category/effects/"/>
            </p>

            <code-block collapsed-title="Beispiele" collapsible="true" lang="javascript">
                <![CDATA[
                    'use strict';
                    $(document).ready(() => {
                      $('main').animate(
                        { opacity: 0.75 }, // Eigenschaften
                        'fast',            // Geschwindigkeit
                        'swing',           // Easing
                         () => {
                          // Animation abgeschlossen.
                         }
                      );
                    });
                ]]>
            </code-block>
        </chapter>
    </chapter>

    <chapter id="auf-ergebnisse-reagieren" title="Auf Ereignisse reagieren">
        <p>
            Für das Abfangen von Events gibt es verschiedene Möglichkeiten gibt: Zum einen stehen in der Regel
            Event-Handler für das entsprechende Event zur Verfügung, zum anderen gibt es die Möglichkeit, über die
            Methode <code>addEventListener()</code> für ein Event gleich mehrere Event-Listener zu registrieren, und
            darüber hinaus verwenden ältere Versionen des Internet Explorers die Methode <code>attachEvent()</code>, die
            Ähnliches leistet. Die Bibliothek jQuery bietet browserunabhängige Lösungen an. Insgesamt lassen sich die
            Event-Methoden wie folgt einteilen:
        </p>

        <table style="header-row">
            <tr>
                <td>
                    Kategorie
                </td>
                <td>
                    Link
                </td>
            </tr>
            <tr>
                <td>
                    allgemeine Event-Methoden
                </td>
                <td>
                    <a href="https://api.jquery.com/category/events/event-handler-attachment/"/>
                </td>
            </tr>
            <tr>
                <td>
                    Event-Methoden für das Behandeln von allgemeinen Events
                </td>
                <td>
                    <a href="https://api.jquery.com/category/events/browser-events/"/>
                    <br/>
                    <a href="https://api.jquery.com/category/events/document-loading/"/>
                </td>
            </tr>
            <tr>
                <td>
                    Event-Methoden für das Behandeln von Maus-Events
                </td>
                <td>
                    <a href="https://api.jquery.com/category/events/mouse-events/"/>
                </td>
            </tr>
            <tr>
                <td>
                    Event-Methoden für das Behandeln von Tastatur-Events
                </td>
                <td>
                    <a href="https://api.jquery.com/category/events/keyboard-events/"/>
                </td>
            </tr>
            <tr>
                <td>
                    Event-Methoden für das Behandeln von Formular-Events
                </td>
                <td>
                    <a href="https://api.jquery.com/category/events/form-events/"/>
                </td>
            </tr>
        </table>

        <code-block collapsed-title="Beispiel für Tastatur-Events" collapsible="true" lang="javascript">
            <![CDATA[
                $('input#username')
                  .keypress((event) => {
                    console.log('Taste zur Eingabe des Nutzernamens gedrückt.');
                  })
                  .keydown((event) => {
                    console.log('Taste wird gedrückt.');
                  })
                  .keyup((event) => {
                    console.log('Taste zur Eingabe des Nutzernamens losgelassen.');
                  });
            ]]>
        </code-block>

        <p>
            Das Event-Objekt, welches innerhalb jedes Event-Listeners als Parameter zur Verfügung steht, enthält
            verschiedene Informationen und stellt verschiedene Methoden zur Verfügung. Im Prinzip sind dies die
            Informationen, die auch im Standard-Event-Objekt sind, ergänzt durch ein paar weitere Angaben. Aber auch
            hier gilt: jQuery verbirgt die browserspezifischen Details und ermöglicht so einen browserunabhängigen
            Einsatz. Mehr dazu: <a href="https://api.jquery.com/category/events/event-object/"/>
        </p>

        <code-block collapsed-title="Beispiel für Maus-Events" collapsible="true" lang="javascript">
            <![CDATA[
                $('input').on(
                  'change,
                  { value : 4711  },                   // Datenobjekt
                  (event) => {
                    console.log(event.currentTarget);  // aktuelles Element
                    console.log(event.data);           // Datenobjekt
                    console.log(event.data.value);     // Eigenschaft des Datenobjekts
                    console.log(event.pageX);          // x-Position Maus
                    console.log(event.pageY);          // y-Position Maus
                  }
                );
            ]]>
        </code-block>
    </chapter>

    <chapter id="ajax-anfragen" title="Ajax-Anfragen erstellen">
        <tip>
            <a href="js-ajax.topic"/>
        </tip>

        <p>
            Auch das Erstellen von Ajax-Anfragen gestaltet sich durch eine Reihe von Helfermethoden in jQuery einfacher,
            u.a.:
        </p>

        <list type="bullet">
            <li>
                eine Methode, um beliebige Ajax-Anfragen zu erstellen
            </li>
            <li>
                eine Methode, um GET-Anfragen zu erstellen
            </li>
            <li>
                eine Methode, um POST-Anfragen zu erstellen
            </li>
            <li>
                eine Methode, um HTML-Inhalt per Ajax direkt in ein Element zu laden
            </li>
            <li>
                eine Methode, um JavaScript-Dateien zu laden
            </li>
            <li>
                eine Methode, um JSON-Dateien zu laden
            </li>
        </list>

        <p>
            Die meisten Helfermethoden lassen sich dabei zu verschiedenen Zwecken einsetzen, beispielsweise können über
            die Methode <code>attr()</code> HTML-Attribute sowohl gelesen als auch geschrieben, über die Methode <code>css()</code>
            CSS-Eigenschaften gelesen und geschrieben und über die Event-Methoden Event-Listener registriert oder wieder
            entfernt werden.
        </p>

        <p>
            Details gibt es hier: <a href="https://api.jquery.com/category/ajax/"/>
        </p>

        <chapter id="ajax-anfragen-erstellen" title="Ajax-Anfragen erstellen">
            <table>
                <tr>
                    <td>
                        ajax()-Methode
                    </td>
                    <td>
                        Fluent API
                    </td>
                </tr>
                <tr>
                    <td>
                        <code-block lang="javascript">
                            <![CDATA[
                                'use strict';
                                $(document).ready(() => {
                                  $.ajax({
                                    url: 'artists.json',
                                    dataType: 'json',
                                    type: 'GET',
                                    success: (data) => { /* */ },
                                    error: (jqXHR, errorMessage, error) => {    }
                                  });
                                });
                            ]]>
                        </code-block>
                    </td>
                    <td>
                        <code-block lang="javascript">
                            <![CDATA[
                                'use strict';
                                $(document).ready(() => {
                                  $.ajax({
                                      url: 'artists.json',
                                      dataType: 'json',
                                      type: 'GET'
                                    })
                                    .done((data) => { /* */ })
                                    .fail((jqXHR, errorMessage, error) => {  }
                                  );
                                });
                            ]]>
                        </code-block>
                    </td>
                </tr>
            </table>
        </chapter>
    </chapter>

    <chapter id="quellen" title="Quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836256971, "JavaScript", Philip Ackermann, 2019
        </tip>
    </chapter>
</topic>