<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="css-selektoren"
       title="Selektoren"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">
    <show-structure depth="2" for="chapter,procedure"/>
    <link-summary rel="description"/>

    <!-- TODO -->
    <chapter id="description" title="Beschreibung">
        <p>
            CSS Selektoren sind ein wichtiger Bestandteil von CSS. Sie ermöglichen es, HTML-Elemente gezielt
            anzusprechen und zu formatieren. Es gibt verschiedene Arten von Selektoren.
        </p>
    </chapter>

    <chapter id="overview" title="Übersicht">
        <table style="header-row">
            <tr>
                <td>Selektor</td>
                <td>Bezeichnung</td>
                <td>Beschreibung</td>
            </tr>
            <tr>
                <td>
                    <!-- @formatter:off -->
                    <code-block lang="css">
                        <![CDATA[
                            element { ... }
                        ]]>
                    </code-block>
                    <!-- @formatter:on -->
                </td>
                <td>
                    <a href="css-selektoren.topic#types-typeselector">Typselektor</a>
                </td>
                <td>
                    <p>
                        Der Typselektor – manchmal auch (HTML-)Elementselektor – spricht die HTML-Elemente direkt mit
                        dem Elementnamen an.
                    </p>
                </td>
            </tr>
            <tr>
                <td>
                    <!-- @formatter:off -->
                    <code-block lang="css">
                        <![CDATA[
                            .klname { ... }
                        ]]>
                    </code-block>
                    <!-- @formatter:on -->
                </td>
                <td>
                    <a href="css-selektoren.topic#types-classselector">Klassenselektor</a>
                </td>
                <td>
                    <p>
                        Mit dem Klassenselektor werden HTML-Elemente ausgewählt, die eine bestimmte Klasse besitzen.
                    </p>
                </td>
            </tr>
            <tr>
                <td>
                    <!-- @formatter:off -->
                    <code-block lang="css">
                        <![CDATA[
                            #elemid { ... }
                        ]]>
                    </code-block>
                    <!-- @formatter:on -->
                </td>
                <td>
                    <a href="css-selektoren.topic#types-idselector">ID-Selektor</a>
                </td>
                <td>
                    <p>
                        Mit dem ID-Selektor werden HTML-Elemente ausgewählt, die eine bestimmte ID besitzen.
                    </p>
                </td>
            </tr>
            <tr>
                <td>
                    <!-- @formatter:off -->
                    <code-block lang="css">
                        <![CDATA[
                            * { ... }
                        ]]>
                    </code-block>
                    <!-- @formatter:on -->
                </td>
                <td>
                    <a href="css-selektoren.topic#types-universalselector">Universalselektor</a>
                </td>
                <td>
                    <p>
                        Mit dem Universalselektor können alle Elemente auf einer Webseite angesprochen werden.
                    </p>
                </td>
            </tr>
            <tr>
                <td>
                    <!-- @formatter:off -->
                    <code-block lang="css">
                        <![CDATA[
                            [attr] { ... }
                        ]]>
                    </code-block>
                    <!-- @formatter:on -->
                </td>
                <td>
                    <a href="css-selektoren.topic#types-attributeselector">Attributselektor</a>
                </td>
                <td>
                    <p>
                        Der Attributselektor wird verwendet, um HTML-Elemente nach ihren HTML-Attributen auszuwählen.
                        Hierbei gibt es die Möglichkeit, die Präsenz eines Attributs oder den darin enthaltenen Wert zu
                        überprüfen. Zusätzlich gibt es noch die Möglichkeit der Teilübereinstimmung von Attributwerten.
                    </p>
                </td>
            </tr>
            <tr>
                <td>
                    <!-- @formatter:off -->
                    <code-block lang="css">
                        <![CDATA[
                            :visited { ... }
                        ]]>
                    </code-block>
                    <!-- @formatter:on -->
                </td>
                <td>
                    <a href="css-selektoren.topic#types-pseudoclassselector">Pseudoklassen-Selektoren</a>
                </td>
                <td>
                    <p>
                        CSS-Pseudoklassen ermöglichen es, Elemente zu formatieren, die sich in einem bestimmten Zustand
                        befinden.
                    </p>
                </td>
            </tr>
            <tr>
                <td>
                    <!-- @formatter:off -->
                    <code-block lang="css">
                        <![CDATA[
                            ::before { ... }
                        ]]>
                    </code-block>
                    <!-- @formatter:on -->
                </td>
                <td>
                    <a href="css-selektoren.topic#types-pseudoelementselector">Pseudoelement-Selektoren</a>
                </td>
                <td>
                    <p>
                        CSS-Pseudoelemente ermöglichen es, bestimmte Teile eines Elements zu formatieren. Pseudoelemente
                        werden in der Regel verwendet, um das Aussehen von Elementen zu verändern, ohne das
                        HTML-Dokument zu verändern.
                    </p>
                </td>
            </tr>
            <tr>
                <td>
                    <!-- @formatter:off -->
                    <code-block lang="css">
                        <![CDATA[
                            p > span { ... }
                        ]]>
                    </code-block>
                    <!-- @formatter:on -->
                </td>
                <td>
                    <a href="css-selektoren.topic#types-combinatorselector">Kombinatoren</a>
                </td>
                <td>
                    <p>
                        Als Kombinatoren werden Zeichen zwischen zwei Selektoren bezeichnet, die die Beziehung zwischen
                        den beiden Selektoren beschreiben.
                    </p>
                </td>
            </tr>
        </table>
    </chapter>

    <chapter id="types" title="Selektortypen">
        <chapter id="types-typeselector" title="Typselektor">
            <p>
                Der Typselektor – manchmal auch (HTML-)Elementselektor – spricht die HTML-Elemente direkt mit dem
                Elementnamen an. Angewendet wird diese Regel auf alle Elemente desselben Typs im HTML-Dokument. Dabei
                ist es irrelevant, an welcher Stelle im HTML-Dokument diese Elemente geschrieben sind, welcher Klasse
                sie zugehören oder welchen Bezeichner sie haben.
            </p>

            <p>
                In folgendem Beispiel werden Typselektoren für Überschriften verwendet. In der zweiten Variante werden
                die Selektoren zusammengefasst.
            </p>

            <!-- @formatter:off -->
            <compare>
                <code-block lang="css">
                    <![CDATA[
                        h1 {
                            font-family: Arial, Helvetica, sans-serif;
                            font-size: 160%;
                            color: blue;
                        }

                        h2 {
                            font-family: Arial, Helvetica, sans-serif;
                            font-size: 140%;
                            color: blue;
                        }

                        h3 {
                            font-family: Arial, Helvetica, sans-serif;
                            font-size: 120%;
                            color: blue;
                        }
                    ]]>
                </code-block>
                <code-block lang="css">
                    <![CDATA[
                        h1,
                        h2,
                        h3 {
                            font-family: Arial, Helvetica, sans-serif;
                            color: blue;
                        }

                        h1 { font-size: 160%; }
                        h2 { font-size: 140%; }
                        h3 { font-size: 120%; }
                    ]]>
                </code-block>
            </compare>
            <!-- @formatter:on -->
        </chapter>

        <chapter id="types-classselector" title="Klassenselektor">
            <p>
                Mit dem Klassenselektor werden HTML-Elemente ausgewählt, die eine bestimmte Klasse besitzen. Ein solcher
                Klassenname kann in HTML mit dem globalen HTML-Attribut <code>class</code> für fast alle Elemente
                vergeben werden:
            </p>

            <!-- @formatter:off -->
            <code-block lang="html">
                <![CDATA[
                    <section class="cards">...</section>
                ]]>
            </code-block>
            <!-- @formatter:on -->

            <p>
                Das HTML-Element mit dem Klassennamen <code>cards</code> kann in CSS über den Klassenselektor
                angesprochen werden, indem vor dem Klassennamen ein Punkt gesetzt wird:
            </p>

            <!-- @formatter:off -->
            <code-block lang="css">
                <![CDATA[
                    .cards { /* CSS-Regeln */ }
                ]]>
            </code-block>
            <!-- @formatter:on -->

            <p>
                Es können auch mehrere Klassen auf einmal verwendet werden, indem die einzelnen Klassen durch ein
                Leerzeichen voneinander getrennt angegeben werden:
            </p>

            <!-- @formatter:off -->
            <code-block lang="html">
                <![CDATA[
                    <article class="card card-text">...</article>
                ]]>
            </code-block>
            <!-- @formatter:on -->

            <p>
                Mit dem Selektor <code>article.card-text</code> werden die darauffolgenden CSS-Regeln nur auf das
                jeweilige HTML-Element mit der angegebenen Klasse angewendet.
            </p>

            <!-- @formatter:off -->
            <code-block lang="css">
                <![CDATA[
                    article.card-text {
                        color: #393939;
                    }
                ]]>
            </code-block>
            <!-- @formatter:on -->

            <p>
                Klassenselektoren können auch mit anderen Selektoren verbunden werden:
            </p>

            <!-- @formatter:off -->
            <code-block lang="css">
                <![CDATA[
                    .card-text.bold {
                        font-weight: bold;
                    }
                ]]>
            </code-block>
            <!-- @formatter:on -->
        </chapter>

        <chapter id="types-idselector" title="ID-Selektor">
            <p>
                Auch IDs können in CSS als Selektor verwendet werden. Mit dem ID-Selektor werden, ähnlich wie mit dem
                Klassenselektor, die HTML-Elemente ausgewählt, die eine bestimmte ID besitzen. Die ID wird im HTML-Code
                im globalen HTML-Attribut <code>id</code> vergeben. Im Gegensatz zu Klassen (mit dem
                <code>class</code>-Attribut) sind IDs immer einzigartige Elemente in einem HTML-Dokument, und daher darf
                nur einem Element im gesamten Dokument eine bestimmte ID zugewiesen werden. Ein ID-Selektor wird in CSS
                mit einem Hash-Zeichen <code>#</code> vor dem ID-Namen angegeben:
            </p>

            <!-- @formatter:off -->
            <code-block lang="css">
                <![CDATA[
                    #cards { /* CSS-Regeln */ }
                ]]>
            </code-block>
            <!-- @formatter:on -->
        </chapter>

        <chapter id="types-universalselector" title="Universal-Selektor">
            <p>
                Der Universalselektor in CSS wird mit dem Sternchen (oder auch Asterisk – <code>*</code>) notiert. Er
                wird verwendet, um alle Elemente auf einer Webseite auszuwählen und zu formatieren. Damit lässt sich
                schnell und einfach eine bestimmte Regel auf alle Elemente einer Webseite anwenden, ohne dass jedes
                Element manuell ausgewählt werden muss.
            </p>

            <!-- @formatter:off -->
            <code-block lang="css">
                <![CDATA[
                    * {
                        font-family: Arial, sans-serif;
                    }
                ]]>
            </code-block>
            <!-- @formatter:on -->
        </chapter>

        <chapter id="types-attributeselector" title="Attributselektor">
            <p>
                Der Attributselektor wird verwendet, um HTML-Elemente nach ihren HTML-Attributen auszuwählen. Hierbei
                gibt es die Möglichkeit, die Präsenz eines Attributs oder den darin enthaltenen Wert zu überprüfen.
                Zusätzlich gibt es noch die Möglichkeit der Teilübereinstimmung von Attributwerten.
            </p>

            <note>
                <p>
                    <b>
                        Attributwerte mit einer Ziffer und Attributwerte ohne Wert
                    </b>
                </p>

                <p>
                    Wenn der Attributwert mit einer Ziffer beginnt (z.B. <code>[title=8tung]</code>), dann müssen Sie
                    solche Sonderzeichen zwischen doppelten Anführungszeichen notieren (z.B.
                    <code>[title="8tung"]</code>).
                </p>

                <p>
                    Des Weiteren gibt es Attribute, denen in HTML kein Wert zugewiesen werden muss, wie z.B. beim
                    HTML-Formularelement zum Abhaken bzw. Auswählen einer Option:
                </p>

                <!-- @formatter:off -->
                <code-block lang="css">
                    <![CDATA[
                        <input type="checkbox" checked>
                    ]]>
                </code-block>
                <!-- @formatter:on -->

                <p>
                    Wird das <code>checked</code>-Attribut in dieser Form verwendet, erhält es trotzdem eine leere
                    Zeichenkette, weshalb die Attributselektoren in Form von <code>[checked=""]</code>,
                    <code>[checked~=""]</code> oder <code>[checked|=""]</code> notiert werden sollten.
                </p>
            </note>

            <table style="header-row">
                <tr>
                    <td>Bezeichnung</td>
                    <td>Beschreibung</td>
                    <td>CSS Beispiel</td>
                    <td>HTML Beispiel</td>
                    <td>Beispiel Beschreibung</td>
                </tr>
                <tr>
                    <td>
                        Attributselektor Präsenz
                    </td>
                    <td>
                        HTML-Elemente, die ein bestimmtes HTML-Attribut besitzen
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                [title] {
                                    text-decoration: none;
                                    font-weight: 800;
                                    color: blue;
                                }
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="html">
                            <![CDATA[
                                <p>Hier geht es zu einer Verlagswebsite guter Bücher:
                                    <a href="http://www.rheinwerk-verlag.de/"
                                       title="Zur Verlagswebsite">Rheinwerk Verlag</a>
                                </p>
                                <p title="Ein Absatz mit title">
                                    Dieser Absatz hat auch ein title-Attribut.
                                </p>
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        Jedes Element, bei dem das Attribut <code>title</code> vorhanden ist.
                    </td>
                </tr>
                <tr>
                    <td>
                        Attributselektor (Attributwert)
                    </td>
                    <td>
                        HTML-Elemente, deren Attribute einen bestimmten Wert Enthalten.
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                button[type=submit] {
                                    margin-top: 1em;
                                    width: 150px;
                                }
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="html">
                            <![CDATA[
                                <button type="submit">Absenden</button>
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        Jedes <code>button</code>Element, bei dem das Attribut <code>type</code> den Wert
                        <code>submit</code> hat.
                    </td>
                </tr>
                <tr>
                    <td>
                        Attributselektor (Attributwert)
                    </td>
                    <td>
                        HTML-Elemente, deren Attribute ein alleinstehendes Wort, getrennt durch mindestens ein
                        Leerzeichen, enthalten.
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                [title~=Pflicht] {
                                    text-decoration: underline;
                                }
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="html">
                            <![CDATA[
                                <label title="Diese Angabe ist Pflicht" for="name">Name:</label>
                                <label title="Es ist Pflicht, diese Angabe zu machen" for="telefon">
                                    Telefon:
                                </label>
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        Jedes Element, bei dem das Attribut <code>title</code> das Wort <code>Pflicht</code> enthält.
                    </td>
                </tr>
                <tr>
                    <td>
                        Attributselektor (Attributwert)
                    </td>
                    <td>
                        HTML-Elemente, deren Attributwert am Anfang ein durch einen Bindestrich getrennten
                        Zeichenfolge steht (wie es z.B. bei einer Sprachdefinition des <code>hreflang</code>- oder
                        <code>lang</code>-Attributs der Fall ist).
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                [class|=test] {
                                    padding: 5px;
                                    background-color: black;
                                    color: white;
                                }
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="html">
                            <![CDATA[
                                <button class="test-01" type="submit">Absenden</button>
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        Jedes Element, bei dem der Wert des Attributs <code>class</code> mit <code>test</code> beginnt.
                    </td>
                </tr>
                <tr>
                    <td>
                        Attributselektor (Teilwert)
                    </td>
                    <td>
                        HTML-Elemente, deren Attributwert einen bestimmten Teilwert beginnt.
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                [attr^=wert]
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="html">
                            <![CDATA[
                                <elem attr="werter">
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        Jedes Element, bei dem der Wert des Attributs <code>attr</code> mit <code>wert</code> beginnt.
                    </td>
                </tr>
                <tr>
                    <td>
                        Attributselektor (Teilwert)
                    </td>
                    <td>
                        HTML-Elemente, deren Attributwert einen bestimmten Teilwert endet.
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                [attr$=wert]
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="html">
                            <![CDATA[
                                <elem attr="endwert">
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        Jedes Element, bei dem der Wert des Attributs <code>attr</code> mit <code>wert</code> endet.
                    </td>
                </tr>
                <tr>
                    <td>
                        Attributselektor (Teilwert)
                    </td>
                    <td>
                        HTML-Elemente, deren Attributwert einen bestimmten Teilwert enthält.
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                [attr*=wert]
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="html">
                            <![CDATA[
                                <elem attr="bewertung">
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        Jedes Element, bei dem der Wert des Attributs <code>attr</code> den Teilwert <code>wert</code>
                        enthält.
                    </td>
                </tr>
            </table>
        </chapter>

        <chapter id="types-pseudoclassselector" title="Pseudoklassen-Selektor">
            <p>
                CSS-Pseudoklassen ermöglichen es, Elemente zu formatieren, die sich in einem bestimmten Zustand
                befinden, wie z.B. <code>:hover</code> oder <code>:active</code>. Pseudoklassen werden in CSS mit einem
                Doppelpunkt <code>:</code> vor dem Namen der Pseudoklasse notiert.
            </p>

            <table style="header-row">
                <tr>
                    <td>Selektor</td>
                    <td>Bezeichnung</td>
                    <td>Auswahl</td>
                    <td>Beispiel</td>
                </tr>
                <tr>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                :link
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        Link-Pseudoklasse
                    </td>
                    <td>
                        Wählt einen unbesuchten Link aus.
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                a:link{
                                    color: blue;
                                }
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                </tr>
                <tr>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                :visited
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        Link-Pseudoklasse
                    </td>
                    <td>
                        Wählt einen besuchten Link aus.
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                a:visited{
                                    color: gray;
                                }
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                </tr>
                <tr>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                :any-link
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        Link-Pseudoklasse
                    </td>
                    <td>
                        Ist eine etwas neuere Pseudoklasse. Sie wählt alle Links aus, unabhängig davon, ob sie besucht
                        oder unbesucht sind. Es werden alle Elemente ausgewählt, die ein <code>href</code>-Attribut
                        enthalten.
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                .articlestyle a:any-link {
                                    color: grey;
                                }
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                </tr>
                <tr>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                :hover
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        dynamische Pseudoklasse
                    </td>
                    <td>
                        Das Element, das den Fokus hat (z.B. Eingabefeld mit aktivem Cursor). Für Smartphones oder
                        Tablets gibt es kein <code>:hover</code>, also dass eine Maus über einem Element steht.
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                a:hover {
                                    color: red;
                                }
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                </tr>
                <tr>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                :focus
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        dynamische Pseudoklasse
                    </td>
                    <td>
                        Das Element, das den Fokus hat (z.B. Eingabefeld mit aktivem Cursor)
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                input:focus{
                                    background-color: yellow;
                                }
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                </tr>
                <tr>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                :active
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        dynamische Pseudoklasse
                    </td>
                    <td>
                        Das Element, das gerade aktiv ist (z.B. ein Link, der gerade angeklickt wird)
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                a:active {
                                    color: green;
                                }
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                </tr>
                <tr>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                :enabled
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        Für Formularelemente
                    </td>
                    <td>
                        Ein Formularelement, das als anwählbar bzw. freigegeben markiert ist.
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                input:enabled {
                                    background-color: white;
                                }
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                </tr>
                <tr>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                :disabled
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        Für Formularelemente
                    </td>
                    <td>
                        Ein Formularelement, das als nicht anwählbar bzw. gesperrt markiert ist.
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                input:disabled {
                                    background-color: lightgrey;
                                }
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                </tr>
                <tr>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                :checked
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        Für Formularelemente
                    </td>
                    <td>
                        Ein Formularelement, das als ausgewählt markiert ist.
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                input:checked {
                                    background-color: lightblue;
                                }
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                </tr>
                <tr>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                :required
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        Für Formularelemente
                    </td>
                    <td>
                        Ein Formularelement, das als Pflichtfeld markiert ist.
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                input:required {
                                    border: 1px solid red;
                                }
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                </tr>
                <tr>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                :valid
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        Für Formularelemente
                    </td>
                    <td>
                        Ein Formularelement, das als gültig markiert ist z.B. für die Eingabe einer korrekten
                        E-Mail-Adresse.
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                input:valid {
                                    border: 1px solid green;
                                }
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                </tr>
                <tr>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                :invalid
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        Für Formularelemente
                    </td>
                    <td>
                        Ein Formularelement, das als ungültig markiert ist z.B. für die Eingabe einer falschen
                        E-Mail-Adresse.
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                input:invalid {
                                    border: 1px solid red;
                                }
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                </tr>
                <tr>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                :in-range
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        Für Formularelemente
                    </td>
                    <td>
                        Für Formularelemente mit einem Wert innerhalb eines bestimmten Bereichs. Mit den HTML-Attributen
                        <code>min</code> und <code>max</code> kann ein Bereich definiert werden.
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                input:in-range {
                                    background-color: lightgreen;
                                }
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                </tr>
                <tr>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                :out-range
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        Für Formularelemente
                    </td>
                    <td>
                        Für Formularelemente mit einem Wert außerhalb eines bestimmten Bereichs. Mit den HTML-Attributen
                        <code>min</code> und <code>max</code> kann ein Bereich definiert werden.
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                input:out-range {
                                    background-color: lightcoral;
                                }
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                </tr>
                <tr>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                :target
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        Für Verweisziele
                    </td>
                    <td>
                        Elemente, die das Ziel eines Verweises sind. Die CSS-Regel, die damit notiert wird, wird erst
                        aktiv, wenn das Verweisziel angesprungen wurde. Zum Aktivieren des Verweisziels kann neben einem
                        gewöhnlichen Anker auch eine ID verwendet werden.
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                #section1:target {
                                    background-color: lightblue;
                                }
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                </tr>
                <tr>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                :root
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        Struktur-Pseudoklassen
                    </td>
                    <td>
                        Das Wurzelelement.
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                :root {
                                    font-size: 16px;
                                }
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                </tr>
                <tr>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                :empty
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        Struktur-Pseudoklassen
                    </td>
                    <td>
                        Leere Elemente
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                p:empty {
                                    display: none;
                                }
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                </tr>
                <tr>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                :first-child
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        Struktur-Pseudoklassen
                    </td>
                    <td>
                        Ein Element, das das erste Kind eines übergeordneten Elements ist.
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                p:first-child {
                                    font-weight: bold;
                                }
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                </tr>
                <tr>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                :last-child
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        Struktur-Pseudoklassen
                    </td>
                    <td>
                        Ein Element, das das letzte Kind eines übergeordneten Elements ist.
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                p:last-child {
                                    font-style: italic;
                                }
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                </tr>
                <tr>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                :nth-child(n)
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        Struktur-Pseudoklassen
                    </td>
                    <td>
                        Ein Element, das das <code>n</code>-te Kind eines übergeordneten Elements ist. Für
                        <code>n</code> sind auch die Werte <code>odd</code> (ungerade Zahlen) und <code>even</code>
                        (gerade Zahlen) möglich.
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                p:nth-child(2n) {
                                    color: red;
                                }
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                </tr>
                <tr>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                :nth-last-child(n)
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        Struktur-Pseudoklassen
                    </td>
                    <td>
                        Wie <code>:nth-child(n)</code>, nur dass die Zählung von hinten beginnt.
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                p:nth-last-child(2n) {
                                    color: blue;
                                }
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                </tr>
                <tr>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                :only-child
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        Struktur-Pseudoklassen
                    </td>
                    <td>
                        Ein Element, das das einzige Kind eines übergeordneten Elements ist.
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                p:only-child {
                                    font-size: 1.5em;
                                }
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                </tr>
                <tr>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                :first-of-type
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        Struktur-Pseudoklassen
                    </td>
                    <td>
                        Ein Element, das das erste Element eines bestimmten Typs ist.
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                p:first-of-type {
                                    font-weight: bold;
                                }
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                </tr>
                <tr>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                :last-of-type
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        Struktur-Pseudoklassen
                    </td>
                    <td>
                        Ein Element, das das letzte Element eines bestimmten Typs ist.
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                p:last-of-type {
                                    font-style: italic;
                                }
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                </tr>
                <tr>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                :nth-of-type(n)
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        Struktur-Pseudoklassen
                    </td>
                    <td>
                        Ein Element, das das <code>n</code>-te gleichartige Kind-Element eines Eltern-Elements ist.
                        Für <code>n</code> sind auch die Werte <code>odd</code> (ungerade Zahlen) und <code>even</code>
                        (gerade Zahlen) möglich.
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                p:nth-of-type(2n) {
                                    color: red;
                                }
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                </tr>
                <tr>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                :nth-last-of-type(n)
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        Struktur-Pseudoklassen
                    </td>
                    <td>
                        Wie <code>:nth-of-type(n)</code>, nur dass die Zählung von hinten beginnt.
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                p:nth-last-of-type(2n) {
                                    color: blue;
                                }
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                </tr>
                <tr>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                :only-of-type
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        Struktur-Pseudoklassen
                    </td>
                    <td>
                        Ein Element, das das einzige gleichartige Kind-Element eines Eltern-Elements ist.
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                p:only-of-type {
                                    font-size: 1.5em;
                                }
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                </tr>
                <tr>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                :lang(xx)
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        Sprach-Pseudoklasse
                    </td>
                    <td>
                        Selektiert Elemente, bei denen die Sprache mit dem Attribut <code>lang="xx"</code> versehen
                        wurde.
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                p:lang(de) {
                                    font-family: Arial, sans-serif;
                                }
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                </tr>
                <tr>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                :not(s)
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        Negations-Pseudoklasse
                    </td>
                    <td>
                        Selektiert Elemente, auf die Selektor <code>s</code> nicht zutrifft.
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                a:not(.external) {
                                    color: red;
                                }
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                </tr>
                <tr>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                :is(s1,s2, ...)
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        Matches-Pseudoklasse
                    </td>
                    <td>
                        Selektiert alle Elemente, auf die Selektor <code>s1</code> und <code>s2 ...</code> zutreffen.
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                h1:is(.class1,.class2) {
                                    color: red;
                                }
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                </tr>
                <tr>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                :where(s1,s2, ...)
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                    <td>
                        Matches-Pseudoklasse
                    </td>
                    <td>
                        wie <code>:is()</code>, nur mit weniger Spezifität
                    </td>
                    <td>
                        <!-- @formatter:off -->
                        <code-block lang="css">
                            <![CDATA[
                                h1:where(.class1,.class2) {
                                    color: red;
                                }
                            ]]>
                        </code-block>
                        <!-- @formatter:on -->
                    </td>
                </tr>
            </table>

            <note>
                Dies sind nur einige Beispiele, es gibt noch viele weitere Pseudoklassen, die in CSS verwendet werden
                können. Die Pseudoklassen können auch miteinander kombiniert werden, um noch spezifischere Selektoren
                zu erstellen.
            </note>

            <note>
                Wichtig ist, die Reihenfolge der Pseudoklassen-Selektoren einzuhalten, also z.B. <code>:link</code>,
                <code>:visited:</code>, <code>:hover</code>, <code>:focus</code> und <code>:active</code>, da ansonsten
                <code>:visited</code> die Pseudoklasse <code>:hover</code> überschreibt. Gibt es mal Probleme damit,
                dass eine dynamische Pseudoklasse nicht so funktioniert wie gedacht, liegt das vermutlich daran, dass
                eine Pseudoklasse eine andere überschrieben hat. In dem Fall sollte die Reihenfolge der Pseudoklassen
                überprüft werden.
            </note>
        </chapter>

        <chapter id="types-pseudoelementselector" title="Pseudoelement-Selektor">
        </chapter>

        <chapter id="types-combinatorselector" title="Kombinatoren">
        </chapter>
    </chapter>

    <chapter id="naming-conventions" title="Namenskonventionen">
        <chapter id="naming-conventions-characters" title="Erlaupte Zeichen für Selektoren">
            <p>
                Für den Namen des Selektors dürfen nur Groß- und Kleinbuchstaben(<code>a-z; A-Z</code>), Ziffern
                (<code>0-9</code>) und der Bindestrich (<code>-</code>) sowie das Unterstrichzeichen (<code>_</code>)
                verwendet werden.
            </p>
        </chapter>

        <chapter id="Namensgebung" title="naming-conventions-naming">
            <p>
                Für die CSS-Klassen und IDs sollten sinnvolle und aussagekräftige Namen gewählt werden. Die Namen
                sollten so gewählt werden, dass sie die Funktion des Elements beschreiben, damit sie bei einer
                späteren Überarbeitung helfen, den Sinn anhand des Namens schneller nachzuvollziehen. Generell gilt,
                dass Styling-Details aus dem Namen herausgehalten werden sollen.
            </p>
        </chapter>

        <chapter id="bem" title="BEM">
            <p>
                Die <b>Block, Element Modifier (BEM) Methode</b> ist eine Namenskonvention für CSS-Klassen in der
                Webentwicklung. Sie hilft dabei, CSS-Selektoren zu strukturieren und zu benennen. Die BEM-Methode ist
                besonders nützlich, wenn mehrere Entwickler an einem Projekt arbeiten, da sie die Lesbarkeit und
                Wartbarkeit des Codes verbessert.
            </p>

            <!-- @formatter:off -->
            <code-block lang="css">
                <![CDATA[
                    block-name__elem-name_mod-name_mod-val
                ]]>
            </code-block>
            <!-- @formatter:on -->

            <list type="bullet">
                <li>
                    Namen werden klein und mit Latin Buchstaben geschrieben.
                </li>
                <li>
                    Wörter werden mit einem Bindestrich <code>-</code> getrennt.
                </li>
                <li>
                    Der Blockname definiert den Namensbereich für die Elemente und Modifikatoren.
                </li>
                <li>
                    Der Elementname wird durch zwei Unterstriche <code>__</code> vom Blocknamen getrennt.
                </li>
                <li>
                    Der Modifikatorname wird durch einem Unterstrich <code>_</code> vom Block- oder Elementnamen
                    getrennt.
                </li>
                <li>
                    Der Modifikatorwert wird durch einem Unterstrich <code>_</code> vom Modifikatornamen getrennt.
                </li>
                <li>
                    Für boolesche Modifikatoren wird der Modifikatorwert weggelassen.
                </li>
            </list>
        </chapter>
    </chapter>

    <chapter id="quellen" title="Quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836297288, "HTML und CSS - Das umfassende Handbuch", Jürgen Wolf, 2023
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://en.bem.info/methodology/naming-convention/#naming-rules"/>, 2025-01-04 15:16
        </tip>
    </chapter>
</topic>