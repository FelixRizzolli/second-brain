<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="css-box"
       title="Das Box-Modell"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">
    <show-structure depth="2" for="chapter,procedure"/>
    <link-summary rel="description"/>

    <!-- TODO -->
    <chapter id="description" title="Beschreibung">
        ...
    </chapter>

    <chapter id="classic" title="Das klassische Box-Modell von CSS">
        <p>
            Das Box-Modell ist ein Konzept in CSS, das die Darstellung von Elementen auf einer Webseite beschreibt.
            Jedes Element wird als Rechteck betrachtet, das aus vier Bereichen oder auch Boxen besteht:
        </p>

        <img alt="CSS Box-Modell" src="css-box-classic.png"/>

        <list>
            <li>
                <p>
                    <b>
                        Inhaltsbereich - die <i>Contentbox</i>
                    </b>
                </p>

                <p>
                    Der Inhaltsbereich ist der Bereich, in dem der eigentliche Inhalt des Elements platziert wird. Er
                    wird mit der Eigenschaft <code>width</code> (für die Breite) und <code>height</code> (für die
                    Höhe) definiert. Mit Eigenschaften wie <code>min-width</code>, <code>max-width</code>,
                    <code>min-height</code> und <code>max-height</code> kann die Größe des Inhaltsbereichs begrenzt
                    werden.
                </p>
            </li>
            <li>
                <p>
                    <b>
                        Innenabstand - die <i>Paddingbox</i>
                    </b>
                </p>

                <p>
                    Der Innenabstand (bzw. Polsterung, Auffüllung) ist der Abstand zwischen dem Inhalt und dem Rand des
                    Elements und wird mit der Eigenschaft <code>padding</code> definiert.
                </p>
            </li>
            <li>
                <p>
                    <b>
                        Rahmen - die <i>Borderbox</i>
                    </b>
                </p>

                <p>
                    Der Rahmen ist die Linie, die den Inhalt des Elements umgibt und wird mit der Eigenschaft
                    <code>border</code> definiert.
                </p>
            </li>
            <li>
                <p>
                    <b>
                        Außenabstand - die <i>Marginbox</i>
                    </b>
                </p>

                <p>
                    Der Außenabstand ist der Abstand zwischen dem Rahmen des Elements und anderen Elementen und wird mit
                    der Eigenschaft <code>margin</code> definiert. Der Außenabstand hat keine Farbe, ist komplett
                    transparent und übernimmt daher die Hintergrundfarbe des umgebenden Elements. Zudem können für
                    <code>margin</code> negative Werte angegeben werden. Wie sich negative Werte auswirken, hängt
                    davon ab, ob es sich um statische, positionierte oder gefloatete Elemente handelt.
                </p>
            </li>
        </list>

        <note>
            Das Box-Modell eines Elements lässt sich im Browser in den Entwicklereinstellungen (Developer Tools) super
            analysieren. Mehr dazu hier: <a href="web-dev-tools.topic#element-inspector-styles"/>.
        </note>

        <p>
            Die Eigenschaften <code>padding</code>, <code>border</code> und <code>margin</code> sind kurzschreibweisen
            für die Eigenschaften <code>padding-top</code>, <code>padding-right</code>, <code>padding-bottom</code>,
            <code>padding-left</code>, ...
        </p>

        <!-- @formatter:off -->
        <code-block lang="css">
            <![CDATA[
                p {
                    /* top: 10px, right: 20px, bottom: 30px, left: 40px */
                    padding: 10px 20px 30px 40px;

                    /* top: 1px, right: 1px, bottom: 1px, left: 1px */
                    border: 1px;

                    /* top: 5px, right: 10px, bottom: 5px, left: 10px */
                    margin: 5px 10px;
                }
            ]]>
        </code-block>
        <!-- @formatter:on -->

        <chapter id="css-overflow" title="CSS-Eigenschaft &raquo;overflow&laquo;">
            <p>
                Die CSS-Eigenschaft <code>overflow</code> wird verwendet, um festzulegen, wie mit Inhalten umgegangen
                werden soll, die über die Größe des Inhaltsbereichs hinausgehen. Soll diese Eigenschaft nur für die
                horizontale oder vertikale Achse gelten, können die Eigenschaften <code>overflow-x</code> und
                <code>overflow-y</code>. Die möglichen Werte sind:
            </p>

            <list type="bullet">
                <li>
                    <code>hidden</code>: Die Inhalte werden nicht angezeigt und abgeschnitten.
                </li>
                <li>
                    <code>scroll</code>: Es wird ein Scrollbalken hinzugefügt.
                </li>
                <li>
                    <code>visible</code>: Die Inhalte sind immer sichtbar (Standardwert).
                </li>
            </list>
        </chapter>

        <chapter id="css-margin-center" title="Elemente mit &raquo;margin&laquo; zentrieren">
            <p>
                Bei der CSS-Eigenschaft <code>margin</code> kann auch der Wert <code>auto</code> angegeben werden, um
                Elemente horizontal zu zentrieren. Dies funktioniert jedoch nur bei Block-Elementen, die eine feste
                Breite haben.
            </p>

            <!-- @formatter:off -->
            <code-block lang="css">
                <![CDATA[
                    article {
                        width: 75%;
                        padding: 0.5em;
                        margin: 1em auto;
                    }
                ]]>
            </code-block>
            <!-- @formatter:on -->
        </chapter>

        <chapter id="css-collapsing-margins" title="Collapsing Margins (zusammenfallende vertikale Außenabstände)">
            <p>
                Bei vertikalen Außenabständen (<code>margin</code>) von Block-Elementen kann es zu einem Phänomen
                kommen, das als <i>Collapsing Margins</i> bezeichnet wird. Dabei fallen die Außenabstände von
                benachbarten Elementen zusammen, sodass der größere Außenabstand den kleineren Außenabstand
                überschreibt. Horizontale Außenabstände werden nicht zusammengeführt. Das Zusammenfallen ist
                beabsichtigt und dient dazu, dass der Abstand bei Texten, die aus mehreren Absätzen bestehen,
                gleichmäßig bleibt.
            </p>

            <p>
                Ein häufiges Problem bei zusammenfallenden vertikalen Außenabständen (Collapsing Margins) ist, dass sie
                oft unbemerkt bleiben, wenn das Layout nicht wie gewünscht funktioniert. Besonders bei Überschriften,
                Absätzen, Listen oder Zitaten kann man dieses Problem mindern, indem man <code>margin-top</code> dieser
                Elemente auf <code>0</code> setzt. Den Abstand zum nächsten Element kann man dann einfach mit
                <code>margin-bottom</code> steuern. Dadurch wird das Zusammenfallen der Außenabstände weitgehend
                vermieden. Die entsprechende CSS-Regel sieht folgendermaßen aus:
            </p>

            <!-- @formatter:off -->
            <code-block lang="css">
                <![CDATA[
                    h1, h2, h3, h4, h5, h6, p, ul, ol, blockquote {
                        margin-top: 0;
                    }
                ]]>
            </code-block>
            <!-- @formatter:on -->
        </chapter>

        <chapter id="css-box-size" title="Gesamtbreite einer Box berechnen">
            <p>
                Die Gesamtbreite einer Box errechnet sich, indem man <code>width</code>, <code>padding-right</code>,
                <code>padding-left</code>, <code>border-right-width</code> und <code>border-left-width</code>, sowie
                <code>margin-right</code> und <code>margin-left</code> addiert. Hier ein Beispiel:
            </p>

            <!-- @formatter:off -->
            <code-block lang="css">
                <![CDATA[
                    .article_01 {
                        width: 600px;
                        padding: 5px;
                        border: 1px solid black;
                        background-color: sandybrown;
                        margin: 5px 0px;
                    }
                    .article_02 {
                        width: 600px;
                        padding: 15px;
                        border: 2px solid sienna;
                        background-color: antiquewhite;
                    }
                ]]>
            </code-block>
            <!-- @formatter:on -->

            <table>
                <tr>
                    <td>CSS-Eigenschaft</td>
                    <td>.article_01</td>
                    <td>.article_02</td>
                </tr>
                <tr>
                    <td><code>width</code></td>
                    <td>600 Pixel</td>
                    <td>600 Pixel</td>
                </tr>
                <tr>
                    <td><code>padding-right</code></td>
                    <td>5 Pixel</td>
                    <td>15 Pixel</td>
                </tr>
                <tr>
                    <td><code>padding-left</code></td>
                    <td>5 Pixel</td>
                    <td>15 Pixel</td>
                </tr>
                <tr>
                    <td><code>border-right-width</code></td>
                    <td>1 Pixel</td>
                    <td>2 Pixel</td>
                </tr>
                <tr>
                    <td><code>border-left-width</code></td>
                    <td>1 Pixel</td>
                    <td>2 Pixel</td>
                </tr>
                <tr>
                    <td><code>margin-right</code></td>
                    <td>0 Pixel</td>
                    <td>0 Pixel</td>
                </tr>
                <tr>
                    <td><code>margin-left</code></td>
                    <td>0 Pixel</td>
                    <td>0 Pixel</td>
                </tr>
                <tr>
                    <td><b>Gesamtbreite</b></td>
                    <td><b>612 Pixel</b></td>
                    <td><b>634 Pixel</b></td>
                </tr>
            </table>
        </chapter>
    </chapter>

    <chapter id="alternative" title="Das alternative Box-Modell von CSS">
        <p>
            Das Problem beim klassischen Box-Modell ist, dass man die Breite und Höhe eines Elements berechnen muss, um
            die Gesamtbreite bzw. -höhe zu ermitteln. Noch umständlicher wird es, wenn man z.B. bei einem zweispaltigen
            Layout eine Spalte mit 30 % Breite (<code>width</code>) angibt und beim <code>padding</code> und
            <code>border</code> noch jeweils 5 Pixel notiert hat. Hier wird es schwierig, genau zu sagen, wie viel Platz
            die Spalte tatsächlich einnimmt. Das alternative Box-Modell schafft hier Abhilfe. Es unterscheidet sich vom
            klassischen in der Berechnung der Breite und Höhe eines Elements. Hier hat man nicht mehr dieses Problem
            mit der Rechnerei oder dem Tricksen, innerhalb einer Spalte z.B. ein weiteres <code>&lt;div&gt;</code> für
            <code>padding</code>, <code>border</code> und <code>margin</code> zu ergänzen. Mit dem neuen Box-Modell
            <code>border-box</code> wird die Breite mit <code>width</code> und die Höhe mit <code>height</code> nicht
            mehr »nur« für den Inhaltsbereich festgelegt, sondern diese Angaben berücksichtigen auch sinnvollerweise den
            Innenabstand (<code>padding</code>) und den Rahmen (<code>border</code>).
        </p>

        <p>
            Das alternative Box-Modell wird mit der Eigenschaft <code>box-sizing</code> definiert. Die möglichen Werte
            sind:
        </p>

        <list type="bullet">
            <li>
                <code>content-box</code>: Der Standardwert - klassisches Box-Modell. Hier entspricht die Breite
                (<code>width</code>) und Höhe (<code>height</code>) dem Inhalt des Elements in der Box.
            </li>
            <li>
                <code>border-box</code>: Bei dieser Angabe entspricht der Wert für <code>width</code> und
                <code>height</code> dem Wert von <code>border-left</code> bis <code>border-right</code> bzw. von
                <code>border-top</code> bis <code>border-bottom</code>. Ein Verändern von <code>padding</code> und
                <code>border</code> ändert die Breite bzw. Höhe des Elements nicht mehr.
            </li>
            <li>
                <code>inherit</code>: Mit dieser Option wird der Wert vom Eltern-Element übernommen.
            </li>
        </list>
    </chapter>

    <chapter id="logical-properties" title="Logische Eigenschaften">

    </chapter>

    <chapter id="inline-elements" title="Inline-Elemente">

    </chapter>

    <chapter id="quellen" title="Quellen">
        <tip>
            <b>(BUCH)</b>
            978-3836297288, "HTML und CSS - Das umfassende Handbuch", Jürgen Wolf, 2023
        </tip>
    </chapter>
</topic>