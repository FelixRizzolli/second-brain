<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="sql-ddl-views"
       title="Views"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">
    <show-structure depth="2" for="chapter,procedure"/>

    <chapter id="grundlagen" title="Grundlegendes über Views">
        <p>
            Mittels einer View (Sichten) bietet SQL die Möglichkeit <code>SELECT</code>-Abfragen unter einem Namen
            dauerhaft in einer Datenbank zu hinterlegen. Die gespeicherte View kann wie eine gewöhnliche Tabelle mit
            einer <code>SELECT</code>-Anweisung abgefragt werden. Wird eine View abgefragt, so wird die
            <code>SELECT</code>-Anweisung ausgeführt, die bei der Erstellung der View definiert wurde.
        </p>
        <p>
            Es gibt zwei Gründe, Views zu verwenden:
        </p>

        <list style="decimal">
            <li>
                Mit Views besteht die Möglichkeit, komplexe SQL-Anweisungen dauerhaft in der Datenbank zu speichern und
                auf die Views wie auf eine Tabelle mit einer <code>SELECT</code>-Anweisung zuzugreifen. Das erleichtert
                den Umgang mit dem Datenbestand.
            </li>
            <li>
                Ein komplexes Datenmodell und die beteiligten Tabellen (z.B. Tabellen einer Personalabteilung) sollen in
                der Regel nicht jedem zugänglich gemacht werden. Mit Views können komplexe
                <code>SELECT</code>-Anweisungen (gegebenenfalls mit vielen <code>JOIN</code>s) gekapselt werden. Die
                tatsächlich abgefragte Tabelle bleibt dabei verborgen.
            </li>
        </list>

        <chapter id="grundlagen-cud" title="INSERT, UPDATE und DELETE auf Views anwenden">
            <p>
                Eine <code>INSERT</code>-Anweisung kann ohne weiteres auf Views verwendet werden, die nur eine Tabelle
                abfragen. Hierbei muss darauf geachtet werden, dass in der zugrundeliegenden
                <code>SELECT</code>-Anweisung auch die Primärschlüsselspalte abgefragt wird. Wenn in der Tabelle der
                zugrundeliegenden <code>SELECT</code>-Anweisung Einschränkungen mit <code>NOT NULL</code> definiert
                sind, sind diese ebenfalls beim Einfügen von Zeilen über eine View zu berücksichtigen. Wenn Zeilen in
                eine View eingefügt werden sollen, der eine <code>SELECT</code>-Anweisung mit einem <code>JOIN</code>
                zugrunde liegt, so kann nur in eine der zugrundeliegenden Tabellen eine neue Zeile eingefügt werden.
            </p>
            <p>
                Views mit einem <code>SELECT</code>-Befehl, der nur eine Tabelle oder auch mehrere Tabellen abfragt,
                können mit einer <code>UPDATE</code>-Anweisung aktualisiert werden.
            </p>
            <p>
                Eine <code>DELETE</code>-Anweisung kann nur auf Views ausgeführt werden, deren zugrundeliegende
                <code>SELECT</code>-Abfrage eine Tabelle abfragt. Liegt ein <code>JOIN</code> zugrunde, können die
                Zeilen nicht gelöscht werden.
            </p>
            <p>
                <code>INSERT</code>-, <code>UPDATE</code> und <code>DELETE</code>-Anweisungen können nicht auf eine View
                ausgeführt werden, wenn sie folgende Klauseln oder Aggregatfunktionen enthalten: <code>DISTINCT</code>,
                <code>SUM</code>, <code>MIN</code>, <code>MAX</code>, <code>AVG</code>, <code>COUNT</code>,
                <code>GROUP BY</code>, <code>HAVING</code>, <code>HAVING ALL</code>, <code>LEFT OUTER JOIN</code>,
                <code>RIGHT OUTER JOIN</code>, <code>FULL OUTER JOIN</code>, <code>UNION</code> und Unterabfragen in der
                Spaltenauswahlliste.
            </p>
            <p>
                <code>INSERT</code>- und <code>UPDATE</code>-Anweisungen können auch nicht auf Spalten angewendet
                werden, die einen Ausdruck enthalten. Solche Ausdrücke sind beispielsweise:
                <code>Spaltenwert1 + 2</code>, <code>TRIM(Spaltenname)</code>.
            </p>
        </chapter>
    </chapter>

    <chapter id="create" title="CREATE VIEW: Views anlegen">
        <p>
            Views werden mit der <code>CREATE VIEW</code>-Anweisung angelegt. Die Namen der zu erstellenden Views dürfen
            nicht identisch mit bestehenden Tabellennamen sein. Es ist daher ratsam, Views mit einem Präfix wie
            <code>v_</code> zu versehen, um sie von Tabellen unterscheiden zu können. In der zugrundeliegenden
            <code>SELECT</code>-Anweisung einer View dürfen keine gleichen Spaltennamen verwendet werden. Diese Gefahr
            besteht insbesondere, wen <code>JOIN</code>s verwendet werden.
        </p>

        <code-block lang="sql">
            CREATE VIEW v_mitarbeiter AS
            SELECT mitarbeiterid
            , vorname
            , nachname
            FROM mitarbeiter
            ;
            SELECT *
            FROM v_mitarbeiter
            ;
        </code-block>
        <code-block lang="sql">
            CREATE VIEW v_mitarbeiterkontakt AS
            SELECT m.mitarbeiterid
            , m.vorname
            , m.nachname
            , k.festnetz
            , k.mobilnetz
            FROM mitarbeiter AS m
            INNER
            JOIN kontakt AS k
            ON m.mitarbeiterid = k.mitarbeiterid
            ;
            SELECT *
            FROM v_mitarbeiterkontakt
            ;
        </code-block>
    </chapter>

    <chapter id="orderby" title="Views und ORDER BY">
        <p>
            Die einer View zugrundeliegende <code>SELECT</code>-Anweisung kann eine <code>ORDER BY</code>-Klausel
            enthalten. Wenn die View mithilfe einer <code>SELECT</code>-Anweisung abgefragt wird, werden die Zeilen in
            der Ergebnistabelle gemäß den Spaltenangaben der <code>ORDER BY</code>-Klausel sortiert zurückgegeben. Wird
            die View mit einer Sortierung durch eine <code>SELECT</code>-Abfrage abgefragt, die ebenfalls eine
            <code>ORDER BY</code>-Klausel enthält, so wird die Sortierung der <code>SELECT</code>-Abfrage auf die
            Ergebnistabelle angewendet.
        </p>

        <code-block lang="sql">
            CREATE VIEW v.mitarbeiterbonus AS
            SELECT m.vorname
            , m.nachname
            , m.bonuszahlung
            FROM mitarbeiter AS m
            INNER
            JOIN bonus AS b
            ON m.mitarbeiterid = b.mitarbeiterid
            ORDER
            BY b.bonuszahlung
            ;
        </code-block>
    </chapter>

    <chapter id="drop" title="DROP VIEW: Views ersetzen">
        <p>
            Mit der <code>DROP VIEW</code>-Anweisung wird eine View gelöscht. Die Anweisung kann für die MySQL-,
            PostgreSQL- und MS-SQL-Server-Datenbank verwendet werden.
        </p>

        <code-block lang="sql">
            DROP VIEW v_mitarbeiterkontakt;
        </code-block>
    </chapter>

    <chapter id="create-replace" title="CREATE OR REPLACE VIEW: Views ersetzen">
        <p>
            Mit der <code>CREATE OR REPLACE VIEW</code>-Anweisung kann eine bestehende View ersetzt werden. Diese
            Anweisung kann für die MySQL- und PostgreSQL-Datenbank genutzt werden.
        </p>

        <code-block lang="sql">
            DROP VIEW v_mitarbeiterkontakt;

            CREATE OR REPLACE VIEW v_mitarbeiterkontakt AS
            SELECT m.mitarbeiterid
            , m.vorname
            , m.nachname
            , k.festnetz
            , k.mobilnetz
            , k.email
            FROM mitarbeiter AS m
            INNER
            JOIN kontakt AS k
            ON m.mitarbeiterid = k.mitarbeiterid
            ;
        </code-block>
    </chapter>

    <chapter id="quellen" title="Quellen">
        <tip>
            <b>(BUCH)</b>
            978-3-836245630, Einstieg in SQL, Michael Laube, Rheinwerk Verlag GmbH, Bonn, 2018
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://www.w3schools.com/sql/sql_view.asp" ignore-vars="true">
                https://www.w3schools.com/sql/sql_view.asp
            </a>, 2022-11-10 18:45
        </tip>
    </chapter>
</topic>