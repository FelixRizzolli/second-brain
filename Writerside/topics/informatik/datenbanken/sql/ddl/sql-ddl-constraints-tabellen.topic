<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="sql-ddl-constraints-tabellen"
       title="CONSTRAINTS auf Tabellenebene"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">
    <show-structure depth="2" for="chapter,procedure"/>

    <chapter id="einleitung" title="Einleitung">
        <p>
            Auf Tabellenebene können die Einschränkungen <code>PRIMARY KEY</code>, <code>UNIQUE</code> und
            <code>CHECK</code> festgelegt werden. Eine <code>DEFAULT</code>-Einschränkung, die den Standardwert festlegt
            oder eine <code>NOT NULL</code>-Einschränkung, die eine Spalte als Pflichtwert definiert können nur auf
            Spaltenebene definiert werden. Einschränkungen auf Tabellenebene verhalten sich gleich wie auf Spaltenebene,
            nur die Schreibweise ist anders.
        </p>
        <p>
            Beim Erstellen einer Tabelle werden Einschränkungsdefinitionen immer hinter der letzten Spaltendefinition
            notiert. Eingeleitet wird sie mit dem Schlüsselwort <code>CONSTRAINT</code> und den
            Einschränkungsbezeichner. Der darauffolgende Teil ist je nach Einschränkungstyp unterschiedlich.
        </p>
    </chapter>

    <chapter id="primary-key" title="PRIMARY KEY: Primärschlüssel auf Tabellenebene">
        <p>
            Hier gibt es einen sehr wichtigen Punkt zu beachten. Soll eine Tabelle mehrere Spalten mit Primärschlüssel
            enthalten, so müssen die Primärschlüssel auf Tabellenebene notiert werden, da auf Spaltenebene nur ein
            Primärschlüssel pro Tabelle definiert werden darf. Beispiel:
        </p>

        <code-block lang="sql">
            CREATE
            TABLE zweigstellen
            ( land VARCHAR(200)
            , zweigstellenid TINYINT
            , namezweigstelle VARCHAR(200)
            , CONSTRAINT pk_land_zweigstellen PRIMARY KEY (land, zweigstellenid)
            )
            ;
        </code-block>

        <p>
            Hierbei wird der Primärschlüssel aus der Kombination der Spalten <code>land</code> und
            <code>zweigstellenid</code> zusammengesetzt. Diese beiden Werte zusammengesetzt bilden einen eindeutig
            identifizierbaren Wert. Folgende <code>INSERT</code>-Anweisungen sind somit möglich:
        </p>

        <code-block lang="sql">
            INSERT INTO zweigstellen VALUES ('Deutschland', 1, 'Zweigstelle 1');
            INSERT INTO zweigstellen VALUES ('Deutschland', 2, 'Zweigstelle 1');
            INSERT INTO zweigstellen VALUES ('Holland', 1, 'Zweigstelle 3');
            INSERT INTO zweigstellen VALUES ('Holland', 2, 'Zweigstelle 4');
        </code-block>
    </chapter>

    <chapter id="foreign-key" title="FOREIGN KEY: Fremdschlüssel auf Tabellenebene">
        <p>
            Die <code>FOREIGN KEY</code>-Beschränkung wird verwendet, um Aktionen zu verhindern, die Verbindungen
            zwischen Tabellen zerstören würden. Ein <code>FOREIGN KEY</code> ist ein Feld (oder eine Sammlung von
            Feldern) in einer Tabelle, das sich auf den PRIMARY KEY einer anderen Tabelle bezieht. Die Tabelle mit dem
            Fremdschlüssel wird als untergeordnete Tabelle und die Tabelle mit dem Primärschlüssel als referenzierte
            oder übergeordnete Tabelle bezeichnet.
        </p>

        <code-block lang="sql">
            CREATE
            TABLE Orders
            ( OrderID INT NOT NULL
            , OrderNumber INT NOT NULL
            , PersonID INT
            , PRIMARY KEY (OrderID)
            , CONSTRAINT FK_PersonOrder FOREIGN KEY (PersonID) REFERENCES Persons(PersonID)
            )
            ;
        </code-block>
    </chapter>

    <chapter id="unique" title="UNIQUE: Die Eindeutigkeitseinschränkung auf Tabellenebene">
        <p>
            Mit der <code>UNIQUE</code>-Einschränkung auf Tabellenebene verhält es sich ähnlich wie mit dem
            Primärschlüssel. Auch hier kann man die Eindeutigkeit durch das Zusammensetzen mehrerer Spaltenwerte
            überprüfen lassen.
        </p>

        <code-block lang="sql">
            CREATE
            TABLE zweigstellen
            ( globalid TINYINT PRIMARY KEY
            , land VARCHAR(200)
            , zweigstellenid TINYINT
            , namezweigstelle VARCHAR(200)
            , CONSTRAINT uq_landzweigstelle UNIQUE (land, zweigstellenid)
            )
            ;
        </code-block>
        <code-block lang="sql">
            INSERT INTO zweigstellen VALUES (1, 'Deutschland', 1, 'Zweigstelle 1');
            INSERT INTO zweigstellen VALUES (2, 'Deutschland', 2, 'Zweigstelle 2');
            INSERT INTO zweigstellen VALUES (3, 'Holland', 1, 'Zweigstelle 3');
            INSERT INTO zweigstellen VALUES (4, 'Holland', 2, 'Zweigstelle 4');
        </code-block>
    </chapter>

    <chapter id="check" title="CHECK: Plausibilitätsprüfungs-Einschränkungen auf Tabellenebene">
        <p>
            Auch die Plausibilitätsprüfung ist für MySQL erst ab der Version 8.0.16 verfügbar. Wie gewohnt beginnt man
            die Einschränkung mit dem Schlüsselwort <code>CONSTRAINT</code> und dem Einschränkungsbezeichner. Darauf
            folgt eine normale <code>CHECK</code>-Funktion.
        </p>

        <code-block lang="sql">
            CREATE
            TABLE zweigstellen
            ( globalid TINYINT PRIMARY KEY
            , land VARCHAR(200)
            , zweigstellenid SMALLINT
            , namezweigstelle VARCHAR(200)
            , mitarbeiterplanzahl SMALLINT
            , mitarbeiteristzahl SMALLINT
            , CONSTRAINT ch_mitarbeiterzahl CHECK ( mitarbeiterplanzahl >= mitarbeiteristzahl )
            )
            ;
        </code-block>
    </chapter>

    <chapter id="quellen" title="Quellen">
        <tip>
            <b>(BUCH)</b>
            978-3-836245630, Einstieg in SQL, Michael Laube, Rheinwerk Verlag GmbH, Bonn, 2018
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://www.w3schools.com/sql/sql_constraints.asp" ignore-vars="true">
                https://www.w3schools.com/sql/sql_constraints.asp
            </a>, 2022-11-13 18:00
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://www.w3schools.com/sql/sql_unique.asp" ignore-vars="true">
                https://www.w3schools.com/sql/sql_unique.asp
            </a>, 2022-11-13 18:00
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://www.w3schools.com/sql/sql_primarykey.asp" ignore-vars="true">
                https://www.w3schools.com/sql/sql_primarykey.asp
            </a>, 2022-11-13 18:00
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://www.w3schools.com/sql/sql_foreignkey.asp" ignore-vars="true">
                https://www.w3schools.com/sql/sql_foreignkey.asp
            </a>, 2022-11-13 18:00
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://www.w3schools.com/sql/sql_check.asp" ignore-vars="true">
                https://www.w3schools.com/sql/sql_check.asp
            </a>, 2022-11-13 18:00
        </tip>
    </chapter>
</topic>