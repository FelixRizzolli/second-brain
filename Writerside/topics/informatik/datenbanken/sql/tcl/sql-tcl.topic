<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="TCL (Transaction Control Language)" id="sql-tcl">
    <show-structure for="chapter,procedure" depth="2"/>

    <chapter title="Einleitung" id="einleitung">
        <p>
            Die Transaktionssicherheit, die relationale Datenbanksysteme gewährleisten, gehört zu den
            Kernfunktionalitäten und bieten die Sicherheit, dass eine oder mehrere datentechnische Operationen wie
            <code>INSERT</code>, <code>UPDATE</code> und <code>DELETE</code> durchgeführt werden.
        </p>

        <chapter title="Warum müssen Datenbankoperationen verbindlich durchgeführt werden?"
                 id="einleitung-verbindlichkeit">
            <p>
                Das erste Szenario betrifft schlicht und ergreifend Einflüsse, die wir nicht in der Hand haben.
                Beispiel: Die Sicherung des Stromnetzes setzt abrupt den Datenbankserver außer Betrieb. Oder was wäre,
                wenn es durch die Installation einiger Sicherheitsupdates zu einem Absturz des Betriebssystems käme?
                Diese Vorstellungen sind eigentlich nicht beunruhigend. Herbei kann die Sicherung ersetzt und die
                fehlerhaften Updates deinstalliert werden.
            </p>
            <p>
                Fehler an der Datenbank oder am Datenbankserver sind jedoch nicht die einzigen Störungsquellen. Eine
                Datenbank steht zentral zur Verfügung, und daher kann auch der Rechner ausfallen, von dem die
                Operationen ausgeführt werden. Beispiel: Auf dem Rechner wird mit einer MySQL Workbench auf einem
                entfernten MySQL-Datenbankserver gearbeitet und dabei bricht die Verbindung ab. Auch wenn solche Fehler
                einfach behoben werden können, bleibt eine große Frage bestehen: Was passiert mit den Operationen, die
                vor den Störungen oder mitten in einem Störfall durchgeführt werden?
            </p>
        </chapter>

        <chapter title="Forderungen an relationale Datenbanksysteme" id="einleitung-forderungen">
            <p>
                Die Forderungen werden in Kurzform auch ACID-Prinzip bezeichnet; die Abkürzung resultiert aus den
                englischen Begriffen atomacity, consistency, isolation und durability.
            </p>

            <list>
                <li>
                    <b>Operationen sollen atomar in der Ausführung sein</b>: Operationen wie <code>INSERT</code>-,
                    <code>UPDATE</code>- und <code>DELETE</code>-Anweisungen sollen ganz oder gar nicht ausgeführt
                    werden. Wenn z.B. mehrere <code>INSERT</code>-Anweisungen hintereinander auf eine Tabelle ausgeführt
                    werden sollen und nach der Hälfte der Einfügeanweisungen eine Störung eintritt, soll der
                    ursprüngliche Zustand wiederhergestellt werden. Es gilt also die Forderung, dass nicht ein Teil von
                    Operationen ausgeführt und anderer Teil aufgrund einer Störung nicht ausgeführt wird. In der
                    Gesamtheit der Durchführung ist eine Folge von Operationen also unteilbar
                    (<emphasis>atomar</emphasis>) durchzuführen.
                </li>
                <li>
                    <b>Der Datenbestand soll konsistent sein</b>: Wenn Operationen wie <code>INSERT</code>- oder
                    <code>UPDATE</code>-Anweisungen auf einer Datenbank durchgeführt werden, muss sichergestellt sein,
                    dass der Datenbestand aus einem konsistenten Zustand in einem <emphasis>konsistenten</emphasis>
                    Zustand belassen wird. Das betrifft insbesondere Schlüsselbeziehungen zwischen Tabellen bzw. die
                    referentielle Integrität. Eine Störung darf also nicht dazu führen, dass Beziehungen zwischen Zeilen
                    in einem nicht definierten Zustand vorliegen. Es gilt also die Forderung, dass eine Datenbank stets
                    die Konsistenz der Daten sicherzustellen hat.
                </li>
                <li>
                    <b>Operationen sollen isoliert voneinander durchgeführt werden</b>: Eine relationale Datenbank
                    verwaltet Daten zentral. Eine relationale Datenbank im sogenannten Multiuser-Betrieb. Das heißt,
                    dass mehrere Nutzer gleichzeitig auf die gleichen Datensätze zugreifen und diese gegebenenfalls
                    ändern oder auch löschen können. Operationen, die gleichzeitig durch unterschiedliche Nutzer an
                    einem Datensatz ausgeführt werden, dürfen sich nicht gegenseitig beeinflussen. Hier gilt die
                    Forderung, dass diese Operationen stets <emphasis>isoliert</emphasis> voneinander durchgeführt
                    werden.
                </li>
                <li>
                    <b>Daten einer Datenbank sollen dauerhaft gespeichert werden</b>: Unabhängig von jeglichen
                    Störszenarien gilt für eine relationale Datenbank die Forderung, dass die zu verwaltenden Daten
                    <emphasis>dauerhaft</emphasis> gespeichert werden.
                </li>
            </list>
        </chapter>

        <chapter title="Grundlegendes über Transaktionen" id="einleitung-grundlagen">

        </chapter>
    </chapter>

    <chapter title="Allgemeiner Aufbau einer Transaktion" id="aufbau">

    </chapter>

    <chapter title="Einen atomaren Datenzustand mit Transaktionen sicherstellen" id="atomarer-datenzustand">

    </chapter>

    <chapter title="Transaktion mit ROLLBACK rückgängig machen" id="rollback">

    </chapter>

    <chapter title="Operationen mit Transaktionen isoliert ausführen" id="isolierte-operationen">

    </chapter>

    <chapter title="Quellen" id="quellen">
        <tip>
            <b>(BUCH)</b>
            978-3-836245630, Einstieg in SQL, Michael Laube, Rheinwerk Verlag GmbH, Bonn, 2018
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://de.wikipedia.org/wiki/SQL" ignore-vars="true">
                https://de.wikipedia.org/wiki/SQL
            </a>, 2020-11-13 15:10
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://de.wikipedia.org/wiki/Transaction_Control_Language" ignore-vars="true">
                https://de.wikipedia.org/wiki/Transaction_Control_Language
            </a>, 2020-11-13 15:35
        </tip>
    </chapter>
</topic>