<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Datum und Uhrzeit" id="sql-weiteres-datetime">
    <show-structure for="chapter,procedure" depth="2"/>


    <chapter title="Grundlagen" id="grundlagen">
        <p>
            SQL bietet einige Skalarfunktionen an, die es ermöglichen, Zeit- und Datumsangaben zu formatieren und zu 
            extrahieren. Euch eine Addition oder Subtraktion mit Datums- bzw. Zeitangaben ist möglich. Die Umsetzung ist 
            je nach verwendetem Datenbanksystem verschieden.
        </p>

        <chapter title="Datumsformate" id="grundlagen-datumsformate">
            <p>
                Leider hat man sich auf ein weltweit gültiges Datumsformat nicht geeinigt. Stadtessen gibt es eine Fülle
                von gängigen Datumsformaten. Somit organisiert jede Datenbank ihre Datentypen etwas anders. Das gilt
                auch für den Datentyp <code>DATE</code> der MySQL-Datenbank, deren Entwickler sich am internationalen
                Standard der ISO 8601 orientieren.
            </p>
            <p>
                Beispiele:
            </p>
            
            <list>
                <li><code>20.08.1970</code>, in Deutschland und anderen Ländern gebräuchliches Format</li>
                <li><code>1970-08-20</code>, Datumsformat gemäß ISO 8601</li>
                <li><code>08-20-1970</code>, in Amerika übliches Datumsformat</li>
            </list>
        </chapter>
    </chapter>

    <chapter title="Ermittlung von Zeit- und Datumswerten" id="ermittlung">
        <p>
            Für die Arbeit mit Zeit- und Datumsangaben sieht der SQL-Standard folgende Skalarfunktionen vor:
        </p>

        <list>
            <li><code>CURRENT_DATE</code> gibt das aktuelle Datum zurück.</li>
            <li><code>CURRENT_TIME</code> gibt die aktuelle Uhrzeit zurück.</li>
            <li><code>CURRENT_TIMESTAMP</code> gibt den aktuellen Zeitstempel zurück.</li>
        </list>

        <p>
            Diese Skalarfunktionen können überall dort angewendet werden, Ausdrücke stehen können.
        </p>
        <p>
            Der MS SQL Server unterstützt lediglich die <code>CURRENT_TIMESTAMP</code>-Skalarfunktion gemäß dem
            SQL-Standard.
        </p>

        <code-block lang="sql">
            SELECT CURRENT_TIMESTAMP;
            SELECT CURRENT_TIMESTAMP zeitstempel;
            SELECT CURRENT_TIMESTAMP AS zeitstempel;
        </code-block>
    </chapter>

    <chapter title="Formatierung von Zeit- und Datumsangaben" id="formatierung">
        <p>
            Manchmal ist es gewünscht, ein Datum in einem anderen Format als ISO 8901 darzustellen. Der SQL-Standard
            gibt hier leider keine Vorgaben. Die einzelnen Datenbanksysteme haben dafür meist sehr variierende
            Funktionsnamen und unterscheiden sich auch bei den sog. Pattern (englisch für Muster) die auf einem
            Datumswert angewendet werden.
        </p>
        
        <list>
            <li>
                <b>MySQL</b> verwendet bezeichnet die Funktion <code>DATE_FORMAT(datum, format)</code>
            </li>
            <li>
                <b>PostgreSQL</b> bezeichnet die Funktion <code>TO_CHAR(datum, format)</code></li>
            <li>
                <b>Microsoft SQL Server</b> bezeichnet die Funktion <code>FORMAT(wert, format[,lokalisierung])</code>
            </li>
        </list>
    </chapter>

    <chapter title="Extraktion von Zeit- und Datumsangaben" id="extraktion">
        <p>
            Mit der Skalarfunktion <code>EXTRACT(teileinesdatums FROM datum)</code> bietet der SQL-Standard eine
            Funktion mit der Teile eines Datums extrahiert werden können. Dies kann der Tag eines Monats, ein Monat
            eines Jahres oder aber auch ein Jahr selbst sein. Um die Datumsbestandteile zu extrahieren, bieten die
            einzelnen Datenbankserver unterschiedliche Extraktionsmuster an.
        </p>

        <code-block lang="sql">
            /* Beispiel mit einer MySQL-Datenbank */
            SELECT  vorname
                 ,  nachname
                 ,  EXTRACT(year FROM gebdatum) AS gebdatumjahr
                 ,  EXTRACT(year FROM eintrittsdatum) AS eintrittsdatumjahr
            FROM mitarbeiter
            ;
        </code-block>

        <code-block lang="sql">
            /* Beispiel mit Microsoft SQL Server */
            SELECT  vorname
                 ,  nachname
                 ,  DATEPART(year, gebdatum) AS gebdatumjahr
                 ,  DATEPART(year, eintrittsdatum) AS eintrittsdatumjahr
              FROM mitarbeiter
            ;
        </code-block>
    </chapter>

    <chapter title="Berechnungen mit Daten" id="berechnungen">
        <p>
            Auch beim Rechnen mit Daten bieten die SQL-Dialekte der einzelnen Datenbanksysteme unterschiedliche Methoden
            an.
        </p>

        <code-block lang="sql">
            /* Beispiel mit einer MySQL-Datenbank */
            SELECT DATE_ADD(datum, INTERVAL zahl datumeinheit);
            SELECT DATE_SUB(datevalue, INTERVAL zahl datumseinheit);

            SELECT DATE_ADD('2017-03-01', INTERVAL 10 DAY) AS datum;
        </code-block>

        <code-block lang="sql">
            /* Beispiel mit einer PostgreSQL-Datenbank */
            SELECT DATE 'jahr-monat-tag' + INTERVAL 'x datumeinheit';
            SELECT DATE 'jahr-monat-tag' - INTERVAL 'x datumeinheit';

            SELECT '2017-03-01' + INTERVAL '10 DAY' AS datum;
        </code-block>

        <code-block lang="sql">
            /* Beispiel mit Microsoft SQL Server */
            SELECT DATEADD(datumeinheit,zahl,datum);
            SELECT DATEADD(datumeinheit,-zahl,datum);

            SELECT DATEADD(day,10,'2017-03-01T00:00:00.000') AS datum;
        </code-block>
    </chapter>

    <chapter title="Quellen" id="quellen">
        <tip>
            <b>(BUCH)</b>
            978-3-836245630, Einstieg in SQL, Michael Laube, Rheinwerk Verlag GmbH, Bonn, 2018
        </tip>
    </chapter>
</topic>