<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="sql-weiteres-subqueries"
       title="Subqueries"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">
    <show-structure depth="2" for="chapter,procedure"/>

    <chapter id="grundlagen" title="Grundlagen">
        <p>
            Unterabfragen, oder auch Subqueries genannt, bieten in SQL eine hohe Flexibilität bei der Lösungsfindung für
            komplexe Anforderungen. Unterabfragen sind <code>SELECT</code>-Abfragen, die innerhalb einer übergeordneten
            <code>SELECT</code>-Abfrage Verwendung finden. Solche Subqueries werden angewendet, wenn innerhalb einer
            Abfrage Informationen oder Datensätze benötigt werden, die eine andere <code>SELECT</code>-Abfrage liefern
            kann. Unterabfragen können überall dort verwendet werden, wo Ausdrücke stehen können. Unterabfragen können
            in <code>SELECT</code>-Abfragen sowie auch in <code>INSERT</code>-, <code>UPDATE</code>- und
            <code>DELETE</code>-Anweisungen verwendet werden.
        </p>
        <p>
            Unterabfragen werden in zwei Kategorien unterteilt. In die erste Kategorie fallen die Unterabfragen, die
            nicht in Beziehung zur übergeordneten Abfrage stehen. Diese Unterabfragen werden als
            <emphasis>nicht
                korrelierende Abfragen
            </emphasis>
            bezeichnet. Zur zweiten Kategorie von Unterabfragen zählen diejenigen, die
            in Beziehung zu einer übergeordneten Abfrage stehen können.
        </p>
    </chapter>

    <chapter id="korrelierend" title="Korrelierende Unterabfragen">
        <p>
            Unterabfragen stehen in Korrelation zu einer übergeordneten Abfrage, wenn Spaltenwerte einer Unterabfrage
            mit Spaltenwerte einer übergeordneten Abfrage verglichen werden, um eine Beziehung zwischen den Abfragen
            herzustellen. Ein Vergleich dieser Art wird in der Regel in der <code>WHERE</code>-Klausel vorgenommen. Um
            Spalten aus Abfragen und Unterabfragen vergleichen zu können, ist es sinnvoll, Tabellenaliasse zu verwenden.
            Alternativ können auch Tabellennamen verwendet werden, um die jeweiligen Spalten einer Tabelle eindeutig zu
            identifizieren. Korrelierende Unterabfragen werden für jede Zeile der untergeordneten Abfrage ausgeführt.
            Das kann allerdings zu Problemen führen, wenn sehr große Datenbestände abgefragt werden.
        </p>

        <code-block lang="sql">
            /* BEISPIELANWENDUNG (1) */
            SELECT m.mitarbeiterid
            , m.vorname
            , m.nachname
            , m.bonus
            FROM mitarbeiter AS m
            WHERE m.bonus > ( SELECT MAX(bonuszahlung)
            FROM bonus AS b
            WHERE m.mitarbeiterid = b. mitarbeiterid
            GROUP
            BY mitarbeiterid )
            ;
        </code-block>

        <code-block lang="sql">
            /* BEISPIELANWENDUNG (2) */
            SELECT ( SELECT anrede
            FROM anrede AS a
            WHERE m.geschlecht = a.geschlecht
            ) AS anrede
            , vorname
            , nachname
            FROM mitarbeiter AS m
            ;
        </code-block>
    </chapter>

    <chapter id="nicht-korellierend" title="Nicht korrelierende Unterabfragen">
        <p>
            Unterabfragen, die nicht in Beziehung zu einer übergeordneten Abfrage stehen werden als nicht korrelierende
            Unterabfragen bezeichnet. Diese Art von Unterabfragen wird sehr häufig verwendet, um in einer
            <code>WHERE</code>-Klausel einer übergeordneten Abfrage auf das Ergebnis einer Unterabfrage zu prüfen, aus
            der ein oder mehrere Spaltenwerte resultierend aus einer Gruppierung zurückgeliefert werden. Ein weiterer
            Anwendungsbereich von nicht korrelierenden Abfragen ist das Verbinden von Zeilen einer Tabelle mit den
            Ergebniszeilen einer Unterabfrage. Ach in diesem Fall enthält die Unterabfrage häufig Resultate aus
            Gruppierungen, die mit einem <code>JOIN</code> mit weiteren Informationen angereichert werden können.
        </p>
        <p>
            Es wird zwischen folgenden Unterabfragen unterschieden:
        </p>

        <list>
            <li>Abfragen, die einen Spaltenwert zurückliefern</li>
            <li>Abfragen, die mehrere Spaltenwerte einer Spalte zurückliefern</li>
            <li>Abfragen, die mehrere Spaltenwerte aus mehreren Zeilen zurückliefern</li>
        </list>

        <p>
            Diese Differenzierung ist notwendig, um den Einsatz von Unterabfragen bestimmen zu können. Wird der
            <code>IN</code>-Operator in einer <code>WHERE</code>-Klausel einer übergeordneten Abfrage verwendet, so ist
            es zulässig, dass einer Unterabfrage einen oder mehrere Spaltenwerte zurückliefert. Wird eine Unterabfrage
            innerhalb eines <code>JOIN</code>s genutzt, so ist es zulässig, dass sie mehrere Spalten und mehrere Zeilen
            zurückliefert. Wird hingegen in einer <code>WHERE</code>-Klausel einer übergeordneten Abfrage mit einer
            Unterabfrage auf einen Spaltenwert einer übergeordneten Abfrage geprüft, so darf die Unterabfrage nur einen
            Spaltenwert zurückgeben.
        </p>
        <p>
            Eine nicht korrelierende Abfrage wird nur einmal ausgeführt. Die Ergebnistabelle kann dann von
            übergeordneten Abfragen verwendet werden. Nicht korrelierende Abfragen sind also bei weitem nicht so
            leistungshungrig wie korrelierende Abfragen.
        </p>

        <code-block lang="sql">
            /* BEISPIELANWENDUNG MIT IN-Klausel */
            SELECT vorname
            , nachname
            FROM mitarbeiter
            WHERE mitarbeiterid IN ( SELECT mitarbeiterid
            FROM bonus
            GROUP
            BY mitarbeiterid
            )
            ;
        </code-block>

        <code-block lang="sql">
            /* BEISPIELANWENDUNG MIT JOIN */
            SELECT m.vorname
            , m.nachname
            , b.maxbonuszahlung
            FROM mitarbeiter AS m
            INNER
            JOIN ( SELECT mitarbeiterid
            , MAX(bonuszahlung) AS maxbonuszahlung
            FROM bonus
            GROUP
            BY mitarbeiterid
            ) AS b
            ON m.mitarbeiterid = b.mitarbeiterid
            ;
        </code-block>
    </chapter>

    <chapter id="vergleiche" title="ANY, SOME und ALL: Vergleiche mit Ergebnistabellen aus Unterabfragen durchführen">
        <p>
            <code>ANY</code>, <code>SOME</code> und <code>ALL</code> werden verwendet, um Bedingungen zu formulieren,
            die auf Ergebnisse von Unterabfragen angewendet werden. <code>ANY</code> und <code>SOME</code> sind in ihrer
            Funktion identisch und prüfe jeweils einen Spaltenwert einer übergeordneten Abfrage gegen Spaltenwerte einer
            Unterabfrage. Die Bedingung muss nur einmal zutreffen, um wahr zu sein. Eine Bedingung, die mit
            <code>ALL</code> gegen Spaltenwerte einer Unterabfrage prüft, muss für alle Spaltenwerte der Unterabfrage
            erfüllt sein, um wahr zu sein.
        </p>

        <code-block lang="sql">
            /* BEISPIELANWENDUNG (1) */
            SELECT mitarbeiterid
            , bezahlung
            FROM bonus
            WHERE bezahlung = SOME ( SELECT umsatz
            FROM umsatz
            )
            ;
        </code-block>

        <code-block lang="sql">
            /* BEISPIELANWENDUNG (2) */
            SELECT bonuszahlung
            , mitarbeiterid
            FROM bonus
            WHERE bonuszahlung > ALL ( SELECT umsatz
            FROM umsatz
            )
            ;
        </code-block>
    </chapter>

    <chapter id="exists" title="EXISTS: Auf die Existenz von Zeilen Prüfen">
        <p>
            Mit dem <code>EXISTS</code>-Vergleichsoperator wird in einer <code>WHERE</code>-Klausel einer übergeordneten
            Abfrage geprüft, ob einer Unterabfrage eine Zeile zurückgibt. Die Anzahl der Spalten sowie deren Inhalt, die
            in diesem Fall von der Unterabfrage zurückgeliefert werden, sind nicht von Bedeutung. Es wird nur
            ausgewertet, ob eine Zeile zurückgegeben wird.
        </p>

        <code-block lang="sql">
            /* BEISPIELANWENDUNG (1) */
            SELECT m.vorname
            , m.nachname
            FROM mitarbeiter AS m
            WHERE EXISTS( SELECT b.mitarbeiterid
            FROM bonus AS b
            WHERE b.mitarbeiterid = m.mitarbeiterid
            )
            ;
        </code-block>

        <code-block lang="sql">
            /* BEISPIELANWENDUNG (2) */
            SELECT m.vorname
            , m.nachname
            FROM mitarbeiter AS m
            WHERE NOT EXISTS( SELECT b.mitarbeiterid
            FROM bonus AS b
            WHERE b.mitarbeiterid = m.mitarbeiterid
            )
            ;
        </code-block>
    </chapter>

    <chapter id="quellen" title="Quellen">
        <tip>
            <b>(BUCH)</b>
            978-3-836245630, Einstieg in SQL, Michael Laube, Rheinwerk Verlag GmbH, Bonn, 2018
        </tip>
    </chapter>
</topic>