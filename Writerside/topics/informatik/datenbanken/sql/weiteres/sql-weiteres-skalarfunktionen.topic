<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="sql-weiteres-skalarfunktionen"
       title="Skalarfunktionen"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">
    <show-structure depth="2" for="chapter,procedure"/>

    <chapter id="grundlagen" title="Grundlagen">
        <p>
            Funktionen, die einen Wert als Ergebnis einer Verarbeitung zurückliefern, werden als Skalarfunktionen
            bezeichnet. Die Verarbeitung kann aus Berechnungen, Textoperationen oder Datums- und Zeitoperationen
            resultieren. Skalarfunktionen werden auf Zeilenebene angewendet. Soll heißen: Alle Spalten, die in einer
            Zeile vorkommen können auch als potenzielle Kandidaten für Parameterangaben für Skalarfunktionen verwendet
            werden. Als Parameter werden je nach Skalarfunktion und ihrer Verwendung auch Literale (Zahlen, Text,
            Datums-, Zeitangaben) verwendet. Es gibt auch zahlreiche Skalarfunktionen, die keinen Parameter übergeben
            bekommen. Hierzu zählt z.B. die Skalarfunktion <code>SESSION_USER</code>. Sie liefert lediglich den Nutzer
            zurück, der gerade in einer gültigen Sitzung aktiv ist. Es gibt zahlreiche Funktionen, und viele
            unterscheiden sich in der Schreibweise und Anwendung in den unterschiedlichen Datenbanksystemen. Hierbei
            sollte immer die jeweilige Dokumentation als weiterführende Literatur verwendet werden.
        </p>
        <p>
            Funktionen sind kleine Programme, die bestimmte Aufgaben erfüllen. Skalarfunktionen können überall
            angewendet werden, wo Spaltenwerte bzw. Ausdrücke stehen können. Es gibt zahlreiche Funktionen für folgende
            Anwendungsgebiete:
        </p>

        <list>
            <li>numerische Skalarfunktionen</li>
            <li>Zeichenketten-Skalarfunktionen</li>
            <li><a href="sql-weiteres-datetime.topic">Datums-Skalarfunktionen</a></li>
            <li>Konvertierungsfunktionen</li>
        </list>
    </chapter>

    <chapter id="textwerte" title="Funktionen für Textwerte">
        <table>
            <tr>
                <td>Skalarfunktion</td>
                <td>Funktionsbeschreibung</td>
                <td>Beispiel</td>
            </tr>
            <tr>
                <td><code>LOWER(spaltenname)</code></td>
                <td>
                    Der Funktion <code>LOWER</code> wird ein Spaltenname oder ein Text-literal übergeben. Sie wandelt
                    dann sämtlich Buchstaben der Spaltenwerte in Kleinbuchstaben um und gibt diesen Wert zurück.
                </td>
                <td>
                    <code-block lang="sql">
                        SELECT name
                        , LOWER(name) AS nameklein
                        FROM mitarbeiter
                        ;
                    </code-block>
                </td>
            </tr>
            <tr>
                <td><code>UPPER(spaltenname)</code></td>
                <td>
                    Der Funktion <code>UPPER</code> wird ein Spaltenname oder Literal übergeben. Sie wandelt sämtliche
                    Zeichen der Spaltenwerte in Großbuchstaben um und gibt diesen Wert zurück.
                </td>
                <td>
                    <code-block lang="sql">
                        SELECT name
                        , UPPER(name) AS namegross
                        FROM mitarbeiter
                        ;
                    </code-block>
                </td>
            </tr>
            <tr>
                <td><code>TRIM(spaltenname)</code></td>
                <td>
                    Der Funktion <code>TRIM</code> wird ein Spaltenname oder ein Literal übergeben. Sie entfernt
                    sämtliche Leerzeichen und Tabulatoren vor und hinter den Spaltenwerten und gibt das Ergebnis als
                    Wert zurück.
                </td>
                <td>
                    <code-block lang="sql">
                        SELECT TRIM(artikelbezeichnung) AS artikelbezeichnungohneleerzeichen
                        FROM mitarbeiter
                        ;
                    </code-block>
                </td>
            </tr>
            <tr>
                <td><code>SUBSTRING(spaltenname FROM x FOR y)</code></td>
                <td>
                    Der Funktion <code>SUBSTRING</code> wird ein Spaltenwert oder ein Textliteral angegeben, gefolgt vom
                    Schlüsselwort <code>FROM</code> und einem ganzzahlige numerischen Wert <code>x</code>, der die
                    Startposition festlegt, worauf das Schlüsselwort <code>FOR</code> und schließlich ein ganzzahligen
                    nummerischen Wert <code>y</code>, der die Länge der zu extrahierenden Zeichenkette festlegt.
                </td>
                <td>
                    <code-block lang="sql">
                        SELECT artikelbezeichnung
                        , SUBSTRING(artikelbezeichnung FROM 1 FOR 8) AS extrakt1bis8
                        FROM produkt
                        WHERE SUBSTRING(artikelbezeichnung FROM 1 FOR 8) = 'Schraube'
                        ;
                    </code-block>
                </td>
            </tr>
            <tr>
                <td>
                    <p><code>SUBSTRING(spaltenname FROM x FOR y)</code></p>
                    <p><code>(spaltenname1 || spaltenname2 || ...)</code></p>
                    <p><code>(spaltenname1 + spaltenname2 + ...)</code></p>
                </td>
                <td>
                    <p>
                        Die MySQL-Funktion <code>CONCAT</code> fügt eine beliebige Anzahl von Spaltenwerten zusammen.
                        Die Anzahl der als Parameter übergebenen Spaltennamen ist variabel.
                    </p>
                    <p>
                        Im SQL-Standard wird der Concatination-Operator <code>||</code> verwendet, um Spaltenwerte
                        aneinanderzufügen.
                    </p>
                    <p>
                        MS SQL Server verwendet den <code>+</code>-Operator, um Spaltenwerte zusammenzufügen
                    </p>
                </td>
                <td>
                    <code-block lang="sql">
                        SELECT vorname
                        , nachname
                        , CONCAT(vorname, ' ', nachname) AS name
                        FROM mitarbeiter
                        ;
                    </code-block>
                </td>
            </tr>
        </table>
    </chapter>

    <chapter id="zahlenwerte" title="Funktionen für Zahlenwerte">
        <table>
            <tr>
                <td>Skalarfunktion</td>
                <td>Funktionsbeschreibung</td>
                <td>Beispiel</td>
            </tr>
            <tr>
                <td><code>CHAR_LENGTH(spaltenname)</code></td>
                <td>
                    <p>
                        Die Funktion <code>CHAR_LENGTH</code> gibt die Länge einer Zeichenkette zurück.
                    </p>
                    <p>
                        MS SQL Server bietet <code>LEN()</code> anstelle der Funktion <code>CHAR_LENGTH()</code>.
                    </p>
                </td>
                <td>
                    <code-block lang="sql">
                        SELECT legierung
                        , CHAR_LENGTH(legierung) AS larngezeichenkette
                        FROM produkt
                        ;
                    </code-block>
                </td>
            </tr>
            <tr>
                <td><code>POSITION(zkette1 IN zkette2)</code></td>
                <td>
                    <p>
                        Die Funktion <code>POSITION</code> leifert die numerische Position einer Zeichenkette. Im
                        Beispiel (links) wird die Position der Zeichenkette <code>zkette1</code> in einer anderen
                        Zeihenkette, <code>zkette2</code>, ermittelt.
                    </p>
                    <p>
                        MS SQL Server bietet <code>CHARINDEX()</code> anstelle der Funktion <code>POSITION()</code>.
                    </p>
                </td>
                <td>
                    <code-block lang="sql">
                        SELECT legierung
                        , POSITION('Eisen' IN legierung) AS startpos
                        FROM produkt
                        ;
                    </code-block>
                </td>
            </tr>
            <tr>
                <td><code>POWER(Basis, Exponent)</code></td>
                <td>
                    Die Funktion <code>POWER</code> liefert zu einer Basis und ein Exponent als Ergebnis die Potenz
                    zurück.
                </td>
                <td>
                    <code-block lang="sql">
                        SELECT artikelbezeichnung
                        , POWER(100,3) AS potenz
                        FROM produkt
                        ;
                    </code-block>
                </td>
            </tr>
            <tr>
                <td><code>SQRT(spaltenname)</code></td>
                <td>
                    Die Funktion <code>SQRT</code> liefert zu einem numerischen Wert die Quadratwurzel als Ergebnis
                    zurück.
                </td>
                <td>
                    <code-block lang="sql">
                        SELECT artikelbezeichnung
                        , SQRT(9) AS wurzel
                        FROM produkt
                        ;
                    </code-block>
                </td>
            </tr>
        </table>
    </chapter>

    <chapter id="verschachtelt" title="Verschachtelte Funktionsaufrufe">
        <p>
            Funktionsaufrufe können auch verschachtelt werden. Dabei sind die verschachtelten Funktionen immer von innen
            nach außen zu betrachten und so bei der Formulierung von SQL-Anweisungen zu berücksichtigen.
        </p>

        <chapter id="verschachtelt-standard" title="SQL-Standard">
            <code-block lang="sql">
                SELECT artikelbezeichnung
                , legierung
                , SUBSTRING(legierung
                FROM
                POSITION('Eisen' IN legierung)
                FOR
                CHAR_LENGTH('Eisen')
                ) AS eisen
                FROM produkt
                ;
            </code-block>
        </chapter>

        <chapter id="verschachtelt-mssqlserver" title="Microsoft SQL Server">
            <code-block lang="sql">
                SELECT artikelbezeichnung
                , legierung
                , SUBSTRING(
                legierung,
                PATINDEX('%Eisen%', legierung),
                LEN('Eisen')
                ) AS eisen
                FROM produkt
                ;
            </code-block>
        </chapter>
    </chapter>

    <chapter id="quellen" title="Quellen">
        <tip>
            <b>(BUCH)</b>
            978-3-836245630, Einstieg in SQL, Michael Laube, Rheinwerk Verlag GmbH, Bonn, 2018
        </tip>
    </chapter>
</topic>