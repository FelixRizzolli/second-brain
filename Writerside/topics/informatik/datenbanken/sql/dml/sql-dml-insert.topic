<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Einfügeoperationen mittels INSERT, SELECT INTO" id="sql-dml-insert">
    <show-structure for="chapter,procedure" depth="2"/>
    
    <chapter title="Einleitung" id="einleitung">
        <p>
            Um eine Zeile einer Tabelle hinzuzufügen wird bei der Anweisung mit dem Schlüsselwort <code>INSERT</code>
            begonnen. So wird er Datenbank mitgeteilt, dass es sich bei diesem Befehl um das Einfügen einer neuen Zeile
            handelt. Mit dem darauffolgenden Schlüsselwort <code>INTO</code> und der Tabellenbezeichnung wird angegeben
            in welch Tabelle die neue Zeile eingefügt werden soll. Die <code>INSERT</code>-Anweisung sieht zwei
            Varianten vor, Zeilen einzufügen: <code>INSERT</code> mit expliziter Spaltenangabe und <code>INSERT</code>
            ohne Spaltenangabe.
        </p>

        <p>
            Als Beispiel für die Erklärungen wird folgende Tabelle <code>qualifikationen</code> verwendet:
        </p>

        <table>
            <tr>
                <td>qid</td>
                <td>bezeichnung</td>
                <td>kuerzel</td>
                <td>kategorie</td>
            </tr>
        </table>
    </chapter>

    <chapter title="INSERT mit expliziter Spaltenangabe" id="mit-spaltenausgabe">
        <p>
            Nach der Angabe der Tabelle, in die die neue Zeile eingefügt werden soll, folgen die Spalten welche
            kommasepariert aufgelistet werden. Diese werden mit einem einfachen Klammern Paar <code>( )</code>
            umschlossen. Nun wird das Schlüsselwort <code>VALUES</code> notiert, worauf ein weiteres einfaches Klammern
            Paar die zur Spaltenliste dazugehörigen Werte enthält, welche den neuen Datensatz bilden. Die Reihenfolge,
            in der die Spalten aufgelistet werden, ist beliebig, muss aber natürlich auch mit der Reihenfolg der
            dazugehörigen Werte übereinstimmen. Es können auch Spalten ausgelassen werden, dabei fügt die Datenbank den
            Wert <code>NULL</code> für dieses Datenfeld in die Tabelle ein. <code>NULL</code> kann auch direkt als Wert
            eingetragen werden.
        </p>

        <code-block lang="sql">
            INSERT INTO qualifikationen (qid, bezeichnung, kuerzel, kategorie) VALUES (1,'Word','msw','Office');
            INSERT INTO qualifikationen (kuerzel, qid, kategorie, bezeichnung) VALUES ('mex',2,'Office','Excel');
            INSERT INTO qualifikationen (qid, bezeichnung) VALUES (3, 'Outlook');
            INSERT INTO qualifikationen (qid) VALUES (4);
        </code-block>
    </chapter>

    <chapter title="INSERT ohne Spaltenangabe" id="ohne-spaltenausgabe">
        <p>
            Für alle Spalten einer Tabelle soll ein Spaltenwert eingefügt werden. Hier ist keine kommaseparierte Liste
            von Spaltenangaben erforderlich. Die Spaltenwerte werden hinter der <code>VALUES</code>-Klausel in einer
            umklammerten kommaseparierten Liste angegeben. Hier muss darauf geachtet werden, dass die Reihenfolge der
            Spaltenwerte der Reihenfolge der Spalten in der Datenbank entspricht, wie sie in der Tabellenerstellung
            festgelegt wurde. Da in diesem Fall die Spalten nicht mit einer kommaseparierten Liste angegeben werden,
            müssen allen Spalten Werte zugeordnet werden.
        </p>

        <code-block lang="sql">
            INSERT INTO qualifikationen VALUES (6, 'SAP Basis Know How','SAP','Office');
        </code-block>
    </chapter>
    
    <chapter title="Ergebnistabelle für die Beispiele" id="ergebnistabelle">
        <table>
            <tr>
                <td>qid</td>
                <td>bezeichnung</td>
                <td>kuerzel</td>
                <td>kategorie</td>
            </tr>
            <tr>
                <td>1</td>
                <td>Word</td>
                <td>mow</td>
                <td>Office</td>
            </tr>
            <tr>
                <td>2</td>
                <td>Excel</td>
                <td>mex</td>
                <td>Office</td>
            </tr>
            <tr>
                <td>3</td>
                <td>Outlook</td>
                <td>NULL</td>
                <td>NULL</td>
            </tr>
            <tr>
                <td>4</td>
                <td>NULL</td>
                <td>NULL</td>
                <td>NULL</td>
            </tr>
            <tr>
                <td>5</td>
                <td>MS Project</td>
                <td>NULL</td>
                <td>NULL</td>
            </tr>
            <tr>
                <td>6</td>
                <td>SAP Basis Know How</td>
                <td>SAP</td>
                <td>Office</td>
            </tr>
        </table>
    </chapter>
    
    <chapter title="SELECT INTO: Tabellen auf Basis von bestehenden Daten erstellen" id="select-into">
        <p>
            Das <code>SELECT INTO</code>-Statement kopiert Daten aus einer Tabelle in eine neue Tabelle.
        </p>

        <code-block lang="sql">
            SELECT  *
              INTO newtable [IN externaldb]
              FROM oldtable
             WHERE  condition
            ;
        </code-block>

        <p>
            Die folgende SQL-Anweisung kopiert Daten aus mehr als einer Tabelle in eine neue Tabelle:
        </p>

        <code-block lang="sql">
            SELECT  Customers.CustomerName
                 ,  Orders.OrderID
              INTO CustomersOrderBackup2017
              FROM Customers
              LEFT
              JOIN Orders
                ON  Customers.CustomerID = Orders.CustomerID
            ;
        </code-block>
    </chapter>
    
    <chapter title="INSERT INTO SELECT: Daten von anderen Tabellen kopieren" id="insert-into-select">
        <p>
            Die <code>INSERT INTO SELECT</code>-Anweisung kopiert Daten aus einer Tabelle und fügt sie in eine andere
            Tabelle ein. Die <code>INSERT INTO SELECT</code>-Anweisung setzt voraus, dass die Datentypen in Quell- und
            Zieltabelle übereinstimmen. Die vorhandenen Datensätze in der Zieltabelle bleiben unberührt.
        </p>

        <code-block lang="sql">
            INSERT
              INTO table2
                 (  column1
                 ,  column2
                 ,  column3
                 ,  ... )
            SELECT  column1
                 ,  column2
                 ,  column3
                 ,  ...
              FROM table1
             WHERE  condition
            ;
        </code-block>

        <code-block lang="sql">
            INSERT
              INTO Customers
                 (  CustomerName
                 ,  City
                 ,  Country )
            SELECT  SupplierName
                 ,  City
                 ,  Country
              FROM Suppliers
             WHERE  Country = 'Germany'
            ;
        </code-block>
    </chapter>

    <chapter title="Quellen" id="quellen">
        <tip>
            <b>(BUCH)</b>
            978-3-836245630, Einstieg in SQL, Michael Laube, Rheinwerk Verlag GmbH, Bonn, 2018
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://www.w3schools.com/sql/sql_insert.asp" ignore-vars="true">
                https://www.w3schools.com/sql/sql_insert.asp
            </a>, 2022-11-13 17:00
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://www.w3schools.com/sql/sql_select_into.asp" ignore-vars="true">
                https://www.w3schools.com/sql/sql_select_into.asp
            </a>, 2022-11-13 19:45
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://www.w3schools.com/sql/sql_insert_into_select.asp" ignore-vars="true">
                https://www.w3schools.com/sql/sql_insert_into_select.asp
            </a>, 2022-11-13 19:45
        </tip>
    </chapter>
</topic>