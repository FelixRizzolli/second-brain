<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Operatoren" id="sql-dql-operatoren">
    <show-structure for="chapter,procedure" depth="2"/>

    <chapter title="Arithmetische Operatoren" id="arithmetisch">
        <table style="header-row">
            <tr>
                <td>Operator</td>
                <td>Beschreibung</td>
            </tr>
            <tr>
                <td><code>+</code></td>
                <td>Addieren</td>
            </tr>
            <tr>
                <td><code>-</code></td>
                <td>Subtrahieren</td>
            </tr>
            <tr>
                <td><code>*</code></td>
                <td>Multiplizieren</td>
            </tr>
            <tr>
                <td><code>/</code></td>
                <td>Dividieren</td>
            </tr>
            <tr>
                <td><code>%</code></td>
                <td>Modulo</td>
            </tr>
        </table>

        <chapter title="Zusammengesetzte Operatoren" id="arithmetisch-zusammengesetzt">
            <table style="header-row">
                <tr>
                    <td>Operator</td>
                    <td>Beschreibung</td>
                </tr>
                <tr>
                    <td><code>+=</code></td>
                    <td>Addieren gleich</td>
                </tr>
                <tr>
                    <td><code>-=</code></td>
                    <td>Subtrahieren gleich</td>
                </tr>
                <tr>
                    <td><code>*=</code></td>
                    <td>Multiplizieren gleich</td>
                </tr>
                <tr>
                    <td><code>/=</code></td>
                    <td>Dividieren gleich</td>
                </tr>
                <tr>
                    <td><code>%=</code></td>
                    <td>Modulo gleich</td>
                </tr>
            </table>
        </chapter>
    </chapter>

    <chapter title="Bitweise Operatoren" id="bitweise">
        <table style="header-row">
            <tr>
                <td>Operator</td>
                <td>Beschreibung</td>
            </tr>
            <tr>
                <td><code>&amp;</code></td>
                <td>Bitweises und <code>AND</code></td>
            </tr>
            <tr>
                <td><code>|</code></td>
                <td>Bitweises oder <code>OR</code></td>
            </tr>
            <tr>
                <td><code>^</code></td>
                <td>Bitweises exklusives oder <code>OR</code></td>
            </tr>
        </table>

        <chapter title="Zusammengesetzte Operatoren" id="bitweise-zusammengesetzt">
            <table style="header-row">
                <tr>
                    <td>Operator</td>
                    <td>Beschreibung</td>
                </tr>
                <tr>
                    <td><code>&amp;=</code></td>
                    <td>Bitweises und gleich</td>
                </tr>
                <tr>
                    <td><code>|=</code></td>
                    <td>Bitweises exklusives gleich</td>
                </tr>
                <tr>
                    <td><code>^=</code></td>
                    <td>Bitweises oder gleich</td>
                </tr>
            </table>
        </chapter>
    </chapter>

    <chapter title="Vergleichsoperatoren" id="vergleich">
        <table style="header-row">
            <tr>
                <td>Operator</td>
                <td>Beschreibung</td>
            </tr>
            <tr>
                <td><code>=</code></td>
                <td>gleich wie</td>
            </tr>
            <tr>
                <td><code>&gt;</code></td>
                <td>Größer als</td>
            </tr>
            <tr>
                <td><code>&lt;</code></td>
                <td>Kleiner als</td>
            </tr>
            <tr>
                <td><code>&gt;=</code></td>
                <td>Größer oder gleich wie</td>
            </tr>
            <tr>
                <td><code>&lt;=</code></td>
                <td>Kleiner oder gleich wie</td>
            </tr>
            <tr>
                <td><code>&lt;&gt;</code></td>
                <td>Ungleich wie</td>
            </tr>
        </table>
    </chapter>

    <chapter title="Logische Operatoren" id="logisch">
        <chapter title="AND, AND NOT, OR, OR NOT" id="logisch-and-or">
            <p>
                Filterabfragen können aus mehreren Bedingungen bestehen, die mittels logischer Operatoren (=
                <code>AND</code>, <code>OR</code>, <code>AND NOT</code>, <code>OR NOT</code>) miteinander verknüpft werden.
                Mit diesen Operatoren lassen sich zwei oder beliebig viele Bedingungen miteinander logisch verknüpfen. Die
                Verknüpfungsoperatoren können auch in Kombination verwendet werden. Es kommt ganz auf die Anforderung der
                Filterfunktionalität an, die zu realisieren ist. Eine <code>AND</code>-Verknüpfung wird immer vorrangig vor
                einer <code>OR</code>-Verknüpfung ausgewertet. Mittels Klammersetzung kann wie in der Mathematik der Vorrang
                geändert werden.
            </p>

            <chapter title="AND" id="logisch-and">
                <table style="header-row">
                    <tr>
                        <td>1. Bedingung</td>
                        <td>2. Bedingung</td>
                        <td>Ergebnis</td>
                    </tr>
                    <tr>
                        <td>wahr</td>
                        <td>wahr</td>
                        <td>wahr</td>
                    </tr>
                    <tr>
                        <td>falsch</td>
                        <td>falsch</td>
                        <td>falsch</td>
                    </tr>
                    <tr>
                        <td>wahr</td>
                        <td>falsch</td>
                        <td>falsch</td>
                    </tr>
                    <tr>
                        <td>falsch</td>
                        <td>wahr</td>
                        <td>falsch</td>
                    </tr>
                </table>
            </chapter>

            <chapter title="AND NOT" id="logisch-andnot">
                <table style="header-row">
                    <tr>
                        <td>1. Bedingung</td>
                        <td>2. Bedingung</td>
                        <td>Ergebnis</td>
                    </tr>
                    <tr>
                        <td>wahr</td>
                        <td>wahr</td>
                        <td>falsch</td>
                    </tr>
                    <tr>
                        <td>falsch</td>
                        <td>falsch</td>
                        <td>wahr</td>
                    </tr>
                    <tr>
                        <td>wahr</td>
                        <td>falsch</td>
                        <td>wahr</td>
                    </tr>
                    <tr>
                        <td>falsch</td>
                        <td>wahr</td>
                        <td>wahr</td>
                    </tr>
                </table>
            </chapter>

            <chapter title="OR" id="logisch-or">
                <table style="header-row">
                    <tr>
                        <td>1. Bedingung</td>
                        <td>2. Bedingung</td>
                        <td>Ergebnis</td>
                    </tr>
                    <tr>
                        <td>wahr</td>
                        <td>wahr</td>
                        <td>wahr</td>
                    </tr>
                    <tr>
                        <td>falsch</td>
                        <td>falsch</td>
                        <td>falsch</td>
                    </tr>
                    <tr>
                        <td>wahr</td>
                        <td>falsch</td>
                        <td>wahr</td>
                    </tr>
                    <tr>
                        <td>falsch</td>
                        <td>wahr</td>
                        <td>wahr</td>
                    </tr>
                </table>
            </chapter>

            <chapter title="OR NOT" id="logisch-ornot">
                <table style="header-row">
                    <tr>
                        <td>1. Bedingung</td>
                        <td>2. Bedingung</td>
                        <td>Ergebnis</td>
                    </tr>
                    <tr>
                        <td>wahr</td>
                        <td>wahr</td>
                        <td>falsch</td>
                    </tr>
                    <tr>
                        <td>falsch</td>
                        <td>falsch</td>
                        <td>wahr</td>
                    </tr>
                    <tr>
                        <td>wahr</td>
                        <td>falsch</td>
                        <td>falsch</td>
                    </tr>
                    <tr>
                        <td>falsch</td>
                        <td>wahr</td>
                        <td>falsch</td>
                        <td>falsch</td>
                    </tr>
                </table>
            </chapter>
        </chapter>

        <chapter title="NOT" id="logisch-not">
            <p>
                Mit dem <code>NOT</code>-Operator können Bedingungen negiert werden.
            </p>

            <chapter title="Syntax" id="logisch-not-syntax">
                <code-block lang="sql">
                    SELECT  column1
                         ,  column2
                         ,  ...
                      FROM table_name
                     WHERE  NOT condition
                    ;
                </code-block>
            </chapter>
        </chapter>

        <chapter title="IN" id="logisch-in">
            <p>
                Mit dem <code>IN</code>-Operator können mehrere Werte in einer <code>WHERE</code>-Klausel angegeben
                werden. Der <code>IN</code>-Operator ist eine Kurzform für mehrere <code>OR</code>-Bedingungen.
            </p>

            <chapter title="Syntax" id="logisch-in-syntax">
                <code-block lang="sql">
                    SELECT  column_name(s)
                      FROM table_name
                     WHERE  column_name IN ( value1
                                           , value2
                                           , ... )
                    ;
                </code-block>

                <code-block lang="sql">
                    SELECT  column_name(s)
                      FROM table_name
                     WHERE  column_name IN ( SELECT STATEMENT )
                    ;
                </code-block>
            </chapter>
            <chapter title="Beispiele" id="logisch-in-beispiele">
                <code-block lang="sql">
                    SELECT  *
                      FROM Customers
                     WHERE  Country IN ( 'Germany'
                                       , 'France'
                                       , 'UK' )
                    ;
                </code-block>

                <code-block lang="sql">
                    SELECT  *
                      FROM Customers
                     WHERE  Country NOT IN ( 'Germany'
                                           , 'France'
                                           , 'UK' )
                    ;
                </code-block>

                <code-block lang="sql">
                    SELECT  *
                      FROM Customers
                     WHERE  Country IN ( SELECT Country
                                           FROM Suppliers )
                    ;
                </code-block>
            </chapter>
        </chapter>

        <chapter title="BETWEEN" id="logisch-between">
            <p>
                Der Operator <code>BETWEEN</code> wählt Werte innerhalb eines bestimmten Bereichs aus. Die Werte können
                Zahlen, Text oder Daten sein. Der Operator <code>BETWEEN</code> ist inklusiv: Anfangs- und Endwerte sind
                eingeschlossen.
            </p>

            <chapter title="Syntax" id="logisch-between-syntax">
                <code-block lang="sql">
                    SELECT  column_name(s)
                      FROM table_name
                     WHERE  column_name BETWEEN value1
                                            AND value2
                    ;
                </code-block>
            </chapter>

            <chapter title="Beispiele" id="logisch-between-beispiele">
                <code-block lang="sql">
                    SELECT  *
                      FROM Products
                     WHERE  Price BETWEEN 10
                                      AND 20
                    ;
                </code-block>

                <code-block lang="sql">
                    SELECT  *
                      FROM Products
                     WHERE  Price NOT BETWEEN 10
                                          AND 20
                    ;
                </code-block>

                <code-block lang="sql">
                    SELECT  *
                      FROM Products
                     WHERE  ProductName BETWEEN 'Carnarvon Tigers'
                                            AND 'Mozzarella di Giovanni'
                     ORDER
                        BY  ProductName
                    ;
                </code-block>

                <code-block lang="sql">
                    SELECT  *
                      FROM Orders
                     WHERE  OrderDate BETWEEN #07/01/1996#
                                          AND #07/31/1996#
                    ;
                </code-block>

                <code-block lang="sql">
                    SELECT  *
                      FROM Orders
                     WHERE  OrderDate BETWEEN '1996-07-01'
                                          AND '1996-07-31'
                    ;
                </code-block>
            </chapter>
        </chapter>

        <chapter title="LIKE" id="logisch-like">
            <p>
                Der <code>LIKE</code>-Operator wird in einer <code>WHERE</code>-Klausel verwendet, um nach einem
                bestimmten Muster in einer Spalte zu suchen.
            </p>

            <code-block lang="sql">
                SELECT  column1
                     ,  column2
                     ,  ...
                  FROM table_name
                 WHERE  columnN LIKE pattern
                ;
            </code-block>

            <chapter title="Wildcards" id="logisch-like-wildcards">
                <p>
                    Ein Wildcard (= Platzhalterzeichen) wird verwendet, um ein oder mehrere Zeichen in einer
                    Zeichenfolge zu ersetzen. Platzhalterzeichen werden mit dem <code>LIKE</code>-Operator verwendet.
                    Der <code>LIKE</code>-Operator wird in einer <code>WHERE</code>-Klausel verwendet, um nach einem
                    bestimmten Muster in einer Spalte zu suchen.
                </p>

                <chapter title="Wildcards in MS-Access" id="logisch-like-wildcards-msaccess">
                    <table>
                        <tr>
                            <td>Symbol</td>
                            <td>Beschreibung</td>
                            <td>Beispiel</td>
                        </tr>
                        <tr>
                            <td><code>*</code></td>
                            <td>
                                Steht für null oder mehr Zeichen
                            </td>
                            <td>
                                <code>'bl*'</code> findet bl, black, blue, und blob
                            </td>
                        </tr>
                        <tr>
                            <td><code>?</code></td>
                            <td>
                                Stellt ein einzelnes Zeichen dar
                            </td>
                            <td>
                                <code>'h?t'</code> findet hot, hat, und hit
                            </td>
                        </tr>
                        <tr>
                            <td><code>[]</code></td>
                            <td>
                                Steht für ein beliebiges einzelnes Zeichen innerhalb der Klammern
                            </td>
                            <td>
                                <code>'h[oa]t'</code> findet hot und hat, aber nicht hit
                            </td>
                        </tr>
                        <tr>
                            <td><code>!</code></td>
                            <td>
                                Steht für jedes Zeichen, das nicht in den Klammern steht
                            </td>
                            <td>
                                <code>'h[!oa]t'</code> findet hit, aber nicht hot und hat
                            </td>
                        </tr>
                        <tr>
                            <td><code>-</code></td>
                            <td>
                                Stellt ein beliebiges einzelnes Zeichen innerhalb des angegebenen Bereichs dar
                            </td>
                            <td>
                                <code>'c[a-b]t'</code> findet cat und cbt
                            </td>
                        </tr>
                        <tr>
                            <td><code>#</code></td>
                            <td>
                                Stellt ein einzelnes numerisches Zeichen dar
                            </td>
                            <td>
                                <code>'2#5'</code> findet 205, 225, 235, 245, 255, 265, 275, 285, and 295
                            </td>
                        </tr>
                    </table>
                </chapter>

                <chapter title="Wildcards in SQL-Server" id="logisch-like-wildcards-sqlserver">
                    <table>
                        <tr>
                            <td>Symbol</td>
                            <td>Beschreibung</td>
                            <td>Beispiel</td>
                        </tr>
                        <tr>
                            <td><code>%</code></td>
                            <td>
                                Steht für null oder mehr Zeichen
                            </td>
                            <td>
                                <code>'bl%'</code> findet bl, black, blue, und blob
                            </td>
                        </tr>
                        <tr>
                            <td><code>_</code></td>
                            <td>
                                Stellt ein einzelnes Zeichen dar
                            </td>
                            <td>
                                <code>'h_t'</code> findet hot, hat, und hit
                            </td>
                        </tr>
                        <tr>
                            <td><code>[]</code></td>
                            <td>
                                Steht für ein beliebiges einzelnes Zeichen innerhalb der Klammern
                            </td>
                            <td>
                                <code>'h[oa]t'</code> findet hot und hat, aber nicht hit
                            </td>
                        </tr>
                        <tr>
                            <td><code>^</code></td>
                            <td>
                                Steht für jedes Zeichen, das nicht in den Klammern steht
                            </td>
                            <td>
                                <code>'h[^oa]t'</code> findet hit, aber nicht hot und hat
                            </td>
                        </tr>
                        <tr>
                            <td><code>^</code></td>
                            <td>
                                Stellt ein beliebiges einzelnes Zeichen innerhalb des angegebenen Bereichs dar
                            </td>
                            <td>
                                <code>'c[a-b]t'</code> findet cat und cbt
                            </td>
                        </tr>
                    </table>
                </chapter>

                <chapter title="Beispiele" id="logisch-like-wildcards-beispiele">
                    <p>
                        Hier sind einige Beispiele für verschiedene <code>LIKE</code>-Operatoren mit den Platzhaltern
                        <code>'%'</code> und <code>'_'</code>:
                    </p>

                    <table>
                        <tr>
                            <td><code>LIKE</code>-Operator</td>
                            <td>Beschreibung</td>
                        </tr>
                        <tr>
                            <td>
                                <code>WHERE CustomerName LIKE 'a%'</code>
                            </td>
                            <td>
                                Findet alle Werte, die mit <code>"a"</code> beginnen
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <code>WHERE CustomerName LIKE '%a'</code>
                            </td>
                            <td>
                                Findet alle Werte, die mit <code>"a"</code> enden
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <code>WHERE CustomerName LIKE '%or%'</code>
                            </td>
                            <td>
                                Findet alle Werte, die an irgendeiner Stelle "or" enthalten
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <code>WHERE CustomerName LIKE '_r%'</code>
                            </td>
                            <td>
                                Findet alle Werte, die <code>"r"</code> an der zweiten Stelle haben
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <code>WHERE CustomerName LIKE 'a__%'</code>
                            </td>
                            <td>
                                Findet alle Werte, die mit <code>"a"</code> beginnen und mindestens 3 Zeichen lang sind
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <code>WHERE CustomerName LIKE 'a%o'</code>
                            </td>
                            <td>
                                Findet alle Werte, die mit <code>"a"</code> beginnen und mit <code>"o"</code> enden
                            </td>
                        </tr>
                    </table>
                </chapter>
            </chapter>
        </chapter>

        <chapter title="EXISTS" id="logisch-exists">

            <chapter title="Syntax" id="logisch-exists-syntax">

            </chapter>
            <chapter title="Beispiele" id="logisch-exists-beispiele">

            </chapter>
        </chapter>

        <chapter title="ALL" id="logisch-all">
            <chapter title="Syntax" id="logisch-all-syntax">

            </chapter>
            <chapter title="Beispiel" id="logisch-all-beispiel">

            </chapter>
        </chapter>

        <chapter title="ANY und SOME" id="logisch-anysome">
            <chapter title="Syntax" id="logisch-anysome-syntax">

            </chapter>
            <chapter title="Beispiele" id="logisch-anysome-beispiele">

            </chapter>
        </chapter>
    </chapter>

    <chapter title="Quellen" id="quellen">
        <tip>
            <b>(BUCH)</b>
            978-3-836245630, Einstieg in SQL, Michael Laube, Rheinwerk Verlag GmbH, Bonn, 2018
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://www.w3schools.com/sql/sql_in.asp" ignore-vars="true">
                https://www.w3schools.com/sql/sql_in.asp
            </a>, 2022-11-13 08:00
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://www.w3schools.com/sql/sql_like.asp" ignore-vars="true">
                https://www.w3schools.com/sql/sql_like.asp
            </a>, 2022-11-13 08:15
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://www.w3schools.com/sql/sql_wildcards.asp" ignore-vars="true">
                https://www.w3schools.com/sql/sql_wildcards.asp
            </a>, 2022-11-13 08:15
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://www.w3schools.com/sql/sql_between.asp" ignore-vars="true">
                https://www.w3schools.com/sql/sql_between.asp
            </a>, 2022-11-13 08:15
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://www.w3schools.com/sql/sql_exists.asp" ignore-vars="true">
                https://www.w3schools.com/sql/sql_exists.asp
            </a>, 2022-11-13 08:30
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://www.w3schools.com/sql/sql_any_all.asp" ignore-vars="true">
                https://www.w3schools.com/sql/sql_any_all.asp
            </a>, 2022-11-13 08:45
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://www.w3schools.com/sql/sql_operators.asp" ignore-vars="true">
                https://www.w3schools.com/sql/sql_operators.asp
            </a>, 2022-11-13 09:30
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://www.w3schools.com/sql/sql_and_or.asp" ignore-vars="true">
                https://www.w3schools.com/sql/sql_and_or.asp
            </a>, 2022-11-13 10:00
        </tip>
    </chapter>
</topic>