<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="sql-dql-mengenoperationen"
       title="Mengenoperationen (UNION, INTERSECT, EXEPT)"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">
    <show-structure depth="2" for="chapter,procedure"/>

    <warning>
        Der SQL-Standard bietet drei Mengenoperationen, welche auf Ergebnistabellen mit Spaltenwerten angewandt werden
        können. MySQL jedoch unterstützt nur die Vereinigungsmenge <code>UNION</code>.
    </warning>

    <chapter id="regeln" title="Regeln für Mengenoperationen">
        <list>
            <li>
                Die Spalten und ihre Datentypzuordnung müssen in jeder Abfrage übereinstimmen.
            </li>
            <li>
                Die Anzahl der Spalten in der Spaltenauswahlliste muss in jeder an einer Mengenoperation beteiligten
                <code>SELECT</code>-Abfrage gleich sein.
            </li>
            <li>
                <code>NULL</code>-Werte verhalten sich besonders und stellen daher eine Ausnahme dar. Da ein
                <code>NULL</code>-Wert ja kein Wert ist und somit auch keinem Datentyp zuzuordnen ist, können Sie ihn
                mit Spaltenwerten vereinen. In diesem Fall gilt die Regel nicht, dass die Datentypen übereinstimmen
                müssen.
            </li>
            <li>
                Auch die Vereinigung von Zeilen, deren Spalten ausschließlich <code>NULL</code>-Werte enthalten, ist
                möglich.
            </li>
            <li>
                Es gibt keine Begrenzung für die Anzahl der Vereinigung von Ergebnislisten.
            </li>
        </list>
    </chapter>

    <chapter id="union" title="Die Vereinigungsmenge (UNION)">
        <p>
            Es kann mit dem <code>UNION</code>-Schlüsselwort eine Vereinigungsmenge aus einer Menge A und einer Menge B
            gebildet werden. Natürlich können auch Elemente aus mehr als zwei Mengen gebildet werden. Als Beispiel zwei
            Tabellen: Die Tabelle mengea enthält die Datenwerte 1,2,3,4,5,6 und 8 in der Spalte element. Die Tabelle
            mengeb enthält die Datenwerte 2,5,6,7,8,9 und 10.
        </p>

        <code-block lang="sql">
            SELECT element FROM mengea
            UNION
            SELECT element FROM mengeb
            ;
        </code-block>

        <p>
            Mit dieser SQL-Abfrage bildet sich die Vereinigungsmenge. Die Vereinigungsmenge enthält sie Datenwerte
            1,2,3,4,5,6,7,8,9,10 in der Spalte element. Sind Dublikate auch erwünscht, so kann man der
            <code>UNION</code>-Klausel das Schlüsselwort <code>ALL</code> anhängen:
        </p>

        <code-block lang="sql">
            SELECT element FROM mengea
            UNION ALL
            SELECT element FROM mengeb
            ;
        </code-block>

        <p>
            Die Datenwerte der Spalte element dieser Vereinigungsmenge lauten: 1,2,2,3,4,5,5,6,6,7,8,8,9,10. Genauso wie
            <code>ALL</code> lässt sich auch das Schlüsselwort <code>DISTINCT</code> der <code>UNION</code>-Klausel
            anhängen. <code>DISTINCT</code> wird bereits standardmäßig verwendet lässt sich aber trotzdem optional
            notieren, um die Anweisung klarer zu machen.
        </p>

        <chapter id="beispiele" title="Beispiel">
            <chapter id="beispiele-product" title="product-Tabelle">
                <table>
                    <tr>
                        <td>artikelid</td>
                        <td>artikelbezeichnung</td>
                        <td>preis</td>
                        <td>kategorie</td>
                        <td>egierung</td>
                    </tr>
                    <tr>
                        <td><code>INTEGER</code></td>
                        <td><code>VARCHAR(300)</code></td>
                        <td><code>DECIMAL(8,2)</code></td>
                        <td><code>VARCHAR(200)</code></td>
                        <td><code>VARCHAR(300)</code></td>
                    </tr>
                    <tr>
                        <td>1</td>
                        <td>Schraube 1</td>
                        <td>2.56</td>
                        <td>Schrauben</td>
                        <td>Zink/Eisen</td>
                    </tr>
                    <tr>
                        <td>2</td>
                        <td>Schraube 2</td>
                        <td>2.30</td>
                        <td>Schrauben</td>
                        <td>Kupfer/Eisen</td>
                    </tr>
                    <tr>
                        <td>3</td>
                        <td>Schraube 3</td>
                        <td>2.21</td>
                        <td>Schrauben</td>
                        <td>Nickel/Eisen</td>
                    </tr>
                    <tr>
                        <td>4</td>
                        <td>Schraube 4</td>
                        <td>2.11</td>
                        <td>Schrauben</td>
                        <td>Gold/Eisen</td>
                    </tr>
                    <tr>
                        <td>5</td>
                        <td>Schraube 5</td>
                        <td>1.50</td>
                        <td>Schrauben</td>
                        <td>Silber/Eisen</td>
                    </tr>
                </table>
            </chapter>

            <chapter id="beispiele-produktarchiv" title="produktarchiv-Tabelle">
                <table>
                    <tr>
                        <td>artikelid</td>
                        <td>artikelbezeichnung</td>
                        <td>preis</td>
                        <td>kategorie</td>
                        <td>legierung</td>
                    </tr>
                    <tr>
                        <td><code>INTEGER</code></td>
                        <td><code>VARCHAR(300)</code></td>
                        <td><code>DECIMAL(8,2)</code></td>
                        <td><code>VARCHAR(200)</code></td>
                        <td><code>VARCHAR(300)</code></td>
                    </tr>
                    <tr>
                        <td>100</td>
                        <td>Schraube A</td>
                        <td>2.56</td>
                        <td>Schrauben</td>
                        <td>Zink/Eisen</td>
                    </tr>
                    <tr>
                        <td>101</td>
                        <td>Schraube 2</td>
                        <td>2.30</td>
                        <td>Schrauben</td>
                        <td>Kupfer/Eisen</td>
                    </tr>
                    <tr>
                        <td>102</td>
                        <td>Schraube B</td>
                        <td>2.21</td>
                        <td>Schrauben</td>
                        <td>Nickel/Eisen</td>
                    </tr>
                    <tr>
                        <td>103</td>
                        <td>Schraube 4</td>
                        <td>2.11</td>
                        <td>Schrauben</td>
                        <td>Gold/Eisen</td>
                    </tr>
                    <tr>
                        <td>104</td>
                        <td>Schraube C</td>
                        <td>1.50</td>
                        <td>Schrauben</td>
                        <td>Silber/Eisen</td>
                    </tr>
                </table>
            </chapter>

            <code-block lang="sql">
                SELECT artikelbezeichnung
                , kategorie
                , legierung
                FROM produkt
                UNION
                SELECT artikelbezeichnung
                , kategorie
                , legierung
                FROM produktarchiv
                ;
            </code-block>

            <chapter id="beispiele-ergebnistabelle" title="Ergebnistabelle">
                <table>
                    <tr>
                        <td>artikelbezeichnung</td>
                        <td>kategorie</td>
                        <td>legierung</td>
                    </tr>
                    <tr>
                        <td>Schraube 1</td>
                        <td>Schrauben</td>
                        <td>Zink/Eisen</td>
                    </tr>
                    <tr>
                        <td>Schraube 2</td>
                        <td>Schrauben</td>
                        <td>Kupfer/Eisen</td>
                    </tr>
                    <tr>
                        <td>Schraube 3</td>
                        <td>Schrauben</td>
                        <td>Nickel/Eisen</td>
                    </tr>
                    <tr>
                        <td>Schraube 4</td>
                        <td>Schrauben</td>
                        <td>Gold/Eisen</td>
                    </tr>
                    <tr>
                        <td>Schraube 5</td>
                        <td>Schrauben</td>
                        <td>Silber/Eisen</td>
                    </tr>
                    <tr>
                        <td>Schraube A</td>
                        <td>Schrauben</td>
                        <td>Zink/Eisen</td>
                    </tr>
                    <tr>
                        <td>Schraube C</td>
                        <td>Schrauben</td>
                        <td>Nickel/Eisen</td>
                    </tr>
                    <tr>
                        <td>Schraube D</td>
                        <td>Schrauben</td>
                        <td>Silber/Eisen</td>
                    </tr>
                </table>
            </chapter>
        </chapter>
    </chapter>

    <chapter id="intersect" title="Die Schnittmenge (INTERSECT)">
        <p>
            Der Ausgangspunkt ist wieder eine Mengenbetrachtung von zwei Mengen. Die Schnittmenge wird aus Elementen
            gebildet, die in beiden Mengen enthalten sind. Eine Schnittmenge von zwei Mengen wird in SQL mit der
            <code>INTERSECT</code>-Klausel ermittelt. Als Beispiel zwei Tabellen deren Datenwerte der Spalte element für
            mengea 1,2,3,4,5,6,8 und für mengeb 2,5,6,7,8,9,10.
        </p>

        <code-block lang="sql">
            SELECT element
            FROM mengea
            INTERSECT
            SELECT element
            FROM mengeb
            ;
        </code-block>

        <p>
            Die Datenwerte der Ergebnistabelle bzw. der Schnittwert beider Mengen lautet: 8,5,6,2. Würde es keine
            übereinstimmenden Zeilen geben, so wird eine leere Schnittmenge zurückgegeben. Nun ein weiteres Beispiel mit
            den Tabellen produkt und produktarchiv.
        </p>

        <code-block lang="sql">
            SELECT artikelbezeichnung
            , kategorie
            , legierung
            FROM produkt
            INTERSECT
            SELECT artikelbezeichnung
            , kategorie
            , legierung
            FROM produktarchiv
            ;
        </code-block>

        <table>
            <tr>
                <td>artikelbezeichnung</td>
                <td>kategorie</td>
                <td>legierung</td>
            </tr>
            <tr>
                <td>Schraube 2</td>
                <td>Schrauben</td>
                <td>Kupfer/Eisen</td>
            </tr>
            <tr>
                <td>Schraube 4</td>
                <td>Schrauben</td>
                <td>Gold/Eisen</td>
            </tr>
        </table>
    </chapter>

    <chapter id="except" title="Die Differenzmenge (EXCEPT)">
        <p>
            Zur Differenzmengenbildung steht in SQL der <code>EXCEPT</code>-Mengenoperator zur Verfügung. Dabei werden
            die Datensätze der Menge B welche identisch der Menge A sind aus Menge A entfernt. Die Differenz bildet das
            Ergebnis Menge C. Als Beispiel zwei Tabellen deren Datenwerte der Spalte element für mengea 1,2,3,4,5,6,8
            und für mengeb 2,5,6,7,8,9,10.
        </p>

        <code-block lang="sql">
            SELECT element
            FROM mengea
            EXCEPT
            SELECT element
            FROM mengeb
            ;
        </code-block>

        <p>
            Die Datenwerte der Ergebnistabelle bzw. die Differenzbildung beider Mengen lautet: 1,3,4. Das Resultat der
            Differenzoperation besteht nur noch aus den Elementen, die ausschließlich in Menge A enthalten sind. Die
            Elemente, die auch in Menge B enthalten waren, wurden von Menge A subtrahiert. Für ein genaueres Beispiel
            die Tabellen produkt und produktarchiv:
        </p>

        <code-block lang="sql">
            SELECT artikelbezeichnung
            , kategorie
            , legierung
            FROM produkt
            EXCEPT
            SELECT artikelbezeichnung
            , kategorie
            , legierung
            FROM produktarchiv
            ;
        </code-block>

        <table>
            <tr>
                <td>artikelbezeichnung</td>
                <td>kategorie</td>
                <td>legierung</td>
            </tr>
            <tr>
                <td>Schraube 1</td>
                <td>Schrauben</td>
                <td>Zink/Eisen</td>
            </tr>
            <tr>
                <td>Schraube 3</td>
                <td>Schrauben</td>
                <td>Nickel/Eisen</td>
            </tr>
            <tr>
                <td>Schraube 5</td>
                <td>Schrauben</td>
                <td>Silber/Eisen</td>
            </tr>
        </table>
    </chapter>

    <chapter id="where-orderby" title="Mengenoperationen in Kombination mit einer WHERE- oder ORDER BY-Klausel">
        <p>
            Die an einer Mengenoperation beteiligten <code>SELECT</code>-Abfragen können jeweils eine
            <code>WHERE</code>-Klausel zugeordnet bekommen, um gemäß einer Bedingung Zeilen zu filtern. Bei diesem
            Vorgang werden immer die <code>SELECT</code>-Abfragen mit der <code>WHERE</code>-Klausel zuerst von der
            Datenbank ausgeführt. Die Mengenoperation wird darauffolgend auf die Ergebnistabellen durchgeführt. Wird der
            Datenbestand mit einer <code>WHERE</code>-Klausel gefiltert werden die Operationen viel schneller
            abgearbeitet, da weniger Zeilen verglichen werden müssen.
        </p>

        <code-block lang="sql">
            SELECT artikelbezeichnung
            , kategorie
            , legierung
            FROM produkt
            WHERE artikelbezeichnung = 'Schraube 1'
            UNION ALL
            SELECT artikelbezeichnung
            , kategorie
            , legierung
            FROM produkt
            WHERE artikelbezeichnung = 'Schraube 1'
            ORDER
            BY legierung
            ;
        </code-block>

        <table>
            <tr>
                <td>artikelbezeichnung</td>
                <td>kategorie</td>
                <td>legierung</td>
            </tr>
            <tr>
                <td>Schraube 2</td>
                <td>Schrauben</td>
                <td>Kupfer/Eisen</td>
            </tr>
            <tr>
                <td>Schraube 1</td>
                <td>Schrauben</td>
                <td>Zink/Eisen</td>
            </tr>
        </table>

        <p>
            Eine <code>ORDER BY</code>-Klausel wird bei Mengenoperationen wie <code>UNION</code>, <code>INTERSECT</code>
            und <code>EXCEPT</code> immer hinter der letzten <code>SELECT</code>-Anweisung notiert, um die resultierende
            Ergebnistabelle zurückzuerhalten. Die <code>ORDER BY</code>-Klausel bezieht sich immer auf die
            Ergebnistabelle.
        </p>
    </chapter>

    <chapter id="quellen" title="Quellen">
        <tip>
            <b>(BUCH)</b>
            978-3-836245630, Einstieg in SQL, Michael Laube, Rheinwerk Verlag GmbH, Bonn, 2018
        </tip>
    </chapter>
</topic>