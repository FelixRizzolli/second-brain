<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Mengenoperationen (UNION, INTERSECT, EXEPT)" id="sql-dql-mengenoperationen">
    <show-structure for="chapter,procedure" depth="2"/>

    <warning>
        Der SQL-Standard bietet drei Mengenoperationen, welche auf Ergebnistabellen mit Spaltenwerten angewandt werden
        können. MySQL jedoch unterstützt nur die Vereinigungsmenge <code>UNION</code>.
    </warning>

    <chapter title="Regeln für Mengenoperationen" id="regeln">
        <list>
            <li>
                Die Spalten und ihre Datentypzuordnung müssen in jeder Abfrage übereinstimmen.
            </li>
            <li>
                Die Anzahl der Spalten in der Spaltenauswahlliste muss in jeder an einer Mengenoperation beteiligten
                <code>SELECT</code>-Abfrage gleich sein.
            </li>
            <li>
                <code>NULL</code>-Werte verhalten sich besonders und stellen daher eine Ausnahme dar. Da ein
                <code>NULL</code>-Wert ja kein Wert ist und somit auch keinem Datentyp zuzuordnen ist, können Sie ihn
                mit Spaltenwerten vereinen. In diesem Fall gilt die Regel nicht, dass die Datentypen übereinstimmen
                müssen.
            </li>
            <li>
                Auch die Vereinigung von Zeilen, deren Spalten ausschließlich <code>NULL</code>-Werte enthalten, ist
                möglich.
            </li>
            <li>
                Es gibt keine Begrenzung für die Anzahl der Vereinigung von Ergebnislisten.
            </li>
        </list>
    </chapter>

    <chapter title="Die Vereinigungsmenge (UNION)" id="union">
        <p>
            Es kann mit dem <code>UNION</code>-Schlüsselwort eine Vereinigungsmenge aus einer Menge A und einer Menge B
            gebildet werden. Natürlich können auch Elemente aus mehr als zwei Mengen gebildet werden. Als Beispiel zwei
            Tabellen: Die Tabelle mengea enthält die Datenwerte 1,2,3,4,5,6 und 8 in der Spalte element. Die Tabelle
            mengeb enthält die Datenwerte 2,5,6,7,8,9 und 10.
        </p>

        <code-block lang="sql">
            SELECT element FROM mengea
             UNION
            SELECT element FROM mengeb
            ;
        </code-block>

        <p>
            Mit dieser SQL-Abfrage bildet sich die Vereinigungsmenge. Die Vereinigungsmenge enthält sie Datenwerte
            1,2,3,4,5,6,7,8,9,10 in der Spalte element. Sind Dublikate auch erwünscht, so kann man der
            <code>UNION</code>-Klausel das Schlüsselwort <code>ALL</code> anhängen:
        </p>

        <code-block lang="sql">
            SELECT element FROM mengea
             UNION ALL
            SELECT element FROM mengeb
            ;
        </code-block>

        <p>
            Die Datenwerte der Spalte element dieser Vereinigungsmenge lauten: 1,2,2,3,4,5,5,6,6,7,8,8,9,10. Genauso wie
            <code>ALL</code> lässt sich auch das Schlüsselwort <code>DISTINCT</code> der <code>UNION</code>-Klausel
            anhängen. <code>DISTINCT</code> wird bereits standardmäßig verwendet lässt sich aber trotzdem optional
            notieren, um die Anweisung klarer zu machen.
        </p>

        <chapter title="Beispiel" id="beispiele">

        </chapter>
    </chapter>

    <chapter title="Die Schnittmenge (INTERSECT)" id="intersect">

    </chapter>

    <chapter title="Die Differenzmenge (EXCEPT)" id="except">

    </chapter>

    <chapter title="Mengenoperationen in Kombination mit einer WHERE- oder ORDER BY-Klausel" id="where-orderby">

    </chapter>

    <chapter title="Quellen" id="quellen">
        <tip>
            <b>(BUCH)</b>
            978-3-836245630, Einstieg in SQL, Michael Laube, Rheinwerk Verlag GmbH, Bonn, 2018
        </tip>
    </chapter>
</topic>