<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Mengenoperationen (UNION, INTERSECT, EXEPT)" id="sql-dql-mengenoperationen">
    <show-structure for="chapter,procedure" depth="2"/>

    <warning>
        Der SQL-Standard bietet drei Mengenoperationen, welche auf Ergebnistabellen mit Spaltenwerten angewandt werden
        können. MySQL jedoch unterstützt nur die Vereinigungsmenge <code>UNION</code>.
    </warning>

    <chapter title="Regeln für Mengenoperationen" id="regeln">
        <list>
            <li>
                Die Spalten und ihre Datentypzuordnung müssen in jeder Abfrage übereinstimmen.
            </li>
            <li>
                Die Anzahl der Spalten in der Spaltenauswahlliste muss in jeder an einer Mengenoperation beteiligten
                <code>SELECT</code>-Abfrage gleich sein.
            </li>
            <li>
                <code>NULL</code>-Werte verhalten sich besonders und stellen daher eine Ausnahme dar. Da ein
                <code>NULL</code>-Wert ja kein Wert ist und somit auch keinem Datentyp zuzuordnen ist, können Sie ihn
                mit Spaltenwerten vereinen. In diesem Fall gilt die Regel nicht, dass die Datentypen übereinstimmen
                müssen.
            </li>
            <li>
                Auch die Vereinigung von Zeilen, deren Spalten ausschließlich <code>NULL</code>-Werte enthalten, ist
                möglich.
            </li>
            <li>
                Es gibt keine Begrenzung für die Anzahl der Vereinigung von Ergebnislisten.
            </li>
        </list>
    </chapter>

    <chapter title="Die Vereinigungsmenge (UNION)" id="union">
        <p>
            Es kann mit dem <code>UNION</code>-Schlüsselwort eine Vereinigungsmenge aus einer Menge A und einer Menge B
            gebildet werden. Natürlich können auch Elemente aus mehr als zwei Mengen gebildet werden. Als Beispiel zwei
            Tabellen: Die Tabelle mengea enthält die Datenwerte 1,2,3,4,5,6 und 8 in der Spalte element. Die Tabelle
            mengeb enthält die Datenwerte 2,5,6,7,8,9 und 10.
        </p>

        <code-block lang="sql">
            SELECT element FROM mengea
             UNION
            SELECT element FROM mengeb
            ;
        </code-block>

        <p>
            Mit dieser SQL-Abfrage bildet sich die Vereinigungsmenge. Die Vereinigungsmenge enthält sie Datenwerte
            1,2,3,4,5,6,7,8,9,10 in der Spalte element. Sind Dublikate auch erwünscht, so kann man der
            <code>UNION</code>-Klausel das Schlüsselwort <code>ALL</code> anhängen:
        </p>

        <code-block lang="sql">
            SELECT element FROM mengea
             UNION ALL
            SELECT element FROM mengeb
            ;
        </code-block>

        <p>
            Die Datenwerte der Spalte element dieser Vereinigungsmenge lauten: 1,2,2,3,4,5,5,6,6,7,8,8,9,10. Genauso wie
            <code>ALL</code> lässt sich auch das Schlüsselwort <code>DISTINCT</code> der <code>UNION</code>-Klausel
            anhängen. <code>DISTINCT</code> wird bereits standardmäßig verwendet lässt sich aber trotzdem optional
            notieren, um die Anweisung klarer zu machen.
        </p>

        <chapter title="Beispiel" id="beispiele">
            <chapter title="product-Tabelle" id="beispiele-product" collapsible="true">
                <table>
                    <tr>
                        <td>artikelid</td>
                        <td>artikelbezeichnung</td>
                        <td>preis</td>
                        <td>kategorie</td>
                        <td>egierung</td>
                    </tr>
                    <tr>
                        <td><code>INTEGER</code></td>
                        <td><code>VARCHAR(300)</code></td>
                        <td><code>DECIMAL(8,2)</code></td>
                        <td><code>VARCHAR(200)</code></td>
                        <td><code>VARCHAR(300)</code></td>
                    </tr>
                    <tr>
                        <td>1</td>
                        <td>Schraube 1</td>
                        <td>2.56</td>
                        <td>Schrauben</td>
                        <td>Zink/Eisen</td>
                    </tr>
                    <tr>
                        <td>2</td>
                        <td>Schraube 2</td>
                        <td>2.30</td>
                        <td>Schrauben</td>
                        <td>Kupfer/Eisen</td>
                    </tr>
                    <tr>
                        <td>3</td>
                        <td>Schraube 3</td>
                        <td>2.21</td>
                        <td>Schrauben</td>
                        <td>Nickel/Eisen</td>
                    </tr>
                    <tr>
                        <td>4</td>
                        <td>Schraube 4</td>
                        <td>2.11</td>
                        <td>Schrauben</td>
                        <td>Gold/Eisen</td>
                    </tr>
                    <tr>
                        <td>5</td>
                        <td>Schraube 5</td>
                        <td>1.50</td>
                        <td>Schrauben</td>
                        <td>Silber/Eisen</td>
                    </tr>
                </table>
            </chapter>

            <chapter title="produktarchiv-Tabelle" id="beispiele-produktarchiv" collapsible="true">
                <table>
                    <tr>
                        <td>artikelid</td>
                        <td>artikelbezeichnung</td>
                        <td>preis</td>
                        <td>kategorie</td>
                        <td>legierung</td>
                    </tr>
                    <tr>
                        <td><code>INTEGER</code></td>
                        <td><code>VARCHAR(300)</code></td>
                        <td><code>DECIMAL(8,2)</code></td>
                        <td><code>VARCHAR(200)</code></td>
                        <td><code>VARCHAR(300)</code></td>
                    </tr>
                    <tr>
                        <td>100</td>
                        <td>Schraube A</td>
                        <td>2.56</td>
                        <td>Schrauben</td>
                        <td>Zink/Eisen</td>
                    </tr>
                    <tr>
                        <td>101</td>
                        <td>Schraube 2</td>
                        <td>2.30</td>
                        <td>Schrauben</td>
                        <td>Kupfer/Eisen</td>
                    </tr>
                    <tr>
                        <td>102</td>
                        <td>Schraube B</td>
                        <td>2.21</td>
                        <td>Schrauben</td>
                        <td>Nickel/Eisen</td>
                    </tr>
                    <tr>
                        <td>103</td>
                        <td>Schraube 4</td>
                        <td>2.11</td>
                        <td>Schrauben</td>
                        <td>Gold/Eisen</td>
                    </tr>
                    <tr>
                        <td>104</td>
                        <td>Schraube C</td>
                        <td>1.50</td>
                        <td>Schrauben</td>
                        <td>Silber/Eisen</td>
                    </tr>
                </table>
            </chapter>

            <code-block lang="sql">
                SELECT  artikelbezeichnung
                     ,  kategorie
                     ,  legierung
                  FROM produkt
                 UNION
                SELECT  artikelbezeichnung
                     ,  kategorie
                     ,  legierung
                  FROM produktarchiv
                ;
            </code-block>
            
            <chapter title="Ergebnistabelle" id="beispiele-ergebnistabelle" collapsible="true">
                <table>
                    <tr>
                        <td>artikelbezeichnung</td>
                        <td>kategorie</td>
                        <td>legierung</td>
                    </tr>
                    <tr>
                        <td>Schraube 1</td>
                        <td>Schrauben</td>
                        <td>Zink/Eisen</td>
                    </tr>
                    <tr>
                        <td>Schraube 2</td>
                        <td>Schrauben</td>
                        <td>Kupfer/Eisen</td>
                    </tr>
                    <tr>
                        <td>Schraube 3</td>
                        <td>Schrauben</td>
                        <td>Nickel/Eisen</td>
                    </tr>
                    <tr>
                        <td>Schraube 4</td>
                        <td>Schrauben</td>
                        <td>Gold/Eisen</td>
                    </tr>
                    <tr>
                        <td>Schraube 5</td>
                        <td>Schrauben</td>
                        <td>Silber/Eisen</td>
                    </tr>
                    <tr>
                        <td>Schraube A</td>
                        <td>Schrauben</td>
                        <td>Zink/Eisen</td>
                    </tr>
                    <tr>
                        <td>Schraube C</td>
                        <td>Schrauben</td>
                        <td>Nickel/Eisen</td>
                    </tr>
                    <tr>
                        <td>Schraube D</td>
                        <td>Schrauben</td>
                        <td>Silber/Eisen</td>
                    </tr>
                </table>
            </chapter>
        </chapter>
    </chapter>

    <chapter title="Die Schnittmenge (INTERSECT)" id="intersect">
        <p>
            Der Ausgangspunkt ist wieder eine Mengenbetrachtung von zwei Mengen. Die Schnittmenge wird aus Elementen
            gebildet, die in beiden Mengen enthalten sind. Eine Schnittmenge von zwei Mengen wird in SQL mit der
            <code>INTERSECT</code>-Klausel ermittelt. Als Beispiel zwei Tabellen deren Datenwerte der Spalte element für
            mengea 1,2,3,4,5,6,8 und für mengeb 2,5,6,7,8,9,10.
        </p>

        <code-block lang="sql">
            SELECT element
              FROM mengea
            INTERSECT
            SELECT element
              FROM mengeb
            ;
        </code-block>

        <p>
            Die Datenwerte der Ergebnistabelle bzw. der Schnittwert beider Mengen lautet: 8,5,6,2. Würde es keine
            übereinstimmenden Zeilen geben, so wird eine leere Schnittmenge zurückgegeben. Nun ein weiteres Beispiel mit
            den Tabellen produkt und produktarchiv.
        </p>

        <code-block lang="sql">
            SELECT  artikelbezeichnung
                 ,  kategorie
                 ,  legierung
              FROM produkt
            INTERSECT
            SELECT  artikelbezeichnung
                 ,  kategorie
                 ,  legierung
              FROM produktarchiv
            ;
        </code-block>
        
        <table>
            <tr>
                <td>artikelbezeichnung</td>
                <td>kategorie</td>
                <td>legierung</td>
            </tr>
            <tr>
                <td>Schraube 2</td>
                <td>Schrauben</td>
                <td>Kupfer/Eisen</td>
            </tr>
            <tr>
                <td>Schraube 4</td>
                <td>Schrauben</td>
                <td>Gold/Eisen</td>
            </tr>
        </table>
    </chapter>

    <chapter title="Die Differenzmenge (EXCEPT)" id="except">

    </chapter>

    <chapter title="Mengenoperationen in Kombination mit einer WHERE- oder ORDER BY-Klausel" id="where-orderby">

    </chapter>

    <chapter title="Quellen" id="quellen">
        <tip>
            <b>(BUCH)</b>
            978-3-836245630, Einstieg in SQL, Michael Laube, Rheinwerk Verlag GmbH, Bonn, 2018
        </tip>
    </chapter>
</topic>