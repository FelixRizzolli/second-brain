<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="sql-dql"
       title="DQL (Data Query Language)"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">
    <show-structure depth="2" for="chapter,procedure"/>

    <p>
        Für Beispiele wird hier eine <code>mitarbeiter</code>-Tabelle verwendet, welche folgende Spalten enthält:
        <code>mitarbeiter</code>, <code>name</code>, <code>vorname</code>, <code>gebdatum</code>,
        <code>eintrittsdatum</code>, <code>austrittsdatum</code>, <code>austrittsgrund</code>, <code>strasse</code>,
        <code>hausnummer</code>, <code>ort</code>.
    </p>

    <chapter id="select" title="Die Grundfunktion der Tabellenabfrage: SELECT">
        <p>
            Mit der SQL-Abfrage <code>SELECT name, vorname FROM mitarbeiter;</code> werden die Spalten <code>name</code>
            und <code>vorname</code> aus der Tabelle <code>mitarbeiter</code> ausgelesen. Eine Abfrage beginnt mit dem
            Schlüsselwort <code>SELECT</code>, um die Abfrage einzuleiten. Hinter dem <code>SELECT</code> folgen die
            Spalten, die jeweils durch ein Komma separiert werden. Das Schlüsselwort <code>FROM</code> teilt der
            Datenbank mit, aus welcher Tabelle die Spalten abgefragt werden. Die Reihenfolge, in der man die
            Spaltennamen angibt, ist beliebig, bestimmt aber folglich die Reihenfolge, in der sie in der Ergebnistabelle
            aufgelistet werden. Es lassen sich Spalten, falls nötig, auch mehrmals auflisten.
        </p>
        <p>
            Möchte man eine ganze Tabelle ausgeben, so bietet SQL eine komfortablere Möglichkeit, als alle Spaltennamen
            aufzulisten – den Asterisk <code>*</code> was so viel bedeutet wie Sternchen.
        </p>

        <code-block lang="sql">
            SELECT * FROM mitarbeiter; /* Gibt die ganze Tabelle mitarbeiter aus. */
        </code-block>

        <p>
            SQL ist case insensitive, was so viel bedeutet wie – es spielt keine Rolle, ob eine SQL-Anweisung in
            Großbuchstaben, Kleinbuchstaben oder gar gemischt notiert wird. Für die Lesbarkeit ist es jedoch
            empfehlenswert SQL-Schlüsselwörter immer in Großbuschstaben zu schreiben.
        </p>
    </chapter>

    <chapter id="where" title="Abfrage mit WHERE Filtern">
        <p>
            Die <code>WHERE</code>-Klausel wird immer dann verwendet, wenn nur bestimmte Ergebniszeilen ausgegeben
            werden sollen, welche einem gewissen Filterkriterium entsprechen. Hierzu werden die Spaltenwerte einer
            Spalte mittels Vergleichsoperator mit einem oder mehreren anderen Werten verglichen. Entspricht der
            Spaltenwert oder entsprechen die Spaltenwerte des jeweiligen Datensatzes dem Filterkriterium, so wird dieser
            mit in die Ergebnistabelle aufgenommen. Das <code>WHERE</code>-Schlüsselwort folgt nach der Auswahl der
            Tabelle/n durch <code>FROM</code>. Die Auswertung einer Bedingung, die zum Ziel hat, Zeilen in der
            Ergebnistabelle einzutragen, wird als Selektion bezeichnet.
        </p>
        <p>
            Als Beispiel: "Gib den Datensatz der Tabelle mitarbeiter zurück, wo (= where) der Name gleich Lang ist."
        </p>

        <code-block lang="sql">
            SELECT * FROM mitarbeiter WHERE name='Rizzolli';
        </code-block>

        <p>
            Zeichenketten (Aneinanderreihungen von beliebigen Zeichen) sowie Datumswerte werden in SQL immer mit
            einfachen Hochkommata umschlossen (<code>'Rizzolli'</code> und <code>'1985-01-01'</code>).
        </p>
    </chapter>

    <chapter id="inhaltsverzeichnis" title="Inhaltsverzeichnis">
        <list>
            <li>
                <a href="sql-dql-konstanten.topic">
                    Konstanten
                </a>
            </li>
            <li>
                <a href="sql-dql-aliase.topic">
                    Aliase (<code>AS</code>)
                </a>
            </li>
            <li>
                <a href="sql-dql-distinct.topic">
                    Gleiche Ergebniszeilen ausschließen
                </a>
            </li>
            <li>
                <a href="sql-dql-funktionen.topic">
                    Funktionen: <code>MIN</code>, <code>MAX</code>, <code>COUNT</code>, <code>AVG</code>,
                    <code>SUM</code>
                </a>
            </li>
            <li>
                <a href="sql-dql-limit.topic">
                    Ergebnisliste begrenzen (<code>LIMIT</code>, <code>TOP</code>, <code>FETCH</code>)
                </a>
            </li>
            <li>
                <a href="sql-dql-operatoren.topic">
                    Operatoren
                </a>
            </li>
            <li>
                <a href="sql-dql-orderby.topic">
                    Datensätze sortiert abfragen (<code>ORDER BY</code>)
                </a>
            </li>
            <li>
                <a href="sql-dql-groupby.topic">
                    Spaltenwerte gruppieren (<code>GROUP BY</code>)
                </a>
            </li>
            <li>
                <a href="sql-dql-having.topic">
                    <code>HAVING</code>: <code>WHERE</code> mit Aggregatfunktionen
                </a>
            </li>
            <li>
                <a href="sql-dql-mengenoperationen.topic">
                    Mengenoperationen (<code>UNION</code>, <code>INTERSECT</code>, <code>EXEPT</code>)
                </a>
            </li>
            <li>
                <a href="sql-dql-case.topic">
                    Bedingungslogik mit <code>CASE</code>
                </a>
            </li>
            <li>
                <a href="sql-dql-join.topic">
                    Verbundene Tabellenabfragen mittels <code>JOIN</code>
                </a>
            </li>
        </list>
    </chapter>

    <chapter id="quellen" title="Quellen">
        <tip>
            <b>(BUCH)</b>
            978-3-836245630, Einstieg in SQL, Michael Laube, Rheinwerk Verlag GmbH, Bonn, 2018
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://de.wikipedia.org/wiki/SQL" ignore-vars="true">
                https://de.wikipedia.org/wiki/SQL
            </a>, 2020-11-13 15:10
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://de.wikipedia.org/wiki/Data_Manipulation_Language" ignore-vars="true">
                https://de.wikipedia.org/wiki/Data_Manipulation_Language
            </a>, 2020-11-13 15:10
        </tip>
    </chapter>
</topic>