<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Spaltenwerte gruppieren (GROUP BY)" id="sql-dql-groupby">
    <show-structure for="chapter,procedure" depth="2"/>

    <chapter title="Grundlagen" id="grundlagen">
        <p>
            Die <code>GROUP BY</code>-Klausel schafft in SQL die Möglichkeit, Spaltenwerte einer Spalte zu einer Gruppe
            zusammenzufassen. Das Zusammenfassen von Spaltenwerten kann auch als Verdichtung bezeichnet werden. Eine
            Gruppierung kann aus einer oder mehreren Spalten bestehen. In der Spaltenauswahlliste sind dann nur die
            Spalten zulässig, nach denen gruppiert wurde. Das folgende Beispiel berechnet durch die Aggregatfunktion
            <code>AVG()</code> den Durchschnitt der Gehälter der einzelnen Gruppen:
        </p>

        <img src="datenbanken-sql-groupby1.png" alt="GROUP BY - Beispiel"/>

        <p>
            Wie im Beispiel können in der Spaltenauswahlliste Aggregatfunktionen enthalten sein, die beispielsweise eine
            Summe über die eine Spalte bilden, die nicht den Gruppierungsspalten angehört. Zur Aggregation stehen
            mehrere Aggregatfunktionen zur Verfügung. Je nach verwendeter Datenbank können auch andere
            Aggregatfunktionen verwendet werden. Allgemein gültige sind:
        </p>

        <list>
            <li>
                <code>COUNT(spaltenwert)</code>: zählt die Spaltenwerte einer Gruppe
            </li>
            <li>
                <code>SUM(spaltenwert)</code>: addiert nummerische Spaltenwerte einer Gruppe
            </li>
            <li>
                <code>MIN(spaltenwert)</code>: ermittelt den minimalen Wert einer Gruppe
            </li>
            <li>
                <code>MAX(spaltenwert)</code>: ermittelt den maximalen Wert einer Gruppe
            </li>
            <li>
                <code>AVG(spaltenwert)</code>: ermittelt den arithmetischen Durchschnittswert einer Gruppe
            </li>
        </list>

        <p>
            Die <code>GROUP BY</code>-Klausel bietet mit der <code>HEAVING</code>-Klausel eine Möglichkeit, nach
            gruppierten Werten zu filtern. Ähnlich wie in einer <code>WHERE</code>-Klausel werden hier
            Vergleichsoperatoren verwendet, um Ergebnisse einer Operation, die auf eine Gruppierung angewendet wurde,
            gegen andere Werte zu vergleichen.
        </p>
        <p>
            Wenn eine <code>WHERE</code>-Klausel Anwendung finden soll, ist sie immer von der
            <code>GROUP BY</code>-Klausel zu notieren, da die <code>WHERE</code>-Klausel auf Zeilenebene Informationen
            filtert und vor der <code>GROUP BY</code>-Klausel ausgeführt wird.
        </p>
        <p>
            Die <code>WHERE</code>-Klausel kann nicht zum Filtern von aggregierten Werten genutzt werden, da sie
            ausschließlich auf Zeilenebene arbeitet. Die <code>WHERE</code>-Klausel wird vor der
            <code>GROUP BY</code>-Klausel ausgeführt, sodass das Ergebnis einer Aggregation, die auf einer Gruppierung
            basiert, zu dem Zeitpunkt der Anwendung der <code>WHERE</code>-Klausel also nicht zur Verfügung steht.
        </p>
    </chapter>

    <chapter title="Beispiele für Aggregatfunktionen" id="aggregatfunktionen">
        <table>
            <tr>
                <td>bonusid</td>
                <td>bonuszahlung</td>
                <td>mitarbeiterid</td>
                <td>datum</td>
            </tr>
            <tr>
                <td>47</td>
                <td>9000.00</td>
                <td>1</td>
                <td>2012-03-01</td>
            </tr>
            <tr>
                <td>10</td>
                <td>1800.00</td>
                <td>1</td>
                <td>2012-02-01</td>
            </tr>
            <tr>
                <td>56</td>
                <td>11700.00</td>
                <td>1</td>
                <td>2012-09-01</td>
            </tr>
            <tr>
                <td>11</td>
                <td>3800.00</td>
                <td>8</td>
                <td>2012-03-01</td>
            </tr>
            <tr>
                <td>2</td>
                <td>7000.00</td>
                <td>8</td>
                <td>2012-01-01</td>
            </tr>
            <tr>
                <td>30</td>
                <td>3000.00</td>
                <td>8</td>
                <td>2012-08-01</td>
            </tr>
            <tr>
                <td>62</td>
                <td>4500.00</td>
                <td>10</td>
                <td>2012-01-10</td>
            </tr>
            <tr>
                <td>49</td>
                <td>2500.00</td>
                <td>12</td>
                <td>2012-09-01</td>
            </tr>
            <tr>
                <td>31</td>
                <td>4440.00</td>
                <td>12</td>
                <td>2012-01-01</td>
            </tr>
            <tr>
                <td>58</td>
                <td>17800.00</td>
                <td>12</td>
                <td>2012-08-01</td>
            </tr>
        </table>

        <chapter title="COUNT()" id="aggregatfunktionen-count">
            <code-block lang="sql">
                SELECT  mitarbeiterid
                     ,  COUNT(bonusid) AS anzahlbonuszahlungen
                  FROM bonus
                 GROUP
                    BY mitarbeiterid
                ;
            </code-block>
            
            <table>
                <tr>
                    <td>mitarbeiterid</td>
                    <td>anzahlbonuszahlungen</td>
                </tr>
                <tr>
                    <td>1</td>
                    <td>3</td>
                </tr>
                <tr>
                    <td>8</td>
                    <td>3</td>
                </tr>
                <tr>
                    <td>10</td>
                    <td>1</td>
                </tr>
                <tr>
                    <td>12</td>
                    <td>3</td>
                </tr>
            </table>

            <chapter title="DISTINCT - Nur eindeutige Spaltenwerte" id="aggregatfunktionen-count-distinct">
                <p>
                    Mit dem Schlüsselwort <code>DISTINCT</code> vor der Spalte innerhalb der
                    <code>COUNT()</code>-Funktion ausschließlich eindeutige Spaltenwerte berücksichtigt.
                </p>

                <code-block lang="sql">
                    SELECT  COUNT(DISTINCT mitarbeiterid) AS anzahldermitarbeiter
                      FROM bonus
                    ;
                </code-block>

                <table>
                    <tr>
                        <td>anzahldermitarbeiter</td>
                    </tr>
                    <tr>
                        <td>4</td>
                    </tr>
                </table>
            </chapter>

            <chapter title="Asterisk * - Anzahl der Zeilen innerhalb einer Gruppe"
                     id="aggregatfunktionen-count-asterisk">
                <p>
                    Wird der <code>COUNT()</code>-Funktion ein Asterisk <code>*</code> als Parameter übergeben, so zählt
                    die Funktion lediglich die Anzahl der Zeilen innerhalb einer Gruppe.
                </p>

                <code-block lang="sql">
                    SELECT  mitarbeiterid
                         ,  COUNT(*) AS anzahlderzeilenprogruppe
                      FROM bonus
                    ;
                </code-block>
                
                <table>
                    <tr>
                        <td>mitarbeiterid</td>
                        <td>anzahlderzeilenprogruppe</td>
                    </tr>
                    <tr>
                        <td>1</td>
                        <td>3</td>
                    </tr>
                    <tr>
                        <td>8</td>
                        <td>3</td>
                    </tr>
                    <tr>
                        <td>10</td>
                        <td>1</td>
                    </tr>
                    <tr>
                        <td>12</td>
                        <td>3</td>
                    </tr>
                </table>
            </chapter>
        </chapter>

        <chapter title="SUM()" id="aggregatfunktionen-count-sum">
            <code-block lang="sql">
                SELECT  mitarbeiterid
                     ,  SUM(bonuszahlung) AS summebonuszahlung
                  FROM bonus
                 GROUP
                    BY  mitarbeiterid
                ;
            </code-block>

            <table>
                <tr>
                    <td>mitarbeiterid</td>
                    <td>summebonuszahlungen</td>
                </tr>
                <tr>
                    <td>1</td>
                    <td>22500.00</td>
                </tr>
                <tr>
                    <td>8</td>
                    <td>13800.00</td>
                </tr>
                <tr>
                    <td>10</td>
                    <td>4500.00</td>
                </tr>
                <tr>
                    <td>12</td>
                    <td>24740.00</td>
                </tr>
            </table>
        </chapter>

        <chapter title="AVG()" id="aggregatfunktionen-count-avg">
            <code-block lang="sql">
                SELECT  mitarbeiterid
                     ,  AVG(bonuszahlung) AS durchschnittbonuszahlung
                  FROM bonus
                 GROUP
                    BY  mitarbeiterid
                ;
            </code-block>

            <table>
                <tr>
                    <td>mitarbeiterid</td>
                    <td>durchschnittbonuszahlungen</td>
                </tr>
                <tr>
                    <td>1</td>
                    <td>7500.00</td>
                </tr>
                <tr>
                    <td>8</td>
                    <td>4600.00</td>
                </tr>
                <tr>
                    <td>10</td>
                    <td>4500.00</td>
                </tr>
                <tr>
                    <td>12</td>
                    <td>8246.67</td>
                </tr>
            </table>
        </chapter>

        <chapter title="MIN() und MAX()" id="aggregatfunktionen-minmax">
            <code-block lang="sql">
                SELECT  mitarbeiterid
                     ,  MIN(bonuszahlung) AS minbonuszahlung
                     ,  MAX(bonuszahlung) AS maxbonuszahlung
                  FROM bonus
                 GROUP
                    BY  mitarbeiterid
                ;
            </code-block>

            <table>
                <tr>
                    <td>mitarbeiterid</td>
                    <td>minbonuszahlung</td>
                    <td>maxbonuszahlung</td>
                </tr>
                <tr>
                    <td>1</td>
                    <td>1800.00</td>
                    <td>11700.00</td>
                </tr>
                <tr>
                    <td>8</td>
                    <td>3000.00</td>
                    <td>7000.00</td>
                </tr>
                <tr>
                    <td>10</td>
                    <td>4500.00</td>
                    <td>4500.00</td>
                </tr>
                <tr>
                    <td>12</td>
                    <td>2500.00</td>
                    <td>17800.00</td>
                </tr>
            </table>
        </chapter>
    </chapter>

    <chapter title="NULL-Werte berücksichtigen" id="null">
        <chapter title="Fall 1: NULL-Werte in der zu gruppierenden Spalte" id="null-fall1">
            <p>
                Wenn nach den Spaltenwerten einer Spalte gruppiert wird und dort <code>NULL</code>-Werte enthalten sind,
                so wird eine Gruppierung über diese Gruppe von Spaltenwerten gebildet. Es würde wenig Sinn machen diese
                Datensätze zu gruppieren und eine Aggregatfunktion darauf anzuwenden, da meist keinerlei Aussage darüber
                erfolgt. Somit werden sie meistens mittels <code>WHERE</code>-Klausel herausgefiltert.
            </p>

            <code-block lang="sql">
                SELECT  mitarbeiterid
                     ,  SUM(bonuszahlung) AS summebonuszahlung
                  FROM  bonus
                 WHERE mitarbeiterid IS NOT NULL
                 GROUP
                    BY  mitarbeiterid
                ;
            </code-block>
        </chapter>

        <chapter title="Fall 2: NULL-Werte in Spalte auf die eine Aggregatfunktion angewendet wird" id="null-fall2">
            <p>
                In diesem Fall wird die Spalte von einer Aggregatfunktion wie <code>SUM</code> ignoriert. Grundsätzlich
                ist es gut, dass die Aggregatfunktion die <code>NULL</code>-Werte ignoriert. Dennoch hier einige Details
                zu diesem Verhalten:
            </p>
            
            <list>
                <li>
                    Die Funktion <code>COUNT</code> zählt nur die Werte der jeweiligen Spalte über die aggregiert werden
                    soll, die nicht NULL sind. Dieses Verhalten kann, muss aber nicht gewünscht sein. Alternativ können
                    mittels <code>COUNT(*)</code> alle Zeilen einer Gruppe gezählt werden.
                </li>
                <li>
                    Die Funktion <code>SUM</code> bildet einfach eine Summe über die zu aggregierende Spalte. Hier
                    treten keine negativen Effekte, auf die das Ergebnis beeinflussen.
                </li>
                <li>
                    Wird ein Minimal- oder Maximalwert mit <code>MIN</code> oder <code>MAX</code> ermittelt sind durch
                    das Ignorieren der <code>NULL</code>-Werte ebenfalls keine negativen Auswirkungen zu erkennen.
                </li>
                <li>
                    Auch die <code>AVG</code>-Funktion ignoriert die <code>NULL</code>-Werte wie die anderen
                    Aggregatfunktionen. Kommen also <code>NULL</code>-Werte in einer aggregierten Spalte vor, so werden
                    diese nicht in den Durchschnittswert mit einfließen. Das kann aber zu einem unerwünschten Ergebnis
                    führen. Mit einer <code>CASE</code>-Klausel lassen sich diese Probleme korrigieren.
                </li>
            </list>

            <code-block lang="sql">
                SELECT  AVG( CASE
                               WHEN bonuszahlung IS NULL
                               THEN 0
                               ELSE bonuszahlung
                             END
                            ) AS durchschnittbonuszahlung,
                  FROM bonus
                 WHERE  mitarbeiterid = 10
                 GROUP
                    BY  mitarbeiterid
                ;
            </code-block>
        </chapter>
    </chapter>

    <chapter title="HAVING: Nach aggregierten Werten einer Gruppierung filtern" id="having">
        <p>
            SQL bietet mit der <code>HAVING</code>-Klausel in Bezug auf aggregierte Werte eine spezielle Filterfunktion
            an. Mit der <code>HAVING</code>-Klausel kann ein aggregierter Durchschnittswert mit einem Vergleichsoperator
            gegen ein Literal geprüft werden.
        </p>

        <code-block lang="sql">
            SELECT  bankleitzahl
                 ,  COUNT(bankleitzahl) AS anzahlkreditinstitute
              FROM kreditinstitut
             GROUP
                BY  bankleitzahl
            HAVING  COUNT(bankleitzahl) = 1
            ;
        </code-block>

        <p>
            Mit der <code>GROUPP BY</code>-Klausel wird hier eine Gruppierung über die Spaltenwerte der Spalte
            bankleitzahl gebildet. Hinter der <code>GROUP BY</code>-Klausel folgt die <code>HAVING</code>-Klausel, die
            für das Filtern von gruppierten Werten zuständig ist. Hinter der <code>HAVING</code>-Klausel wird eine
            Aggregatfunktion notiert, die auf die Gruppierung angewendet wird. Der Wert, der sich aus der
            Aggregatfunktion ergibt, kann mithilfe eines Vergleichsoperators mit einem Literal oder aber dem Ergebnis
            einer weiteren Aggregatfunktion verglichen werden. In diesem Beispiel wird mittels der
            <code>COUNT</code>-Funktion in einer Bedingung geprüft, on der Wert, den die <code>COUNT</code>-Funktion
            zurückliefert, gleich 1 ist. Somit werden alle Bankleitzahlen, denen nur ein Kreditinstitut zugeordnet ist,
            ermittelt.
        </p>
        <p>
            Die <code>WHERE</code>-Klausel kann nicht zum Filtern der aggregierten Ergebnisse einer Gruppierung
            verwendet werden. Dies liegt daran, da eine <code>WHERE</code>-Klausel nur auf Zeilenebene angewendet werden
            kann. Eine <code>WHERE</code>-Klausel wird also stets vor einer <code>GROUP BY</code>-Klausel ausgewertet.
            Eine Aggregatfunktion kann also innerhalb der <code>WHERE</code>-Klausel auf kein Ergebnis einer Gruppierung
            zurückgreifen, weil es schlicht und ergreifend noch nicht existiert.
        </p>
        <p>
            Auf Zeilenebene kann die <code>WHERE</code>-Klausel gemeinsam mit einer <code>GROUP BY</code>-Klausel
            verwendet werden, um vor der Gruppierung mit der <code>GROUP BY</code>-Klausel die Zeilen einer Tabelle
            gemäß einer Bedingung zu Filtern.
        </p>
    </chapter>

    <chapter title="Nach zwei oder mehr Spalten gruppieren" id="mehr-spalten-gruppieren">
        <p>
            Je nach Anforderung kann auch über zwei, drei oder mehr Spalten gruppiert werden. Die zu gruppierenden
            Spalten werden kommasepariert hinter der <code>GROUP BY</code>-Klausel angegeben.
        </p>

        <code-block lang="sql">
            SELECT  ort
                 ,  bezeichnung
                 ,  COUNT(*) AS anzahlinstitute
              FROM kreditinstitut
             GROUP
                BY  ort
                 ,  bezeichnung
            ;
        </code-block>
    </chapter>

    <chapter title="Quellen" id="quellen">
        <tip>
            <b>(BUCH)</b>
            978-3-836245630, Einstieg in SQL, Michael Laube, Rheinwerk Verlag GmbH, Bonn, 2018
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://www.w3schools.com/sql/sql_groupby.asp" ignore-vars="true">
                https://www.w3schools.com/sql/sql_groupby.asp
            </a>, 2022-11-13 10:45
        </tip>
    </chapter>
</topic>