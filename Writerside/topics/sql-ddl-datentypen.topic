<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Datentypen" id="sql-ddl-datentypen">
    <show-structure for="chapter,procedure" depth="2"/>

    <chapter title="Grundlagen" id="grundlagen">
        <p>
            Einer Spalte, die in einer Tabelle angelegt werden soll, muss immer ein Datentyp zugeordnet werden. Dieser
            Datentyp enthält Informationen darüber, welche Elemente die Spalte speichern kann.
        </p>
        <p>
            Durch den Datentyp kann auch der benötigte Speicherbedarf eingegrenzt werden. So benötigt beispielsweise ein
            Datenfeld mit dem Datentyp <code>TINYINT</code> nur 1Byte, kann aber nur Zahlen von -128 bis 127 oder von 0
            bis 255 aufnehmen, wo ein <code>INT</code> 4Byte benötigt, kann jedoch Zahlen von -2147483648 bis 2147483647
            aufnehmen. Bei einer großen Datenbank ist die Auswahl die Datentypen sehr wichtig da sich der
            Speicherunterschied deutlich erkennbar macht. Auch die Performance der Datenbank profitiert von einer
            Datenbank mit gut gewählten Datentypen.
        </p>
    </chapter>

    <chapter title="Datentypen für ganze Zahlen" id="ganze-zahlen">
        <table>
            <tr>
                <td>Datentyp</td>
                <td>Speicherbedarf</td>
                <td>Minimaler Wert bis maximaler Wert</td>
            </tr>
            <tr>
                <td><code>TINYINT</code></td>
                <td>1Byte</td>
                <td>von -128 bis 127 oder von 0 bis 255</td>
            </tr>
            <tr>
                <td><code>SMALLINT</code></td>
                <td>2Byte</td>
                <td>von -32768 bis 32767 oder von 0 bis 65535</td>
            </tr>
            <tr>
                <td><code>MEDIUMINT</code></td>
                <td>3Byte</td>
                <td>von -8388608 bis 8388607 oder von 0 bis 16777215</td>
            </tr>
            <tr>
                <td><code>INT</code></td>
                <td>4Byte</td>
                <td>von -2147483648 bis 2147483647 oder von 0 bis 4294967295</td>
            </tr>
            <tr>
                <td><code>BIGINT</code></td>
                <td>8Byte</td>
                <td>von -9223372036854775808 bis 9223372036854775807 oder von 0 bis 18446744073709551615</td>
            </tr>
        </table>
        
        <p>
            Den Datentypen für ganze Zahlen kann man noch das Schlüsselwort <code>UNSIGNED</code> oder
            <code>SIGNED</code> anhängen, dadurch wird bestimmt, ob die Zahl ein Vorzeichen haben kann
            (<code>SIGNED</code>) oder nicht (<code>UNSIGNED</code>). Ohne Schlüsselwort wird standardmäßig mit
            Vorzeichen (<code>SIGNED</code>) gewählt.
        </p>
        
        <list>
            <li>
                <code>TINYINT</code> = von -128 bis 127
            </li>
            <li>
                <code>TINYINT SIGNED</code> = von -128 bis 127
            </li>
            <li>
                <code>TINYINT UNSIGNED</code> = von 0 bis 255
            </li>
        </list>
        
        <p>
            Nicht alle Datenbanksysteme verwendet gleich viele oder dieselben Namen für Datentypen. Hierbei muss in der
            jeweiligen Dokumentation nachgeschlagen werden welche Datentypen verwendet werden können.
        </p>
        
        <list>
            <li>
                MySQL verwendet <code>TINYINT</code>, <code>SMALLINT</code>, <code>MEDIUMINT</code>, <code>INT</code>
                und <code>BIGINT</code>
            </li>
            <li>
                PostgreSQL verwendet <code>SMALLINT</code>, <code>INTEGER</code> und <code>BIGINT</code>
            </li>
            <li>
                MS SQL-Server verwendet <code>TINYINT</code>, <code>SMALLINT</code>, <code>INTEGER</code> und
                <code>BIGINT</code>
            </li>
        </list>
    </chapter>

    <chapter title="Datentypen für rationale Zahlen" id="rationale-zahlen">
        <p>
            In SQL unterscheidet man grundsätzlich zwischen zwei Datentyparten von rationalen Zahlen: den
            Fließkomma-Datentypen und den Fixkomma-Datentypen. Fixkomma-Datentypen werden dann eingesetzt, wenn große
            Genauigkeit erforderlich ist. Die Bruchstelle wird anstelle des Kommas mit einem Punkt gekennzeichnet.
        </p>

        <code-block lang="sql">
            DECIMAL(p, s)
        </code-block>
        <code-block lang="sql">
            NUMERIC(p, s)
        </code-block>

        <p>
            Die Datentypen <code>DECIMAL</code> und <code>NUMERIC</code> gehören zu den Fixkomma-Datentypen. Die beiden
            Datentypen unterscheiden sich nicht, <code>NUMERIC</code> wurde für die MySQL-Datenbank aus dem Datentyp
            <code>DECIMAL</code> implementiert. Beide Typen können synonym verwendet werden, um rationale Zahlen
            abzubilden – was aber nicht auch für alle anderen Datenbanken neben MySQL gelten muss.
        </p>
        <p>
            Hinter der Datentypbezeichnung können in einfachen Klammern umschlossen zwei Argumente übergeben werden. Das
            erste Argument <emphasis>p</emphasis> steht für <emphasis>precision</emphasis>, das zweite
            <emphasis>s</emphasis> steht für <emphasis>scale</emphasis>. Mit <emphasis>p</emphasis> wird die
            Gesamtanzahl der Ziffern des numerischen Wertes angegeben.
        </p>
        <p>
            Beispiel: Kosten für ein Auto (= 59 999,99 €) -> <code>DECIMAL(7, 2)</code>
        </p>
    </chapter>

    <chapter title="Datentypen für Datum und Zeit" id="datetime">
        <table>
            <tr>
                <td>Datentyp</td>
                <td>von</td>
                <td>bis</td>
            </tr>
            <tr>
                <td><code>DATE</code></td>
                <td><code>1000-01-01</code></td>
                <td><code>9999-12-31</code></td>
            </tr>
            <tr>
                <td><code>DATETIME</code></td>
                <td><code>1000-01-01 00:00:00.000000</code></td>
                <td><code>9999-12-31 23:59:59.999999</code></td>
            </tr>
            <tr>
                <td><code>TIMESTAMP</code></td>
                <td><code>1970-01-01 00:00:01.000000</code></td>
                <td><code>2038-01-19 03:14:07.999999</code></td>
            </tr>
            <tr>
                <td><code>TIME</code></td>
                <td><code>-838:59:59.000000</code></td>
                <td><code>838:59:59.000000</code></td>
            </tr>
            <tr>
                <td><code>YEAR</code></td>
                <td><code>1901</code></td>
                <td><code>2155</code></td>
            </tr>
        </table>

        <p>
            Auch hier gibt es wider einige Unterschiede zwischen den einzelnen Datenbanken. MySQL verwendet die in der
            Tabelle genannten Datentypen. PostgreSQL und MS-SQL-Server bieten noch einige weitere Zeit-Datentypen zur
            Verfügung. Die Schreibweise kann auch von der Lokalisierung der Datenbank abhängig sein.
        </p>
        <p>
            MySQL sowie PostgreSQL und MS-SQL-Server halten sich konsequent den Standard ISO 8601:
        </p>

        <list>
            <li>
                <code>yyyy-mm-dd</code> (Jahr, Monat, Tag)
            </li>
            <li>
                <code>hh:mm:ss.f</code> (Stunden, Minuten, Sekunden und <code>f</code> = gebrochener Anteil einer
                Sekunde)
            </li>
        </list>
    </chapter>

    <chapter title="Datentypen für Zeichenketten" id="zeichenketten">
        <p>
            Zeichenketten bestehen aus einer Aneinanderreihung von einzelnen Zeichen. Hierbei ist der Zeichensatz von
            großer Bedeutung. Der Zeichensatz UTF-8 ist einer der am weitesten verbreiteten Implementierungen von
            Unicode-Standardzeichen. Der Unicode-Standard legt für beinah jedes nur vorstellbare Zeichen (darunter
            Schriftzeichen jeglicher Sprache, Zeichen wie <code>@</code> welche nicht im Alphabet vorkommen und auch
            Zahlen) eine eindeutige Nummer fest. Die unterschiedlichen Codelisten enthalten für diese Vielzahl von
            Sprachen und Dialekten Zeichensätze, in denen die Zeichen einer Sprache hinterlegt sind. Zeichensätze
            stellen die Basis dar, um mit Zeichenketten arbeiten zu können. Für die deutsche Sprache sind
            Zeichencodelisten wie <emphasis>Basic Latin</emphasis> und <emphasis>Latin 1 Supplement</emphasis> wichtig,
            da hier sämtliche Zeichen der deutschen Sprache hinterlegt sind.
        </p>
        
        <table>
            <tr>
                <td>DATENTYP</td>
                <td>MYSQL</td>
                <td>POSTGRESQL</td>
                <td>MS-SQL-SERVER</td>
            </tr>
            <tr>
                <td><code>CHAR(L)</code></td>
                <td>255</td>
                <td>10 485 760</td>
                <td>8 000</td>
            </tr>
            <tr>
                <td><code>VARCHAR(L)</code></td>
                <td>65 535 (seit v5.0.3)</td>
                <td>10 485 760</td>
                <td>8 000</td>
            </tr>
        </table>

        <p>
            Mit dem Argument L weist man der Zeichenkette die maximale Länge zu, welche ein Datenfeld der jeweiligen
            Spalte haben kann. Die maximal möglichen Längen, welche zugewiesen werden können, sind von Datenbank zu
            Datenbank unterschiedlich.
        </p>
        <p>
            Angenommen für die Namen von Mitarbeiter wir der Datentyp <code>CHAR(100)</code> verwendet. Ein Eintrag wie
            Beispielsweise 'Dirk' hat nur 4 von den 100 zur Verfügung stehenden Zeichen, der Rest wird mit Leerzeichen
            ausgefüllt. Das bedeutet für jeden Eintrag werden 100 Zeichen verwendet, was 100Byte Speicherkapazität
            entspricht. Der Datentyp <code>VARCHAR</code> verhält sich ähnlich. Hier werden jedoch nicht die
            verbleibenden 96 Zeichen mit Leerzeichen gefüllt.
        </p>
    </chapter>

    <chapter title="Datentypen umwandeln" id="typkonvertierung">
        <p>
            Beim Arbeiten mit Spaltenwerten muss sichergestellt werden, dass sie zum jeweiligen Datentyp passen. Das
            kommt beispielsweise auch bei Berechnungen und Vergleichen vor. SQL bietet die
            <code>CAST</code>-Konvertierungsfunktion an, mit der ein Wert eines Datentyps in einen anderen Datentyp
            umgewandelt wird. Das setzt allerdings voraus, dass die Werte tatsächlich in den Zieldatentyp umgewandelt
            werden können. Ein Datum lässt sich z.B. nicht in einer ganzen Zahl umwandeln oder umgekehrt. In folgenden
            Situationen kann es notwendig sein eine Typkonvertierung vorzunehmen:
        </p>
        
        <list>
            <li>
                bei der Verwendung von arithmetischen Operatoren (<code>+</code>, <code>-</code>, <code>*</code>,
                <code>/</code>, <code>%</code>)
            </li>
            <li>
                bei Einfügeoperationen mit <code>INSERT</code> oder <code>UPDATE</code>
            </li>
            <li>
                bei Vergleichen mittels einer Bedingung in einer <code>WHERE</code>-Klausel
            </li>
            <li>
                bei der Sortierung mithilfe einer <code>ORDER BY</code>-Klausel
            </li>
            <li>
                bei der Anwendung einer <code>UNION</code>-Klausel
            </li>
            <li>
                bei Aufrufen von Skalarfunktionen mit Parametern
            </li>
        </list>

        <p>
            Bei der Datentypkonvertierung wird zwischen expliziter Typkonvertierung (explizit = ausdrücklich) und
            impliziter Typkonvertierung (implizit bedeutet so viel wie bereits enthalten sein).
        </p>

        <chapter title="Implizite Typkonvertierung" id="typkonvertierung-implizit">
            <p>
                Wenn die Datentypen innerhalb einer Operation oder eines Vergleichs in einer <code>WHERE</code>-Klausel
                nicht kompatibel sind und keine Konvertierungsfunktion verwendet wird, versucht eine Datenbank
                automatisch, die Datentypen passend zu machen. Die implizite Typkonvertierung bringt immer die Gefahr,
                dass Ungenauigkeiten entstehen.
            </p>
            <p>
                Für die inplizite Typkonvertierung wendet jede Datenbank unterschiedliche Regeln an. Um ganz
                sicherzugehen, sollte bei der bewussten Nutzung der impliziten Typkonvertierung die jeweilige
                Dokumentation der verwendeten Datenbank zurate genommen werden.
            </p>
            <p>
                Beispiele für implizite Typkonvertierung:
            </p>

            <table>
                <tr>
                    <td>ABFRAGE</td>
                    <td>MYSQL</td>
                    <td>POSTGRESQL</td>
                    <td>MS SQL-SERVER</td>
                </tr>
                <tr>
                    <td>
                        <code-block lang="sql">
                            SELECT 4 + '9';
                        </code-block>
                    </td>
                    <td><code>13</code></td>
                    <td><code>13</code></td>
                    <td><code>13</code></td>
                </tr>
                <tr>
                    <td>
                        <code-block lang="sql">
                            SELECT 4 + '09';
                        </code-block>
                    </td>
                    <td><code>13</code></td>
                    <td><code>13</code></td>
                    <td><code>13</code></td>
                </tr>
                <tr>
                    <td>
                        <code-block lang="sql">
                            SELECT 4 + ' 09 ';
                        </code-block>
                    </td>
                    <td><code>13</code></td>
                    <td><code>13</code></td>
                    <td><code>13</code></td>
                </tr>
                <tr>
                    <td>
                        <code-block lang="sql">
                            SELECT 4 + '9.56';
                        </code-block>
                    </td>
                    <td><code>13.53</code></td>
                    <td><code>Konvertierungsfehler!</code></td>
                    <td><code>Konvertierungsfehler!</code></td>
                </tr>
                <tr>
                    <td>
                        <code-block lang="sql">
                            SELECT 4.53 + '9';
                        </code-block>
                    </td>
                    <td><code>13.530000000000001</code></td>
                    <td><code>13.53</code></td>
                    <td><code>13.53</code></td>
                </tr>
                <tr>
                    <td>
                        <code-block lang="sql">
                            SELECT '3.47' + '9.53';
                        </code-block>
                    </td>
                    <td><code>13</code></td>
                    <td><code>Konvertierungsfehler!</code></td>
                    <td><code>3.499.53</code></td>
                </tr>
            </table>
        </chapter>

        <chapter title="Explizite Typkonvertierung" id="typkonvertierung-explizit">
            <p>
                Eine explizite Typkonvertierung wird mit der Skalarfunktion <code>CAST</code> realisiert. Hier wird ein
                Spalten- oder Literalwert aus einem gegebenen Datentyp in einem Zieldatentyp konvertiert, der explizit
                angegeben werden muss. Beispiel für explizite Typkonvertierung:
            </p>

            <code-block lang="sql">
                SELECT CAST(5 AS DECIMAL(6,3)) AS konvertierungsergebnis;
            </code-block>

            <table>
                <tr>
                    <td>konvertierungsergebnis</td>
                </tr>
                <tr>
                    <td>5.000</td>
                </tr>
            </table>

            <p>
                Hier wird ein ganzzahliges numerisches Literal 5 mit dem Aufruf <code>DECIMAL(6,3)</code> konvertiert.
                Das bedeutet, dass eine ganze Zahl in einen Datentyp konvertiert werden soll, der maximal insgesamt
                sechsstellig ist und drei Nachkommastellen hat.
            </p>
            <p>
                Der <code>CAST</code>-Konvertierugsfunktion wird als Parameter zuerst der Wert der Konvertiert werden
                soll übergeben. Nach dem Wert folgt das Schlüsselwort <code>AS</code> und darauf der jeweilige
                Zieldatentyp, in den der Wert konvertiert werden soll.
            </p>
        </chapter>
    </chapter>

    <chapter title="Quellen" id="quellen">
        <tip>
            <b>(BUCH)</b>
            978-3-836245630, Einstieg in SQL, Michael Laube, Rheinwerk Verlag GmbH, Bonn, 2018
        </tip>
    </chapter>
</topic>