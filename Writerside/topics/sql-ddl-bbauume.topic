<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Die B-Bäume" id="sql-ddl-bbauume">
    <show-structure for="chapter,procedure" depth="2"/>

    <chapter title="Grundlagen" id="grundlagen">
        <p>
            Ein B-Baum ist eine Datenstruktur in der Informatik, die sich vor allem für Datenbanken und Dateisysteme
            eignet. Dabei handelt es sich um <b>keinen Binärbaum</b>, sondern um einen <b>vollständig balancierten
            Baum</b>, welcher in einem Knoten mehrere Elemente sortiert speichern kann.
        </p>

        <chapter title="Geschichte" id="grundlagen-geschichte">
            <p>
                1972 wurden die B-Bäume (Englisch B-tree) von Rudolf Bayer und Edward M. McCreight entwickelt. In
                Kombination mit dem relationalen Datenbankmodell wurde die erste Basis für SQL-Datenbanksysteme bei IBM
                geschaffen, da der Baum eine perfekte Daten- und Indexstruktur zur Verwaltung von Indizes darstellt.
            </p>
        </chapter>
    </chapter>

    <chapter title="Funktionsweise" id="funktionsweise">
        <p>
            B-Bäume gehören zu den balancierten Bäumen, die Daten sortiert speichern. Im Gegensatz zu den meisten
            anderen Bäumen werden Elemente hier zunächst in den Blättern eingefügt. B-Bäume wachsen damit nach oben von
            den Blättern zur Wurzel. B-Bäume sind auf die Ablage in Sekundärspeichern optimiert und daher von großer
            praktischer Relevanz.
        </p>
        <p>
            In den Knoten eines B-Baumes ist eine variable Anzahl von Schlüsseln gespeichert. Diese ist in jedem Fall
            nach oben begrenzt und oft auch nach unten. Eine häufig verwendete Begrenzung ist zum Beispiel "2 4". In
            einem solchen Baum müssen in den Knoten mindestens 2 Elemente und dürfen maximal 4 Elemente gespeichert
            werden. Die Schlüssel sind dabei aufsteigend sortiert.
        </p>
        <p>
            Darüber hinaus werden noch "Anzahl Knoten +1" Verweise auf Kindknoten gespeichert. Ein Verweis zwischen zwei
            Elementen eines Knotens zeigt dann auf einen Bereich, der nur Elemente enthält, die zwischen diesen
            Elementen des Elternknotens liegen.
        </p>
        <p>
            Die maximale Anzahl an Verweisen eines Knotens ist als Verzweigungsgrad oder Ordnung bekannt. Entsprechend
            darf ein Knoten dann höchstens Verzweigungsgrad – 1 Elemente speichern.
        </p>

        <warning>
            Wie es in der Informatik oftmals der Fall ist, so ist diese Definition nicht allgemeingültig. Manchmal wird
            als Ordnung auch die maximale Anzahl an Elementen pro Knoten definiert.
        </warning>

        <chapter title="Maximale Höhe" id="funktionsweise-maximale-hoehe">
            <p>
                B-Baum der Ordnung <code>m</code> mit <code>n</code> Schlüsseln:
            </p>

            <code-block lang="tex">
                \textbf{Eine } hoehe + 1 \textbf{ hat } k_{hoehe+1}\ge 2(m+1)^{h+1} \textbf{ Knoten}
            </code-block>

            <p>
                Dabei teilt man den Wertebereich der Schlüssel in <code>n + 1</code> Intervalle ein:
            </p>

            <code-block lang="tex">
                k_{hoehe+1}=n+1\ge 2(m+1)^{hoehe+1}
            </code-block>

            <p>
                Daraus folgt wiederum:
            </p>

            <code-block lang="tex">
                hoehe\le1+\log_{m+1}(\frac{n+1}{2})
            </code-block>

            <p>
                Die Höhe muss immer eine ganze Zahl sein, deshalb gilt:
            </p>

            <code-block lang="tex">
                hoehe\le\left\lfloor\log_{m+1}(\frac{n+1}{2})\right\rfloor+1
            </code-block>
        </chapter>

        <chapter title="Suchen" id="funktionsweise-suchen">

        </chapter>

        <chapter title="Komplexität" id="funktionsweise-komplexitaet">

        </chapter>
    </chapter>

    <chapter title="Mit einem B-Baum arbeiten" id="bbaum-arbeiten">

        <chapter title="B-Baum Einfügen" id="bbaum-einfuegen">

        </chapter>

        <chapter title="B-Baum Löschen" id="bbaum-loeschen">

        </chapter>
    </chapter>

    <chapter title="Weitere Varianten" id="varianten">

        <chapter title="B+ Baum" id="varianten-bplus">

        </chapter>

        <chapter title="B* Baum" id="varianten-basterisk">

        </chapter>
    </chapter>

    <chapter title="Quellen" id="quellen">
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://de.wikipedia.org/wiki/B-Baum" ignore-vars="true">
                https://de.wikipedia.org/wiki/B-Baum
            </a>, 2020-12-17 11:45
        </tip>
        <tip>
            <b>(WEBSEITE)</b>
            <a href="https://studyflix.de/informatik/b-baum-1435" ignore-vars="true">
                https://studyflix.de/informatik/b-baum-1435
            </a>, 2020-12-18 12:30
        </tip>
    </chapter>
</topic>